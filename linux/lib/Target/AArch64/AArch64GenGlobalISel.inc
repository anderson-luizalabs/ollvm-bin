/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Global Instruction Selector for the AArch64 target                         *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

#ifdef GET_GLOBALISEL_PREDICATE_BITSET
const unsigned MAX_SUBTARGET_PREDICATES = 12;
using PredicateBitset = llvm::PredicateBitsetImpl<MAX_SUBTARGET_PREDICATES>;
#endif // ifdef GET_GLOBALISEL_PREDICATE_BITSET

#ifdef GET_GLOBALISEL_TEMPORARIES_DECL
  mutable MatcherState State;
  typedef ComplexRendererFn(AArch64InstructionSelector::*ComplexMatcherMemFn)(MachineOperand &) const;
const MatcherInfoTy<PredicateBitset, ComplexMatcherMemFn> MatcherInfo;
#endif // ifdef GET_GLOBALISEL_TEMPORARIES_DECL

#ifdef GET_GLOBALISEL_TEMPORARIES_INIT
, State(1),
MatcherInfo({TypeObjects, FeatureBitsets, {
  nullptr, // GICP_Invalid
  &AArch64InstructionSelector::selectArithImmed, // gi_addsub_shifted_imm32
  &AArch64InstructionSelector::selectArithImmed, // gi_addsub_shifted_imm64
}})
#endif // ifdef GET_GLOBALISEL_TEMPORARIES_INIT

#ifdef GET_GLOBALISEL_IMPL
// Bits for subtarget features that participate in instruction matching.
enum SubtargetFeatureBits : uint8_t {
  Feature_HasFPARMv8Bit = 2,
  Feature_HasNEONBit = 3,
  Feature_HasCryptoBit = 5,
  Feature_HasCRCBit = 0,
  Feature_HasRDMBit = 4,
  Feature_HasPerfMonBit = 6,
  Feature_HasFullFP16Bit = 1,
  Feature_HasFuseAESBit = 10,
  Feature_IsLEBit = 7,
  Feature_IsBEBit = 11,
  Feature_UseAlternateSExtLoadCVTF32Bit = 9,
  Feature_NotForCodeSizeBit = 8,
};

PredicateBitset AArch64InstructionSelector::
computeAvailableModuleFeatures(const AArch64Subtarget *Subtarget) const {
  PredicateBitset Features;
  if (Subtarget->hasFPARMv8())
    Features[Feature_HasFPARMv8Bit] = 1;
  if (Subtarget->hasNEON())
    Features[Feature_HasNEONBit] = 1;
  if (Subtarget->hasCrypto())
    Features[Feature_HasCryptoBit] = 1;
  if (Subtarget->hasCRC())
    Features[Feature_HasCRCBit] = 1;
  if (Subtarget->hasRDM())
    Features[Feature_HasRDMBit] = 1;
  if (Subtarget->hasPerfMon())
    Features[Feature_HasPerfMonBit] = 1;
  if (Subtarget->hasFullFP16())
    Features[Feature_HasFullFP16Bit] = 1;
  if (Subtarget->hasFuseAES())
    Features[Feature_HasFuseAESBit] = 1;
  if (Subtarget->isLittleEndian())
    Features[Feature_IsLEBit] = 1;
  if (!Subtarget->isLittleEndian())
    Features[Feature_IsBEBit] = 1;
  if (Subtarget->useAlternateSExtLoadCVTF32Pattern())
    Features[Feature_UseAlternateSExtLoadCVTF32Bit] = 1;
  return Features;
}

PredicateBitset AArch64InstructionSelector::
computeAvailableFunctionFeatures(const AArch64Subtarget *Subtarget, const MachineFunction *MF) const {
  PredicateBitset Features;
  if (!MF->getFunction()->optForSize())
    Features[Feature_NotForCodeSizeBit] = 1;
  return Features;
}

enum {
  GILLT_v2s32,
  GILLT_v2s64,
  GILLT_v4s16,
  GILLT_v4s32,
  GILLT_v4s64,
  GILLT_v8s1,
  GILLT_v8s8,
  GILLT_v8s16,
  GILLT_v8s32,
  GILLT_v8s64,
  GILLT_v16s1,
  GILLT_v16s8,
  GILLT_v16s16,
  GILLT_v16s32,
  GILLT_v32s1,
  GILLT_v32s8,
  GILLT_v32s16,
  GILLT_v64s1,
  GILLT_v64s8,
  GILLT_s8,
  GILLT_s16,
  GILLT_s32,
  GILLT_s64,
  GILLT_s80,
};
const static LLT TypeObjects[] = {
  LLT::vector(2, 32),
  LLT::vector(2, 64),
  LLT::vector(4, 16),
  LLT::vector(4, 32),
  LLT::vector(4, 64),
  LLT::vector(8, 1),
  LLT::vector(8, 8),
  LLT::vector(8, 16),
  LLT::vector(8, 32),
  LLT::vector(8, 64),
  LLT::vector(16, 1),
  LLT::vector(16, 8),
  LLT::vector(16, 16),
  LLT::vector(16, 32),
  LLT::vector(32, 1),
  LLT::vector(32, 8),
  LLT::vector(32, 16),
  LLT::vector(64, 1),
  LLT::vector(64, 8),
  LLT::scalar(8),
  LLT::scalar(16),
  LLT::scalar(32),
  LLT::scalar(64),
  LLT::scalar(80),
};

enum {
  GIFBS_Invalid,
  GIFBS_HasCRC,
  GIFBS_HasCrypto,
  GIFBS_HasFPARMv8,
  GIFBS_HasFullFP16,
  GIFBS_HasNEON,
  GIFBS_HasRDM,
  GIFBS_IsBE,
  GIFBS_IsLE,
  GIFBS_HasNEON_HasFullFP16,
  GIFBS_HasNEON_HasRDM,
};
const static PredicateBitset FeatureBitsets[] {
  {}, // GIFBS_Invalid
  {Feature_HasCRCBit, },
  {Feature_HasCryptoBit, },
  {Feature_HasFPARMv8Bit, },
  {Feature_HasFullFP16Bit, },
  {Feature_HasNEONBit, },
  {Feature_HasRDMBit, },
  {Feature_IsBEBit, },
  {Feature_IsLEBit, },
  {Feature_HasNEONBit, Feature_HasFullFP16Bit, },
  {Feature_HasNEONBit, Feature_HasRDMBit, },
};

enum {
  GICP_Invalid,
  GICP_gi_addsub_shifted_imm32,
  GICP_gi_addsub_shifted_imm64,
};
// See constructor for table contents

bool AArch64InstructionSelector::selectImpl(MachineInstr &I) const {
  MachineFunction &MF = *I.getParent()->getParent();
  MachineRegisterInfo &MRI = MF.getRegInfo();
  // FIXME: This should be computed on a per-function basis rather than per-insn.
  AvailableFunctionFeatures = computeAvailableFunctionFeatures(&STI, &MF);
  const PredicateBitset AvailableFeatures = getAvailableFeatures();
  NewMIVector OutMIs;
  State.MIs.clear();
  State.MIs.push_back(&I);

  const static int64_t MatchTable0[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_sha1c,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 183:iPTR, FPR128:v4i32:$Rd, FPR32:i32:$Rn, V128:v4i32:$Rm)  =>  (SHA1Crrr:v4i32 FPR128:v4i32:$Rd, FPR32:i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHA1Crrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable0\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable0, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_sha1p,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 186:iPTR, FPR128:v4i32:$Rd, FPR32:i32:$Rn, V128:v4i32:$Rm)  =>  (SHA1Prrr:v4i32 FPR128:v4i32:$Rd, FPR32:i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHA1Prrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable2[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_sha1m,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 185:iPTR, FPR128:v4i32:$Rd, FPR32:i32:$Rn, V128:v4i32:$Rm)  =>  (SHA1Mrrr:v4i32 FPR128:v4i32:$Rd, FPR32:i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHA1Mrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable2\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable2, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable3[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_sha1su0,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 187:iPTR, V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SHA1SU0rrr:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHA1SU0rrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable3\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable3, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable4[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_sha256h,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 189:iPTR, FPR128:v4i32:$Rd, FPR128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SHA256Hrrr:v4i32 FPR128:v4i32:$Rd, FPR128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHA256Hrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable4\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable4, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable5[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_sha256h2,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 190:iPTR, FPR128:v4i32:$Rd, FPR128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SHA256H2rrr:v4i32 FPR128:v4i32:$Rd, FPR128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHA256H2rrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable5\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable5, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable6[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_sha256su1,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 192:iPTR, V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SHA256SU1rrr:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHA256SU1rrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable6\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable6, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable7[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_tbx1,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Ri
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 311:iPTR, V64:v8i8:$Rd, VecListOne128:v16i8:$Rn, V64:v8i8:$Ri)  =>  (TBXv8i8One:v8i8 V64:v8i8:$Rd, VecListOne128:v16i8:$Rn, V64:v8i8:$Ri)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::TBXv8i8One,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ri
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable7\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable7, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable8[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_tbx1,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Ri
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 311:iPTR, V128:v16i8:$Rd, V128:v16i8:$Ri, V128:v16i8:$Rn)  =>  (TBXv16i8One:v16i8 V128:v16i8:$Rd, V128:v16i8:$Ri, V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::TBXv16i8One,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Ri
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable8\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable8, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable9[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/3, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_FNEG,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Ra
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (fma:f32 (fneg:f32 FPR32:f32:$Rn), FPR32:f32:$Rm, (fneg:f32 FPR32:f32:$Ra))  =>  (FNMADDSrrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm, FPR32:f32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMADDSrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable9\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable9, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable10[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/3, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_FNEG,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Ra
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (fma:f64 (fneg:f64 FPR64:f64:$Rn), FPR64:f64:$Rm, (fneg:f64 FPR64:f64:$Ra))  =>  (FNMADDDrrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm, FPR64:f64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMADDDrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable10\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable10, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable11[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f32 (fneg:f32 FPR32:f32:$Rn), FPR32:f32:$Rm, FPR32:f32:$Ra)  =>  (FMSUBSrrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm, FPR32:f32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMSUBSrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable11\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable11, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable12[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f64 (fneg:f64 FPR64:f64:$Rn), FPR64:f64:$Rm, FPR64:f64:$Ra)  =>  (FMSUBDrrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm, FPR64:f64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMSUBDrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable12\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable12, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable13[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:v2f32 (fneg:v2f32 V64:v2f32:$Rn), V64:v2f32:$Rm, V64:v2f32:$Rd)  =>  (FMLSv2f32:v2f32 V64:v2f32:$Rd, V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLSv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable13\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable13, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable14[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:v4f32 (fneg:v4f32 V128:v4f32:$Rn), V128:v4f32:$Rm, V128:v4f32:$Rd)  =>  (FMLSv4f32:v4f32 V128:v4f32:$Rd, V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLSv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable14\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable14, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable15[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:v2f64 (fneg:v2f64 V128:v2f64:$Rn), V128:v2f64:$Rm, V128:v2f64:$Rd)  =>  (FMLSv2f64:v2f64 V128:v2f64:$Rd, V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLSv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable15\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable15, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable16[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/3, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_FNEG,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Ra
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (fma:f32 FPR32:f32:$Rn, (fneg:f32 FPR32:f32:$Rm), (fneg:f32 FPR32:f32:$Ra))  =>  (FNMADDSrrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm, FPR32:f32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMADDSrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable16\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable16, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable17[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/3, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_FNEG,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Ra
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (fma:f64 FPR64:f64:$Rn, (fneg:f64 FPR64:f64:$Rm), (fneg:f64 FPR64:f64:$Ra))  =>  (FNMADDDrrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm, FPR64:f64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMADDDrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable17\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable17, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable18[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s16, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR16RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f16 FPR16:f16:$Rn, (fneg:f16 FPR16:f16:$Rm), FPR16:f16:$Ra)  =>  (FMSUBHrrr:f16 FPR16:f16:$Rn, FPR16:f16:$Rm, FPR16:f16:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMSUBHrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable18\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable18, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable19[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f32 FPR32:f32:$Rn, (fneg:f32 FPR32:f32:$Rm), FPR32:f32:$Ra)  =>  (FMSUBSrrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm, FPR32:f32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMSUBSrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable19\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable19, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable20[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f64 FPR64:f64:$Rn, (fneg:f64 FPR64:f64:$Rm), FPR64:f64:$Ra)  =>  (FMSUBDrrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm, FPR64:f64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMSUBDrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable20\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable20, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable21[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:v4f16 V64:v4f16:$Rn, (fneg:v4f16 V64:v4f16:$Rm), V64:v4f16:$Rd)  =>  (FMLSv4f16:v4f16 V64:v4f16:$Rd, V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLSv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable21\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable21, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable22[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:v8f16 V128:v8f16:$Rn, (fneg:v8f16 V128:v8f16:$Rm), V128:v8f16:$Rd)  =>  (FMLSv8f16:v8f16 V128:v8f16:$Rd, V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLSv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable22\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable22, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable23[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:v2f32 V64:v2f32:$Rn, (fneg:v2f32 V64:v2f32:$Rm), V64:v2f32:$Rd)  =>  (FMLSv2f32:v2f32 V64:v2f32:$Rd, V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLSv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable23\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable23, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable24[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:v4f32 V128:v4f32:$Rn, (fneg:v4f32 V128:v4f32:$Rm), V128:v4f32:$Rd)  =>  (FMLSv4f32:v4f32 V128:v4f32:$Rd, V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLSv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable24\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable24, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable25[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:v2f64 V128:v2f64:$Rn, (fneg:v2f64 V128:v2f64:$Rm), V128:v2f64:$Rd)  =>  (FMLSv2f64:v2f64 V128:v2f64:$Rd, V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLSv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable25\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable25, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable26[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s16, 
    // MIs[1] Ra
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f16 FPR16:f16:$Rn, FPR16:f16:$Rm, (fneg:f16 FPR16:f16:$Ra))  =>  (FNMSUBHrrr:f16 FPR16:f16:$Rn, FPR16:f16:$Rm, FPR16:f16:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMSUBHrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable26\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable26, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable27[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Ra
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f32 FPR32:f32:$Rn, FPR32:f32:$Rm, (fneg:f32 FPR32:f32:$Ra))  =>  (FNMSUBSrrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm, FPR32:f32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMSUBSrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable27\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable27, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable28[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Ra
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f64 FPR64:f64:$Rn, FPR64:f64:$Rm, (fneg:f64 FPR64:f64:$Ra))  =>  (FNMSUBDrrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm, FPR64:f64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMSUBDrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable28\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable28, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable29[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR16RegClassID,
    // (fma:f16 FPR16:f16:$Rn, FPR16:f16:$Rm, FPR16:f16:$Ra)  =>  (FMADDHrrr:f16 FPR16:f16:$Rn, FPR16:f16:$Rm, FPR16:f16:$Ra)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMADDHrrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable29\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable29, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable30[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (fma:f32 FPR32:f32:$Rn, FPR32:f32:$Rm, FPR32:f32:$Ra)  =>  (FMADDSrrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm, FPR32:f32:$Ra)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMADDSrrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable30\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable30, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable31[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (fma:f64 FPR64:f64:$Rn, FPR64:f64:$Rm, FPR64:f64:$Ra)  =>  (FMADDDrrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm, FPR64:f64:$Ra)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMADDDrrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable31\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable31, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable32[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (fma:v4f16 V64:v4f16:$Rm, V64:v4f16:$Rn, V64:v4f16:$Rd)  =>  (FMLAv4f16:v4f16 V64:v4f16:$Rd, V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLAv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable32\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable32, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable33[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (fma:v8f16 V128:v8f16:$Rm, V128:v8f16:$Rn, V128:v8f16:$Rd)  =>  (FMLAv8f16:v8f16 V128:v8f16:$Rd, V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLAv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable33\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable33, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable34[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (fma:v2f32 V64:v2f32:$Rm, V64:v2f32:$Rn, V64:v2f32:$Rd)  =>  (FMLAv2f32:v2f32 V64:v2f32:$Rd, V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLAv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable34\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable34, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable35[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (fma:v4f32 V128:v4f32:$Rm, V128:v4f32:$Rn, V128:v4f32:$Rd)  =>  (FMLAv4f32:v4f32 V128:v4f32:$Rd, V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLAv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable35\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable35, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable36[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (fma:v2f64 V128:v2f64:$Rm, V128:v2f64:$Rn, V128:v2f64:$Rd)  =>  (FMLAv2f64:v2f64 V128:v2f64:$Rd, V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMLAv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable36\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable36, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable37[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasRDM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i16 276:iPTR, V64:v4i16:$Rd, (intrinsic_wo_chain:v4i16 281:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (SQRDMLAHv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMLAHv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable37\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable37, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable38[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasRDM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v8i16 276:iPTR, V128:v8i16:$Rd, (intrinsic_wo_chain:v8i16 281:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm))  =>  (SQRDMLAHv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMLAHv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable38\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable38, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable39[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasRDM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v2i32 276:iPTR, V64:v2i32:$Rd, (intrinsic_wo_chain:v2i32 281:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (SQRDMLAHv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMLAHv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable39\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable39, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable40[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasRDM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i32 276:iPTR, V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 281:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm))  =>  (SQRDMLAHv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMLAHv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable40\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable40, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable41[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasRDM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i16 289:iPTR, V64:v4i16:$Rd, (intrinsic_wo_chain:v4i16 281:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (SQRDMLSHv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMLSHv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable41\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable41, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable42[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasRDM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v8i16 289:iPTR, V128:v8i16:$Rd, (intrinsic_wo_chain:v8i16 281:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm))  =>  (SQRDMLSHv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMLSHv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable42\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable42, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable43[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasRDM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v2i32 289:iPTR, V64:v2i32:$Rd, (intrinsic_wo_chain:v2i32 281:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (SQRDMLSHv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMLSHv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable43\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable43, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable44[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasRDM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i32 289:iPTR, V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 281:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm))  =>  (SQRDMLSHv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMLSHv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable44\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable44, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable45[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqdmull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i32 276:iPTR, V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 278:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (SQDMLALv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMLALv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable45\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable45, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable46[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqdmull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v2i64 276:iPTR, V128:v2i64:$Rd, (intrinsic_wo_chain:v2i64 278:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (SQDMLALv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMLALv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable46\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable46, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable47[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqdmull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i32 289:iPTR, V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 278:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (SQDMLSLv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMLSLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable47\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable47, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable48[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqdmull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v2i64 289:iPTR, V128:v2i64:$Rd, (intrinsic_wo_chain:v2i64 278:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (SQDMLSLv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMLSLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable48\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable48, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable49[] = {
    GIM_CheckFeatures, GIFBS_HasRDM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:i32 276:iPTR, FPR32:i32:$Rd, (intrinsic_wo_chain:i32 281:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm))  =>  (SQRDMLAHv1i32:i32 FPR32:i32:$Rd, FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMLAHv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable49\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable49, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable50[] = {
    GIM_CheckFeatures, GIFBS_HasRDM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:i32 289:iPTR, FPR32:i32:$Rd, (intrinsic_wo_chain:i32 281:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm))  =>  (SQRDMLSHv1i32:i32 FPR32:i32:$Rd, FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMLSHv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable50\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable50, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable51[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqdmulls_scalar,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:i64 276:iPTR, FPR64:i64:$Rd, (intrinsic_wo_chain:i64 279:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm))  =>  (SQDMLALi32:i64 FPR64:i64:$Rd, FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMLALi32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable51\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable51, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable52[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sqdmulls_scalar,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:i64 289:iPTR, FPR64:i64:$Rd, (intrinsic_wo_chain:i64 279:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm))  =>  (SQDMLSLi32:i64 FPR64:i64:$Rd, FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMLSLi32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable52\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable52, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable53[] = {
    GIM_CheckFeatures, GIFBS_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crc32b,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR32RegClassID,
    // (intrinsic_wo_chain:i32 171:iPTR, GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (CRC32Brr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CRC32Brr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable53\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable53, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable54[] = {
    GIM_CheckFeatures, GIFBS_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crc32h,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR32RegClassID,
    // (intrinsic_wo_chain:i32 176:iPTR, GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (CRC32Hrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CRC32Hrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable54\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable54, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable55[] = {
    GIM_CheckFeatures, GIFBS_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crc32w,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR32RegClassID,
    // (intrinsic_wo_chain:i32 177:iPTR, GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (CRC32Wrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CRC32Wrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable55\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable55, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable56[] = {
    GIM_CheckFeatures, GIFBS_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crc32x,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR64RegClassID,
    // (intrinsic_wo_chain:i32 178:iPTR, GPR32:i32:$Rn, GPR64:i64:$Rm)  =>  (CRC32Xrr:i32 GPR32:i32:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CRC32Xrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable56\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable56, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable57[] = {
    GIM_CheckFeatures, GIFBS_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crc32cb,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR32RegClassID,
    // (intrinsic_wo_chain:i32 172:iPTR, GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (CRC32CBrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CRC32CBrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable57\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable57, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable58[] = {
    GIM_CheckFeatures, GIFBS_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crc32ch,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR32RegClassID,
    // (intrinsic_wo_chain:i32 173:iPTR, GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (CRC32CHrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CRC32CHrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable58\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable58, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable59[] = {
    GIM_CheckFeatures, GIFBS_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crc32cw,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR32RegClassID,
    // (intrinsic_wo_chain:i32 174:iPTR, GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (CRC32CWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CRC32CWrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable59\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable59, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable60[] = {
    GIM_CheckFeatures, GIFBS_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crc32cx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR64RegClassID,
    // (intrinsic_wo_chain:i32 175:iPTR, GPR32:i32:$Rn, GPR64:i64:$Rm)  =>  (CRC32CXrr:i32 GPR32:i32:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CRC32CXrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable60\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable60, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable61[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_suqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 306:iPTR, V64:v8i8:$Rd, V64:v8i8:$Rn)  =>  (SUQADDv8i8:v8i8 V64:v8i8:$Rd, V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUQADDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable61\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable61, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable62[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_suqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 306:iPTR, V128:v16i8:$Rd, V128:v16i8:$Rn)  =>  (SUQADDv16i8:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUQADDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable62\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable62, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable63[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_suqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 306:iPTR, V64:v4i16:$Rd, V64:v4i16:$Rn)  =>  (SUQADDv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUQADDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable63\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable63, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable64[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_suqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 306:iPTR, V128:v8i16:$Rd, V128:v8i16:$Rn)  =>  (SUQADDv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUQADDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable64\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable64, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable65[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_suqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 306:iPTR, V64:v2i32:$Rd, V64:v2i32:$Rn)  =>  (SUQADDv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUQADDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable65\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable65, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable66[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_suqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 306:iPTR, V128:v4i32:$Rd, V128:v4i32:$Rn)  =>  (SUQADDv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUQADDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable66\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable66, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable67[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_suqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 306:iPTR, V128:v2i64:$Rd, V128:v2i64:$Rn)  =>  (SUQADDv2i64:v2i64 V128:v2i64:$Rd, V128:v2i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUQADDv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable67\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable67, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable68[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_usqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 341:iPTR, V64:v8i8:$Rd, V64:v8i8:$Rn)  =>  (USQADDv8i8:v8i8 V64:v8i8:$Rd, V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USQADDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable68\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable68, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable69[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_usqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 341:iPTR, V128:v16i8:$Rd, V128:v16i8:$Rn)  =>  (USQADDv16i8:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USQADDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable69\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable69, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable70[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_usqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 341:iPTR, V64:v4i16:$Rd, V64:v4i16:$Rn)  =>  (USQADDv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USQADDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable70\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable70, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable71[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_usqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 341:iPTR, V128:v8i16:$Rd, V128:v8i16:$Rn)  =>  (USQADDv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USQADDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable71\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable71, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable72[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_usqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 341:iPTR, V64:v2i32:$Rd, V64:v2i32:$Rn)  =>  (USQADDv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USQADDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable72\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable72, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable73[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_usqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 341:iPTR, V128:v4i32:$Rd, V128:v4i32:$Rn)  =>  (USQADDv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USQADDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable73\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable73, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable74[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_usqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 341:iPTR, V128:v2i64:$Rd, V128:v2i64:$Rn)  =>  (USQADDv2i64:v2i64 V128:v2i64:$Rd, V128:v2i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USQADDv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable74\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable74, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable75[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 203:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (ADDPv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDPv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable75\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable75, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable76[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 203:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (ADDPv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDPv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable76\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable76, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable77[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 203:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (ADDPv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDPv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable77\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable77, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable78[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 203:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (ADDPv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDPv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable78\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable78, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable79[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 203:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (ADDPv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDPv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable79\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable79, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable80[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 203:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (ADDPv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDPv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable80\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable80, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable81[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 203:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (ADDPv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDPv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable81\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable81, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable82[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 205:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FABDv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FABDv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable82\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable82, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable83[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 205:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FABDv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FABDv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable83\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable83, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable84[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 205:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FABDv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FABDv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable84\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable84, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable85[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 205:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FABDv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FABDv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable85\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable85, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable86[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 205:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FABDv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FABDv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable86\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable86, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable87[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facge,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 206:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FACGEv4f16:v4i16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGEv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable87\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable87, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable88[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facge,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 206:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FACGEv8f16:v8i16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGEv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable88\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable88, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable89[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facge,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 206:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FACGEv2f32:v2i32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGEv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable89\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable89, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable90[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facge,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 206:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FACGEv4f32:v4i32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGEv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable90\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable90, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable91[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facge,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 206:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FACGEv2f64:v2i64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGEv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable91\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable91, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable92[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facgt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 207:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FACGTv4f16:v4i16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGTv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable92\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable92, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable93[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facgt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 207:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FACGTv8f16:v8i16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGTv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable93\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable93, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable94[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facgt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 207:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FACGTv2f32:v2i32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGTv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable94\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable94, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable95[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facgt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 207:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FACGTv4f32:v4i32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGTv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable95\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable95, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable96[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facgt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 207:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FACGTv2f64:v2i64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGTv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable96\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable96, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable97[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 203:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FADDPv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FADDPv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable97\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable97, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable98[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 203:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FADDPv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FADDPv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable98\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable98, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable99[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 203:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FADDPv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FADDPv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable99\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable99, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable100[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 203:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FADDPv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FADDPv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable100\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable100, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable101[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 203:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FADDPv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FADDPv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable101\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable101, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable102[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxnmp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 222:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FMAXNMPv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXNMPv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable102\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable102, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable103[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxnmp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 222:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FMAXNMPv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXNMPv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable103\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable103, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable104[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxnmp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 222:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FMAXNMPv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXNMPv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable104\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable104, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable105[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxnmp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 222:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FMAXNMPv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXNMPv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable105\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable105, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable106[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxnmp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 222:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FMAXNMPv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXNMPv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable106\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable106, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable107[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 224:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FMAXPv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXPv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable107\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable107, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable108[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 224:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FMAXPv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXPv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable108\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable108, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable109[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 224:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FMAXPv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXPv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable109\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable109, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable110[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 224:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FMAXPv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXPv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable110\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable110, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable111[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 224:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FMAXPv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXPv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable111\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable111, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable112[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminnmp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 228:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FMINNMPv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINNMPv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable112\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable112, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable113[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminnmp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 228:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FMINNMPv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINNMPv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable113\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable113, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable114[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminnmp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 228:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FMINNMPv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINNMPv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable114\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable114, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable115[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminnmp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 228:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FMINNMPv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINNMPv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable115\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable115, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable116[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminnmp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 228:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FMINNMPv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINNMPv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable116\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable116, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable117[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 230:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FMINPv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINPv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable117\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable117, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable118[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 230:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FMINPv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINPv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable118\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable118, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable119[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 230:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FMINPv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINPv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable119\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable119, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable120[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 230:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FMINPv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINPv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable120\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable120, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable121[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 230:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FMINPv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINPv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable121\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable121, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable122[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmulx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 232:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FMULXv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMULXv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable122\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable122, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable123[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmulx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 232:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FMULXv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMULXv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable123\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable123, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable124[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmulx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 232:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FMULXv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMULXv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable124\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable124, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable125[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmulx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 232:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FMULXv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMULXv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable125\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable125, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable126[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmulx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 232:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FMULXv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMULXv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable126\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable126, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable127[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 234:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FRECPSv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPSv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable127\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable127, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable128[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 234:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FRECPSv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPSv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable128\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable128, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable129[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 234:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FRECPSv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPSv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable129\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable129, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable130[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 234:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FRECPSv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPSv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable130\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable130, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable131[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 234:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FRECPSv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPSv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable131\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable131, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable132[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrts,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 238:iPTR, V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FRSQRTSv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTSv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable132\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable132, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable133[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrts,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 238:iPTR, V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FRSQRTSv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTSv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable133\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable133, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable134[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrts,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 238:iPTR, V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FRSQRTSv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTSv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable134\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable134, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable135[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrts,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 238:iPTR, V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FRSQRTSv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTSv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable135\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable135, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable136[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrts,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 238:iPTR, V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FRSQRTSv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTSv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable136\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable136, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable137[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_pmul,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 251:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (PMULv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::PMULv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable137\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable137, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable138[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_pmul,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 251:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (PMULv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::PMULv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable138\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable138, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable139[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 258:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SABDv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable139\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable139, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable140[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 258:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SABDv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable140\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable140, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable141[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 258:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SABDv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable141\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable141, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable142[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 258:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SABDv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable142\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable142, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable143[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 258:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SABDv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable143\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable143, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable144[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 258:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SABDv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable144\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable144, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable145[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 265:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SHADDv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHADDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable145\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable145, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable146[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 265:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SHADDv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHADDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable146\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable146, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable147[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 265:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SHADDv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHADDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable147\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable147, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable148[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 265:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SHADDv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHADDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable148\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable148, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable149[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 265:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SHADDv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHADDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable149\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable149, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable150[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 265:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SHADDv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHADDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable150\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable150, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable151[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 267:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SHSUBv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHSUBv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable151\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable151, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable152[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 267:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SHSUBv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHSUBv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable152\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable152, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable153[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 267:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SHSUBv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHSUBv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable153\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable153, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable154[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 267:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SHSUBv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHSUBv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable154\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable154, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable155[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 267:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SHSUBv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHSUBv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable155\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable155, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable156[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_shsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 267:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SHSUBv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHSUBv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable156\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable156, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable157[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_smaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 269:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SMAXPv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMAXPv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable157\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable157, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable158[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_smaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 269:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SMAXPv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMAXPv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable158\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable158, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable159[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_smaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 269:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SMAXPv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMAXPv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable159\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable159, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable160[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_smaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 269:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SMAXPv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMAXPv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable160\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable160, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable161[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_smaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 269:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SMAXPv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMAXPv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable161\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable161, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable162[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_smaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 269:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SMAXPv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMAXPv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable162\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable162, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable163[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 272:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SMINPv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMINPv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable163\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable163, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable164[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 272:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SMINPv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMINPv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable164\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable164, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable165[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 272:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SMINPv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMINPv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable165\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable165, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable166[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 272:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SMINPv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMINPv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable166\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable166, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable167[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 272:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SMINPv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMINPv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable167\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable167, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable168[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 272:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SMINPv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMINPv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable168\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable168, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable169[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 276:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SQADDv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQADDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable169\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable169, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable170[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 276:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SQADDv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQADDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable170\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable170, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable171[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 276:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SQADDv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQADDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable171\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable171, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable172[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 276:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SQADDv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQADDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable172\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable172, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable173[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 276:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SQADDv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQADDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable173\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable173, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable174[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 276:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SQADDv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQADDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable174\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable174, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable175[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 276:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (SQADDv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQADDv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable175\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable175, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable176[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqdmulh,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 277:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SQDMULHv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMULHv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable176\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable176, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable177[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqdmulh,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 277:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SQDMULHv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMULHv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable177\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable177, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable178[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqdmulh,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 277:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SQDMULHv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMULHv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable178\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable178, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable179[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqdmulh,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 277:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SQDMULHv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMULHv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable179\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable179, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable180[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 281:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SQRDMULHv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMULHv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable180\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable180, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable181[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 281:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SQRDMULHv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMULHv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable181\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable181, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable182[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 281:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SQRDMULHv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMULHv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable182\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable182, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable183[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 281:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SQRDMULHv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMULHv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable183\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable183, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable184[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 282:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SQRSHLv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRSHLv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable184\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable184, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable185[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 282:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SQRSHLv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRSHLv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable185\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable185, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable186[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 282:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SQRSHLv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRSHLv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable186\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable186, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable187[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 282:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SQRSHLv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRSHLv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable187\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable187, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable188[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 282:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SQRSHLv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRSHLv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable188\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable188, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable189[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 282:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SQRSHLv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRSHLv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable189\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable189, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable190[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 282:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (SQRSHLv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRSHLv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable190\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable190, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable191[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 285:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SQSHLv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSHLv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable191\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable191, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable192[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 285:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SQSHLv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSHLv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable192\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable192, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable193[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 285:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SQSHLv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSHLv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable193\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable193, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable194[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 285:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SQSHLv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSHLv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable194\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable194, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable195[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 285:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SQSHLv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSHLv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable195\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable195, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable196[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 285:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SQSHLv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSHLv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable196\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable196, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable197[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 285:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (SQSHLv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSHLv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable197\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable197, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable198[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 289:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SQSUBv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSUBv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable198\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable198, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable199[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 289:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SQSUBv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSUBv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable199\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable199, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable200[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 289:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SQSUBv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSUBv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable200\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable200, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable201[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 289:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SQSUBv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSUBv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable201\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable201, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable202[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 289:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SQSUBv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSUBv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable202\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable202, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable203[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 289:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SQSUBv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSUBv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable203\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable203, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable204[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 289:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (SQSUBv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSUBv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable204\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable204, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable205[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 292:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SRHADDv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRHADDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable205\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable205, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable206[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 292:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SRHADDv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRHADDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable206\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable206, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable207[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 292:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SRHADDv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRHADDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable207\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable207, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable208[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 292:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SRHADDv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRHADDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable208\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable208, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable209[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 292:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SRHADDv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRHADDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable209\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable209, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable210[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 292:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SRHADDv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRHADDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable210\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable210, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable211[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 293:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SRSHLv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRSHLv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable211\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable211, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable212[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 293:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SRSHLv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRSHLv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable212\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable212, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable213[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 293:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SRSHLv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRSHLv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable213\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable213, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable214[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 293:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SRSHLv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRSHLv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable214\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable214, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable215[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 293:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SRSHLv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRSHLv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable215\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable215, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable216[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 293:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SRSHLv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRSHLv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable216\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable216, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable217[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 293:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (SRSHLv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRSHLv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable217\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable217, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable218[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 294:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SSHLv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSHLv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable218\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable218, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable219[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 294:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SSHLv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSHLv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable219\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable219, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable220[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 294:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SSHLv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSHLv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable220\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable220, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable221[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 294:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SSHLv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSHLv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable221\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable221, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable222[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 294:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SSHLv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSHLv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable222\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable222, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable223[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 294:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SSHLv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSHLv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable223\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable223, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable224[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 294:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (SSHLv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSHLv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable224\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable224, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable225[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 315:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (UABDv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable225\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable225, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable226[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 315:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (UABDv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable226\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable226, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable227[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 315:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (UABDv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable227\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable227, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable228[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 315:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (UABDv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable228\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable228, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable229[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 315:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (UABDv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable229\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable229, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable230[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 315:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (UABDv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable230\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable230, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable231[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 319:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (UHADDv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHADDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable231\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable231, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable232[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 319:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (UHADDv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHADDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable232\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable232, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable233[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 319:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (UHADDv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHADDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable233\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable233, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable234[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 319:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (UHADDv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHADDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable234\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable234, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable235[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 319:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (UHADDv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHADDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable235\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable235, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable236[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 319:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (UHADDv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHADDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable236\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable236, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable237[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 320:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (UHSUBv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHSUBv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable237\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable237, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable238[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 320:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (UHSUBv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHSUBv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable238\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable238, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable239[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 320:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (UHSUBv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHSUBv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable239\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable239, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable240[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 320:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (UHSUBv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHSUBv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable240\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable240, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable241[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 320:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (UHSUBv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHSUBv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable241\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable241, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable242[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uhsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 320:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (UHSUBv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UHSUBv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable242\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable242, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable243[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_umaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 322:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (UMAXPv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMAXPv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable243\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable243, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable244[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_umaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 322:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (UMAXPv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMAXPv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable244\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable244, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable245[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_umaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 322:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (UMAXPv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMAXPv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable245\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable245, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable246[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_umaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 322:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (UMAXPv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMAXPv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable246\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable246, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable247[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_umaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 322:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (UMAXPv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMAXPv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable247\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable247, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable248[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_umaxp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 322:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (UMAXPv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMAXPv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable248\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable248, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable249[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 325:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (UMINPv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMINPv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable249\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable249, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable250[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 325:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (UMINPv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMINPv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable250\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable250, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable251[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 325:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (UMINPv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMINPv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable251\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable251, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable252[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 325:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (UMINPv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMINPv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable252\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable252, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable253[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 325:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (UMINPv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMINPv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable253\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable253, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable254[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uminp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 325:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (UMINPv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMINPv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable254\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable254, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable255[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 328:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (UQADDv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQADDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable255\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable255, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable256[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 328:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (UQADDv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQADDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable256\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable256, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable257[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 328:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (UQADDv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQADDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable257\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable257, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable258[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 328:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (UQADDv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQADDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable258\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable258, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable259[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 328:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (UQADDv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQADDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable259\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable259, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable260[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 328:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (UQADDv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQADDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable260\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable260, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable261[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 328:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (UQADDv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQADDv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable261\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable261, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable262[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 329:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (UQRSHLv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQRSHLv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable262\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable262, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable263[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 329:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (UQRSHLv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQRSHLv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable263\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable263, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable264[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 329:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (UQRSHLv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQRSHLv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable264\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable264, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable265[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 329:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (UQRSHLv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQRSHLv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable265\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable265, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable266[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 329:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (UQRSHLv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQRSHLv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable266\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable266, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable267[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 329:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (UQRSHLv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQRSHLv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable267\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable267, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable268[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 329:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (UQRSHLv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQRSHLv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable268\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable268, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable269[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 331:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (UQSHLv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSHLv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable269\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable269, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable270[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 331:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (UQSHLv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSHLv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable270\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable270, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable271[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 331:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (UQSHLv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSHLv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable271\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable271, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable272[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 331:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (UQSHLv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSHLv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable272\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable272, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable273[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 331:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (UQSHLv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSHLv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable273\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable273, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable274[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 331:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (UQSHLv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSHLv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable274\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable274, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable275[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 331:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (UQSHLv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSHLv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable275\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable275, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable276[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 333:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (UQSUBv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSUBv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable276\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable276, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable277[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 333:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (UQSUBv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSUBv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable277\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable277, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable278[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 333:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (UQSUBv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSUBv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable278\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable278, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable279[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 333:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (UQSUBv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSUBv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable279\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable279, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable280[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 333:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (UQSUBv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSUBv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable280\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable280, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable281[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 333:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (UQSUBv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSUBv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable281\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable281, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable282[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 333:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (UQSUBv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSUBv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable282\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable282, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable283[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 336:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (URHADDv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URHADDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable283\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable283, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable284[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 336:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (URHADDv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URHADDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable284\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable284, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable285[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 336:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (URHADDv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URHADDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable285\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable285, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable286[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 336:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (URHADDv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URHADDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable286\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable286, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable287[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 336:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (URHADDv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URHADDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable287\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable287, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable288[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urhadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 336:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (URHADDv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URHADDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable288\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable288, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable289[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 337:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (URSHLv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSHLv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable289\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable289, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable290[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 337:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (URSHLv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSHLv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable290\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable290, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable291[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 337:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (URSHLv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSHLv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable291\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable291, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable292[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 337:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (URSHLv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSHLv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable292\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable292, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable293[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 337:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (URSHLv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSHLv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable293\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable293, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable294[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 337:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (URSHLv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSHLv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable294\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable294, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable295[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 337:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (URSHLv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSHLv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable295\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable295, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable296[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ushl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 339:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (USHLv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USHLv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable296\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable296, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable297[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ushl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 339:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (USHLv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USHLv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable297\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable297, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable298[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ushl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 339:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (USHLv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USHLv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable298\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable298, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable299[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ushl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 339:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (USHLv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USHLv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable299\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable299, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable300[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ushl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 339:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (USHLv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USHLv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable300\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable300, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable301[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ushl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 339:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (USHLv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USHLv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable301\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable301, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable302[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ushl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 339:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (USHLv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USHLv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable302\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable302, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable303[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_sisd_fabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f64 352:iPTR, FPR64:f64:$Rn, FPR64:f64:$Rm)  =>  (FABD64:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FABD64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable303\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable303, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable304[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_sisd_fabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:f32 352:iPTR, FPR32:f32:$Rn, FPR32:f32:$Rm)  =>  (FABD32:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FABD32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable304\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable304, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable305[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_sisd_fabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:f16 352:iPTR, FPR16:f16:$Rn, FPR16:f16:$Rm)  =>  (FABD16:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FABD16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable305\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable305, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable306[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facge,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 206:iPTR, FPR64:f64:$Rn, FPR64:f64:$Rm)  =>  (FACGE64:i64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGE64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable306\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable306, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable307[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facge,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 206:iPTR, FPR32:f32:$Rn, FPR32:f32:$Rm)  =>  (FACGE32:i32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGE32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable307\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable307, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable308[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facgt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 207:iPTR, FPR64:f64:$Rn, FPR64:f64:$Rm)  =>  (FACGT64:i64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGT64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable308\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable308, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable309[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facgt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 207:iPTR, FPR32:f32:$Rn, FPR32:f32:$Rm)  =>  (FACGT32:i32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGT32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable309\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable309, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable310[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmulx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f64 232:iPTR, FPR64:f64:$Rn, FPR64:f64:$Rm)  =>  (FMULX64:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMULX64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable310\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable310, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable311[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmulx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:f32 232:iPTR, FPR32:f32:$Rn, FPR32:f32:$Rm)  =>  (FMULX32:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMULX32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable311\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable311, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable312[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmulx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:f16 232:iPTR, FPR16:f16:$Rn, FPR16:f16:$Rm)  =>  (FMULX16:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMULX16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable312\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable312, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable313[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f64 234:iPTR, FPR64:f64:$Rn, FPR64:f64:$Rm)  =>  (FRECPS64:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPS64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable313\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable313, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable314[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:f32 234:iPTR, FPR32:f32:$Rn, FPR32:f32:$Rm)  =>  (FRECPS32:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPS32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable314\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable314, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable315[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:f16 234:iPTR, FPR16:f16:$Rn, FPR16:f16:$Rm)  =>  (FRECPS16:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPS16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable315\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable315, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable316[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrts,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f64 238:iPTR, FPR64:f64:$Rn, FPR64:f64:$Rm)  =>  (FRSQRTS64:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTS64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable316\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable316, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable317[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrts,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:f32 238:iPTR, FPR32:f32:$Rn, FPR32:f32:$Rm)  =>  (FRSQRTS32:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTS32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable317\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable317, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable318[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrts,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:f16 238:iPTR, FPR16:f16:$Rn, FPR16:f16:$Rm)  =>  (FRSQRTS16:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTS16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable318\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable318, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable319[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 276:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (SQADDv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQADDv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable319\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable319, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable320[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqdmulh,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 277:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (SQDMULHv1i32:i32 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMULHv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable320\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable320, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable321[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrdmulh,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 281:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (SQRDMULHv1i32:i32 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRDMULHv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable321\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable321, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable322[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 282:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (SQRSHLv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable322\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable322, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable323[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 285:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (SQSHLv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable323\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable323, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable324[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 289:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (SQSUBv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSUBv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable324\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable324, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable325[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 293:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (SRSHLv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable325\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable325, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable326[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 294:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (SSHLv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable326\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable326, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable327[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 328:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (UQADDv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQADDv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable327\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable327, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable328[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 329:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (UQRSHLv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQRSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable328\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable328, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable329[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 331:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (UQSHLv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable329\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable329, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable330[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 333:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (UQSUBv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSUBv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable330\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable330, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable331[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 337:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (URSHLv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable331\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable331, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable332[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ushl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 339:iPTR, FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (USHLv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable332\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable332, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable333[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqdmulls_scalar,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i64 279:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (SQDMULLi32:i64 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMULLi32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable333\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable333, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable334[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_suqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 306:iPTR, FPR64:i64:$Rd, FPR64:i64:$Rn)  =>  (SUQADDv1i64:i64 FPR64:i64:$Rd, FPR64:i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUQADDv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable334\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable334, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable335[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_suqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 306:iPTR, FPR32:i32:$Rd, FPR32:i32:$Rn)  =>  (SUQADDv1i32:i32 FPR32:i32:$Rd, FPR32:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUQADDv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable335\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable335, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable336[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_usqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 341:iPTR, FPR64:i64:$Rd, FPR64:i64:$Rn)  =>  (USQADDv1i64:i64 FPR64:i64:$Rd, FPR64:i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USQADDv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable336\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable336, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable337[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_usqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 341:iPTR, FPR32:i32:$Rd, FPR32:i32:$Rn)  =>  (USQADDv1i32:i32 FPR32:i32:$Rd, FPR32:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USQADDv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable337\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable337, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable338[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i8 202:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (ADDHNv8i16_v8i8:v8i8 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDHNv8i16_v8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable338\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable338, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable339[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i16 202:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (ADDHNv4i32_v4i16:v4i16 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDHNv4i32_v4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable339\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable339, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable340[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_addhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i32 202:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (ADDHNv2i64_v2i32:v2i32 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDHNv2i64_v2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable340\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable340, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable341[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_subhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i8 305:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SUBHNv8i16_v8i8:v8i8 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUBHNv8i16_v8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable341\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable341, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable342[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_subhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i16 305:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SUBHNv4i32_v4i16:v4i16 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUBHNv4i32_v4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable342\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable342, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable343[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_subhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i32 305:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (SUBHNv2i64_v2i32:v2i32 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUBHNv2i64_v2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable343\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable343, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable344[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_raddhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i8 254:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (RADDHNv8i16_v8i8:v8i8 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::RADDHNv8i16_v8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable344\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable344, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable345[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_raddhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i16 254:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (RADDHNv4i32_v4i16:v4i16 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::RADDHNv4i32_v4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable345\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable345, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable346[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_raddhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i32 254:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (RADDHNv2i64_v2i32:v2i32 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::RADDHNv2i64_v2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable346\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable346, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable347[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_rsubhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i8 257:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (RSUBHNv8i16_v8i8:v8i8 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::RSUBHNv8i16_v8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable347\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable347, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable348[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_rsubhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i16 257:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (RSUBHNv4i32_v4i16:v4i16 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::RSUBHNv4i32_v4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable348\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable348, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable349[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_rsubhn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i32 257:iPTR, V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (RSUBHNv2i64_v2i32:v2i32 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::RSUBHNv2i64_v2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable349\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable349, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable350[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_pmull,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i16 252:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (PMULLv8i8:v8i16 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::PMULLv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable350\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable350, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable351[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i16 274:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SMULLv8i8_v8i16:v8i16 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMULLv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable351\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable351, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable352[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i32 274:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SMULLv4i16_v4i32:v4i32 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMULLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable352\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable352, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable353[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i64 274:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SMULLv2i32_v2i64:v2i64 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMULLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable353\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable353, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable354[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqdmull,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i32 278:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SQDMULLv4i16_v4i32:v4i32 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMULLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable354\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable354, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable355[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqdmull,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i64 278:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SQDMULLv2i32_v2i64:v2i64 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQDMULLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable355\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable355, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable356[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i16 327:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (UMULLv8i8_v8i16:v8i16 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMULLv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable356\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable356, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable357[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i32 327:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (UMULLv4i16_v4i32:v4i32 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMULLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable357\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable357, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable358[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i64 327:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (UMULLv2i32_v2i64:v2i64 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMULLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable358\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable358, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable359[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_aese,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 180:iPTR, V128:v16i8:$Rd, V128:v16i8:$Rn)  =>  (AESErr:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::AESErr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable359\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable359, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable360[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_aesd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 179:iPTR, V128:v16i8:$Rd, V128:v16i8:$Rn)  =>  (AESDrr:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::AESDrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable360\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable360, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable361[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_sha1su1,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 188:iPTR, V128:v4i32:$Rd, V128:v4i32:$Rn)  =>  (SHA1SU1rr:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHA1SU1rr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable361\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable361, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable362[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_sha256su0,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 191:iPTR, V128:v4i32:$Rd, V128:v4i32:$Rn)  =>  (SHA256SU0rr:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHA256SU0rr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable362\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable362, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable363[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_sisd_fabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1f64 352:iPTR, FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)  =>  (FABD64:v1f64 FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FABD64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable363\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable363, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable364[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facge,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 206:iPTR, FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)  =>  (FACGE64:v1i64 FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGE64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable364\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable364, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable365[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_facgt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 207:iPTR, FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)  =>  (FACGT64:v1i64 FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FACGT64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable365\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable365, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable366[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmulx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1f64 232:iPTR, FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)  =>  (FMULX64:v1f64 FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMULX64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable366\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable366, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable367[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1f64 234:iPTR, FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)  =>  (FRECPS64:v1f64 FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPS64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable367\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable367, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable368[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrts,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1f64 238:iPTR, FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)  =>  (FRSQRTS64:v1f64 FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTS64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable368\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable368, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable369[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 276:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (SQADDv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQADDv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable369\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable369, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable370[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 276:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (SQADDv1i32:i32 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQADDv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable370\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable370, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable371[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 282:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (SQRSHLv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable371\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable371, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable372[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 282:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (SQRSHLv1i32:i32 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQRSHLv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable372\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable372, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable373[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 285:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (SQSHLv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable373\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable373, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable374[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 285:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (SQSHLv1i32:i32 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSHLv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable374\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable374, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable375[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 289:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (SQSUBv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSUBv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable375\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable375, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable376[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 289:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (SQSUBv1i32:i32 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQSUBv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable376\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable376, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable377[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_suqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 306:iPTR, FPR64:v1i64:$Rd, FPR64:v1i64:$Rn)  =>  (SUQADDv1i64:v1i64 FPR64:v1i64:$Rd, FPR64:v1i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUQADDv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable377\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable377, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable378[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 328:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (UQADDv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQADDv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable378\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable378, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable379[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 328:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (UQADDv1i32:i32 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQADDv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable379\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable379, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable380[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 329:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (UQRSHLv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQRSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable380\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable380, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable381[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqrshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 329:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (UQRSHLv1i32:i32 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQRSHLv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable381\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable381, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable382[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 331:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (UQSHLv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable382\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable382, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable383[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 331:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (UQSHLv1i32:i32 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSHLv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable383\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable383, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable384[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 333:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (UQSUBv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSUBv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable384\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable384, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable385[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqsub,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 333:iPTR, FPR32:i32:$Rn, FPR32:i32:$Rm)  =>  (UQSUBv1i32:i32 FPR32:i32:$Rn, FPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQSUBv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable385\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable385, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable386[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_usqadd,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 341:iPTR, FPR64:v1i64:$Rd, FPR64:v1i64:$Rn)  =>  (USQADDv1i64:v1i64 FPR64:v1i64:$Rd, FPR64:v1i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USQADDv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable386\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable386, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable387[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_udiv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR32RegClassID,
    // (intrinsic_wo_chain:i32 358:iPTR, GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (UDIVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UDIVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable387\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable387, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable388[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_udiv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR64RegClassID,
    // (intrinsic_wo_chain:i64 358:iPTR, GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (UDIVXr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UDIVXr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable388\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable388, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable389[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_sdiv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR32RegClassID,
    // (intrinsic_wo_chain:i32 351:iPTR, GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (SDIVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SDIVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable389\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable389, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable390[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_sdiv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::GPR64RegClassID,
    // (intrinsic_wo_chain:i64 351:iPTR, GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (SDIVXr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SDIVXr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable390\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable390, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable391[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fabd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1f64 205:iPTR, FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)  =>  (FABD64:v1f64 FPR64:v1f64:$Rn, FPR64:v1f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FABD64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable391\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable391, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable392[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_pmull64,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v16i8 253:iPTR, V64:i64:$Rn, V64:i64:$Rm)  =>  (PMULLv1i64:v16i8 V64:i64:$Rn, V64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::PMULLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable392\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable392, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable393[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_tbl1,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Ri
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 307:iPTR, VecListOne128:v16i8:$Rn, V64:v8i8:$Ri)  =>  (TBLv8i8One:v8i8 VecListOne128:v16i8:$Rn, V64:v8i8:$Ri)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::TBLv8i8One,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Ri
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable393\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable393, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable394[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_tbl1,
    // MIs[0] Ri
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 307:iPTR, V128:v16i8:$Ri, V128:v16i8:$Rn)  =>  (TBLv16i8One:v16i8 V128:v16i8:$Ri, V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::TBLv16i8One,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Ri
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable394\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable394, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable395[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 294:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (SSHLv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable395\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable395, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable396[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ushl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 339:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (USHLv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable396\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable396, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable397[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_srshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 293:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (SRSHLv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SRSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable397\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable397, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable398[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urshl,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 337:iPTR, FPR64:i64:$Rn, FPR64:i64:$Rm)  =>  (URSHLv1i64:i64 FPR64:i64:$Rn, FPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSHLv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable398\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable398, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable399[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32spRegClassID,
    // MIs[0] imm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckComplexPattern, /*MI*/0, /*Op*/1, /*Renderer*/0, GICP_gi_addsub_shifted_imm32,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32spRegClassID,
    // (add:i32 addsub_shifted_imm32:i32:$imm, GPR32sp:i32:$Rn)  =>  (ADDWri:i32 GPR32sp:i32:$Rn, addsub_shifted_imm32:i32:$imm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDWri,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_ComplexRenderer, /*InsnID*/0, /*RendererID*/0,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable399\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable399, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable400[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64spRegClassID,
    // MIs[0] imm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckComplexPattern, /*MI*/0, /*Op*/1, /*Renderer*/0, GICP_gi_addsub_shifted_imm64,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64spRegClassID,
    // (add:i64 addsub_shifted_imm64:i64:$imm, GPR64sp:i64:$Rn)  =>  (ADDXri:i64 GPR64sp:i64:$Rn, addsub_shifted_imm64:i64:$imm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDXri,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_ComplexRenderer, /*InsnID*/0, /*RendererID*/0,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable400\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable400, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable401[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 (sext:v8i16 V64:v8i8:$Rn), (sext:v8i16 V64:v8i8:$Rm))  =>  (SADDLv8i8_v8i16:v8i16 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDLv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable401\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable401, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable402[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 (sext:v4i32 V64:v4i16:$Rn), (sext:v4i32 V64:v4i16:$Rm))  =>  (SADDLv4i16_v4i32:v4i32 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable402\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable402, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable403[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 (sext:v2i64 V64:v2i32:$Rn), (sext:v2i64 V64:v2i32:$Rm))  =>  (SADDLv2i32_v2i64:v2i64 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable403\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable403, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable404[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 (zext:v8i16 V64:v8i8:$Rn), (zext:v8i16 V64:v8i8:$Rm))  =>  (UADDLv8i8_v8i16:v8i16 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDLv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable404\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable404, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable405[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 (zext:v4i32 V64:v4i16:$Rn), (zext:v4i32 V64:v4i16:$Rm))  =>  (UADDLv4i16_v4i32:v4i32 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable405\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable405, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable406[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 (zext:v2i64 V64:v2i32:$Rn), (zext:v2i64 V64:v2i32:$Rm))  =>  (UADDLv2i32_v2i64:v2i64 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable406\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable406, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable407[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_SEXT,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (add:i64 (mul:i64 (sext:i64 GPR32:i32:$Rn), (sext:i64 GPR32:i32:$Rm)), GPR64:i64:$Ra)  =>  (SMADDLrrr:i64 GPR32:i32:$Rn, GPR32:i32:$Rm, GPR64:i64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMADDLrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable407\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable407, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable408[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_ZEXT,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (add:i64 (mul:i64 (zext:i64 GPR32:i32:$Rn), (zext:i64 GPR32:i32:$Rm)), GPR64:i64:$Ra)  =>  (UMADDLrrr:i64 GPR32:i32:$Rn, GPR32:i32:$Rm, GPR64:i64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMADDLrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable408\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable408, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable409[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 (intrinsic_wo_chain:v4i16 259:iPTR, V64:v8i8:$Rn), V64:v4i16:$Rd)  =>  (SADALPv8i8_v4i16:v4i16 V64:v4i16:$Rd, V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv8i8_v4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable409\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable409, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable410[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (intrinsic_wo_chain:v8i16 259:iPTR, V128:v16i8:$Rn), V128:v8i16:$Rd)  =>  (SADALPv16i8_v8i16:v8i16 V128:v8i16:$Rd, V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv16i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable410\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable410, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable411[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 (intrinsic_wo_chain:v2i32 259:iPTR, V64:v4i16:$Rn), V64:v2i32:$Rd)  =>  (SADALPv4i16_v2i32:v2i32 V64:v2i32:$Rd, V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv4i16_v2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable411\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable411, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable412[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (intrinsic_wo_chain:v4i32 259:iPTR, V128:v8i16:$Rn), V128:v4i32:$Rd)  =>  (SADALPv8i16_v4i32:v4i32 V128:v4i32:$Rd, V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv8i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable412\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable412, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable413[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v1i64 (intrinsic_wo_chain:v1i64 259:iPTR, V64:v2i32:$Rn), V64:v1i64:$Rd)  =>  (SADALPv2i32_v1i64:v1i64 V64:v1i64:$Rd, V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv2i32_v1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable413\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable413, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable414[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 (intrinsic_wo_chain:v2i64 259:iPTR, V128:v4i32:$Rn), V128:v2i64:$Rd)  =>  (SADALPv4i32_v2i64:v2i64 V128:v2i64:$Rd, V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv4i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable414\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable414, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable415[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 (intrinsic_wo_chain:v4i16 316:iPTR, V64:v8i8:$Rn), V64:v4i16:$Rd)  =>  (UADALPv8i8_v4i16:v4i16 V64:v4i16:$Rd, V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv8i8_v4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable415\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable415, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable416[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (intrinsic_wo_chain:v8i16 316:iPTR, V128:v16i8:$Rn), V128:v8i16:$Rd)  =>  (UADALPv16i8_v8i16:v8i16 V128:v8i16:$Rd, V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv16i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable416\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable416, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable417[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 (intrinsic_wo_chain:v2i32 316:iPTR, V64:v4i16:$Rn), V64:v2i32:$Rd)  =>  (UADALPv4i16_v2i32:v2i32 V64:v2i32:$Rd, V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv4i16_v2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable417\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable417, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable418[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (intrinsic_wo_chain:v4i32 316:iPTR, V128:v8i16:$Rn), V128:v4i32:$Rd)  =>  (UADALPv8i16_v4i32:v4i32 V128:v4i32:$Rd, V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv8i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable418\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable418, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable419[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v1i64 (intrinsic_wo_chain:v1i64 316:iPTR, V64:v2i32:$Rn), V64:v1i64:$Rd)  =>  (UADALPv2i32_v1i64:v1i64 V64:v1i64:$Rd, V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv2i32_v1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable419\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable419, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable420[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 (intrinsic_wo_chain:v2i64 316:iPTR, V128:v4i32:$Rn), V128:v2i64:$Rd)  =>  (UADALPv4i32_v2i64:v2i64 V128:v2i64:$Rd, V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv4i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable420\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable420, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable421[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 (mul:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm), V64:v8i8:$Rd)  =>  (MLAv8i8:v8i8 V64:v8i8:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable421\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable421, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable422[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 (mul:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm), V128:v16i8:$Rd)  =>  (MLAv16i8:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable422\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable422, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable423[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 (mul:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm), V64:v4i16:$Rd)  =>  (MLAv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable423\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable423, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable424[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (mul:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm), V128:v8i16:$Rd)  =>  (MLAv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable424\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable424, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable425[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 (mul:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm), V64:v2i32:$Rd)  =>  (MLAv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable425\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable425, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable426[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (mul:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm), V128:v4i32:$Rd)  =>  (MLAv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable426\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable426, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable427[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 (intrinsic_wo_chain:v8i8 258:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm), V64:v8i8:$Rd)  =>  (SABAv8i8:v8i8 V64:v8i8:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable427\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable427, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable428[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 (intrinsic_wo_chain:v16i8 258:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm), V128:v16i8:$Rd)  =>  (SABAv16i8:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable428\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable428, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable429[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 (intrinsic_wo_chain:v4i16 258:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm), V64:v4i16:$Rd)  =>  (SABAv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable429\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable429, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable430[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (intrinsic_wo_chain:v8i16 258:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm), V128:v8i16:$Rd)  =>  (SABAv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable430\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable430, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable431[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 (intrinsic_wo_chain:v2i32 258:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm), V64:v2i32:$Rd)  =>  (SABAv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable431\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable431, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable432[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (intrinsic_wo_chain:v4i32 258:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm), V128:v4i32:$Rd)  =>  (SABAv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable432\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable432, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable433[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 (intrinsic_wo_chain:v8i8 315:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm), V64:v8i8:$Rd)  =>  (UABAv8i8:v8i8 V64:v8i8:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable433\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable433, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable434[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 (intrinsic_wo_chain:v16i8 315:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm), V128:v16i8:$Rd)  =>  (UABAv16i8:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable434\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable434, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable435[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 (intrinsic_wo_chain:v4i16 315:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm), V64:v4i16:$Rd)  =>  (UABAv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable435\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable435, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable436[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (intrinsic_wo_chain:v8i16 315:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm), V128:v8i16:$Rd)  =>  (UABAv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable436\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable436, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable437[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 (intrinsic_wo_chain:v2i32 315:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm), V64:v2i32:$Rd)  =>  (UABAv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable437\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable437, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable438[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (intrinsic_wo_chain:v4i32 315:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm), V128:v4i32:$Rd)  =>  (UABAv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable438\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable438, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable439[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 (zext:v8i16 (intrinsic_wo_chain:v8i8 258:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)), V128:v8i16:$Rd)  =>  (SABALv8i8_v8i16:v8i16 V128:v8i16:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABALv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable439\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable439, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable440[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 (zext:v4i32 (intrinsic_wo_chain:v4i16 258:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)), V128:v4i32:$Rd)  =>  (SABALv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABALv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable440\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable440, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable441[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 (zext:v2i64 (intrinsic_wo_chain:v2i32 258:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)), V128:v2i64:$Rd)  =>  (SABALv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABALv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable441\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable441, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable442[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (sext:v8i16 V64:v8i8:$Rm), V128:v8i16:$Rn)  =>  (SADDWv8i8_v8i16:v8i16 V128:v8i16:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDWv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable442\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable442, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable443[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (sext:v4i32 V64:v4i16:$Rm), V128:v4i32:$Rn)  =>  (SADDWv4i16_v4i32:v4i32 V128:v4i32:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDWv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable443\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable443, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable444[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 (sext:v2i64 V64:v2i32:$Rm), V128:v2i64:$Rn)  =>  (SADDWv2i32_v2i64:v2i64 V128:v2i64:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDWv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable444\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable444, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable445[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (intrinsic_wo_chain:v8i16 274:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm), V128:v8i16:$Rd)  =>  (SMLALv8i8_v8i16:v8i16 V128:v8i16:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMLALv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable445\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable445, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable446[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (intrinsic_wo_chain:v4i32 274:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm), V128:v4i32:$Rd)  =>  (SMLALv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMLALv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable446\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable446, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable447[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 (intrinsic_wo_chain:v2i64 274:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm), V128:v2i64:$Rd)  =>  (SMLALv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMLALv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable447\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable447, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable448[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 (zext:v8i16 (intrinsic_wo_chain:v8i8 315:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)), V128:v8i16:$Rd)  =>  (UABALv8i8_v8i16:v8i16 V128:v8i16:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABALv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable448\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable448, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable449[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 (zext:v4i32 (intrinsic_wo_chain:v4i16 315:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)), V128:v4i32:$Rd)  =>  (UABALv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABALv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable449\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable449, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable450[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 (zext:v2i64 (intrinsic_wo_chain:v2i32 315:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)), V128:v2i64:$Rd)  =>  (UABALv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABALv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable450\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable450, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable451[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (zext:v8i16 V64:v8i8:$Rm), V128:v8i16:$Rn)  =>  (UADDWv8i8_v8i16:v8i16 V128:v8i16:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDWv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable451\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable451, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable452[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (zext:v4i32 V64:v4i16:$Rm), V128:v4i32:$Rn)  =>  (UADDWv4i16_v4i32:v4i32 V128:v4i32:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDWv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable452\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable452, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable453[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 (zext:v2i64 V64:v2i32:$Rm), V128:v2i64:$Rn)  =>  (UADDWv2i32_v2i64:v2i64 V128:v2i64:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDWv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable453\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable453, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable454[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (intrinsic_wo_chain:v8i16 327:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm), V128:v8i16:$Rd)  =>  (UMLALv8i8_v8i16:v8i16 V128:v8i16:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMLALv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable454\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable454, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable455[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (intrinsic_wo_chain:v4i32 327:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm), V128:v4i32:$Rd)  =>  (UMLALv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMLALv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable455\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable455, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable456[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 (intrinsic_wo_chain:v2i64 327:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm), V128:v2i64:$Rd)  =>  (UMLALv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMLALv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable456\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable456, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable457[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32spRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32spRegClassID,
    // MIs[0] imm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckComplexPattern, /*MI*/0, /*Op*/2, /*Renderer*/0, GICP_gi_addsub_shifted_imm32,
    // (add:i32 GPR32sp:i32:$Rn, addsub_shifted_imm32:i32:$imm)  =>  (ADDWri:i32 GPR32sp:i32:$Rn, addsub_shifted_imm32:i32:$imm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDWri,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_ComplexRenderer, /*InsnID*/0, /*RendererID*/0,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable457\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable457, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable458[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64spRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64spRegClassID,
    // MIs[0] imm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckComplexPattern, /*MI*/0, /*Op*/2, /*Renderer*/0, GICP_gi_addsub_shifted_imm64,
    // (add:i64 GPR64sp:i64:$Rn, addsub_shifted_imm64:i64:$imm)  =>  (ADDXri:i64 GPR64sp:i64:$Rn, addsub_shifted_imm64:i64:$imm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ADDXri,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_ComplexRenderer, /*InsnID*/0, /*RendererID*/0,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable458\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable458, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable459[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_SEXT,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (add:i64 GPR64:i64:$Ra, (mul:i64 (sext:i64 GPR32:i32:$Rn), (sext:i64 GPR32:i32:$Rm)))  =>  (SMADDLrrr:i64 GPR32:i32:$Rn, GPR32:i32:$Rm, GPR64:i64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMADDLrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable459\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable459, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable460[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_ZEXT,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (add:i64 GPR64:i64:$Ra, (mul:i64 (zext:i64 GPR32:i32:$Rn), (zext:i64 GPR32:i32:$Rm)))  =>  (UMADDLrrr:i64 GPR32:i32:$Rn, GPR32:i32:$Rm, GPR64:i64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMADDLrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable460\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable460, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable461[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 V64:v4i16:$Rd, (intrinsic_wo_chain:v4i16 259:iPTR, V64:v8i8:$Rn))  =>  (SADALPv8i8_v4i16:v4i16 V64:v4i16:$Rd, V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv8i8_v4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable461\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable461, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable462[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 V128:v8i16:$Rd, (intrinsic_wo_chain:v8i16 259:iPTR, V128:v16i8:$Rn))  =>  (SADALPv16i8_v8i16:v8i16 V128:v8i16:$Rd, V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv16i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable462\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable462, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable463[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 V64:v2i32:$Rd, (intrinsic_wo_chain:v2i32 259:iPTR, V64:v4i16:$Rn))  =>  (SADALPv4i16_v2i32:v2i32 V64:v2i32:$Rd, V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv4i16_v2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable463\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable463, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable464[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 259:iPTR, V128:v8i16:$Rn))  =>  (SADALPv8i16_v4i32:v4i32 V128:v4i32:$Rd, V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv8i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable464\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable464, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable465[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v1i64 V64:v1i64:$Rd, (intrinsic_wo_chain:v1i64 259:iPTR, V64:v2i32:$Rn))  =>  (SADALPv2i32_v1i64:v1i64 V64:v1i64:$Rd, V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv2i32_v1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable465\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable465, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable466[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 V128:v2i64:$Rd, (intrinsic_wo_chain:v2i64 259:iPTR, V128:v4i32:$Rn))  =>  (SADALPv4i32_v2i64:v2i64 V128:v2i64:$Rd, V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADALPv4i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable466\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable466, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable467[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 V64:v4i16:$Rd, (intrinsic_wo_chain:v4i16 316:iPTR, V64:v8i8:$Rn))  =>  (UADALPv8i8_v4i16:v4i16 V64:v4i16:$Rd, V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv8i8_v4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable467\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable467, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable468[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 V128:v8i16:$Rd, (intrinsic_wo_chain:v8i16 316:iPTR, V128:v16i8:$Rn))  =>  (UADALPv16i8_v8i16:v8i16 V128:v8i16:$Rd, V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv16i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable468\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable468, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable469[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 V64:v2i32:$Rd, (intrinsic_wo_chain:v2i32 316:iPTR, V64:v4i16:$Rn))  =>  (UADALPv4i16_v2i32:v2i32 V64:v2i32:$Rd, V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv4i16_v2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable469\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable469, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable470[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 316:iPTR, V128:v8i16:$Rn))  =>  (UADALPv8i16_v4i32:v4i32 V128:v4i32:$Rd, V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv8i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable470\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable470, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable471[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v1i64 V64:v1i64:$Rd, (intrinsic_wo_chain:v1i64 316:iPTR, V64:v2i32:$Rn))  =>  (UADALPv2i32_v1i64:v1i64 V64:v1i64:$Rd, V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv2i32_v1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable471\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable471, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable472[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 V128:v2i64:$Rd, (intrinsic_wo_chain:v2i64 316:iPTR, V128:v4i32:$Rn))  =>  (UADALPv4i32_v2i64:v2i64 V128:v2i64:$Rd, V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADALPv4i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable472\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable472, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable473[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 V64:v8i8:$Rd, (mul:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm))  =>  (MLAv8i8:v8i8 V64:v8i8:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable473\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable473, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable474[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 V128:v16i8:$Rd, (mul:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm))  =>  (MLAv16i8:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable474\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable474, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable475[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 V64:v4i16:$Rd, (mul:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (MLAv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable475\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable475, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable476[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 V128:v8i16:$Rd, (mul:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm))  =>  (MLAv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable476\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable476, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable477[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 V64:v2i32:$Rd, (mul:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (MLAv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable477\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable477, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable478[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 V128:v4i32:$Rd, (mul:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm))  =>  (MLAv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLAv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable478\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable478, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable479[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 V64:v8i8:$Rd, (intrinsic_wo_chain:v8i8 258:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm))  =>  (SABAv8i8:v8i8 V64:v8i8:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable479\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable479, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable480[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 V128:v16i8:$Rd, (intrinsic_wo_chain:v16i8 258:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm))  =>  (SABAv16i8:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable480\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable480, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable481[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 V64:v4i16:$Rd, (intrinsic_wo_chain:v4i16 258:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (SABAv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable481\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable481, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable482[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 V128:v8i16:$Rd, (intrinsic_wo_chain:v8i16 258:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm))  =>  (SABAv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable482\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable482, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable483[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 V64:v2i32:$Rd, (intrinsic_wo_chain:v2i32 258:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (SABAv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable483\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable483, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable484[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 258:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm))  =>  (SABAv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABAv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable484\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable484, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable485[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 V64:v8i8:$Rd, (intrinsic_wo_chain:v8i8 315:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm))  =>  (UABAv8i8:v8i8 V64:v8i8:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable485\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable485, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable486[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 V128:v16i8:$Rd, (intrinsic_wo_chain:v16i8 315:iPTR, V128:v16i8:$Rn, V128:v16i8:$Rm))  =>  (UABAv16i8:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable486\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable486, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable487[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 V64:v4i16:$Rd, (intrinsic_wo_chain:v4i16 315:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (UABAv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable487\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable487, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable488[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 V128:v8i16:$Rd, (intrinsic_wo_chain:v8i16 315:iPTR, V128:v8i16:$Rn, V128:v8i16:$Rm))  =>  (UABAv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable488\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable488, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable489[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 V64:v2i32:$Rd, (intrinsic_wo_chain:v2i32 315:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (UABAv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable489\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable489, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable490[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 315:iPTR, V128:v4i32:$Rn, V128:v4i32:$Rm))  =>  (UABAv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABAv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable490\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable490, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable491[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 V128:v8i16:$Rd, (zext:v8i16 (intrinsic_wo_chain:v8i8 258:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)))  =>  (SABALv8i8_v8i16:v8i16 V128:v8i16:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABALv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable491\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable491, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable492[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 V128:v4i32:$Rd, (zext:v4i32 (intrinsic_wo_chain:v4i16 258:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)))  =>  (SABALv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABALv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable492\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable492, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable493[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 V128:v2i64:$Rd, (zext:v2i64 (intrinsic_wo_chain:v2i32 258:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)))  =>  (SABALv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABALv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable493\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable493, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable494[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 V128:v8i16:$Rn, (sext:v8i16 V64:v8i8:$Rm))  =>  (SADDWv8i8_v8i16:v8i16 V128:v8i16:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDWv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable494\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable494, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable495[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 V128:v4i32:$Rn, (sext:v4i32 V64:v4i16:$Rm))  =>  (SADDWv4i16_v4i32:v4i32 V128:v4i32:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDWv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable495\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable495, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable496[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 V128:v2i64:$Rn, (sext:v2i64 V64:v2i32:$Rm))  =>  (SADDWv2i32_v2i64:v2i64 V128:v2i64:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDWv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable496\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable496, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable497[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 V128:v8i16:$Rd, (intrinsic_wo_chain:v8i16 274:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm))  =>  (SMLALv8i8_v8i16:v8i16 V128:v8i16:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMLALv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable497\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable497, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable498[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 274:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (SMLALv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMLALv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable498\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable498, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable499[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 V128:v2i64:$Rd, (intrinsic_wo_chain:v2i64 274:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (SMLALv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMLALv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable499\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable499, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable500[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 V128:v8i16:$Rd, (zext:v8i16 (intrinsic_wo_chain:v8i8 315:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm)))  =>  (UABALv8i8_v8i16:v8i16 V128:v8i16:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABALv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable500\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable500, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable501[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 V128:v4i32:$Rd, (zext:v4i32 (intrinsic_wo_chain:v4i16 315:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm)))  =>  (UABALv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABALv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable501\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable501, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable502[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 V128:v2i64:$Rd, (zext:v2i64 (intrinsic_wo_chain:v2i32 315:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm)))  =>  (UABALv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABALv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable502\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable502, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable503[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 V128:v8i16:$Rn, (zext:v8i16 V64:v8i8:$Rm))  =>  (UADDWv8i8_v8i16:v8i16 V128:v8i16:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDWv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable503\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable503, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable504[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 V128:v4i32:$Rn, (zext:v4i32 V64:v4i16:$Rm))  =>  (UADDWv4i16_v4i32:v4i32 V128:v4i32:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDWv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable504\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable504, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable505[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 V128:v2i64:$Rn, (zext:v2i64 V64:v2i32:$Rm))  =>  (UADDWv2i32_v2i64:v2i64 V128:v2i64:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDWv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable505\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable505, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable506[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 V128:v8i16:$Rd, (intrinsic_wo_chain:v8i16 327:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm))  =>  (UMLALv8i8_v8i16:v8i16 V128:v8i16:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMLALv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable506\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable506, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable507[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 327:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (UMLALv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMLALv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable507\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable507, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable508[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 V128:v2i64:$Rd, (intrinsic_wo_chain:v2i64 327:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (UMLALv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMLALv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable508\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable508, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable509[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // (add:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (ADDWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ADDWrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable509\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable509, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable510[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (add:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (ADDXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ADDXrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable510\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable510, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable511[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (add:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (ADDv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ADDv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable511\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable511, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable512[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (add:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (ADDv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ADDv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable512\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable512, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable513[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (add:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (ADDv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ADDv4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable513\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable513, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable514[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (add:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (ADDv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ADDv8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable514\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable514, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable515[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (add:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (ADDv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ADDv2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable515\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable515, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable516[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (add:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (ADDv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ADDv4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable516\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable516, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable517[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (add:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (ADDv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ADDv2i64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable517\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable517, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable518[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (add:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (ADDv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ADDv1i64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable518\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable518, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable519[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (and:i32 (xor:i32 GPR32:i32:$Rm, -1:i32), GPR32:i32:$Rn)  =>  (BICWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::BICWrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable519\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable519, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable520[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (and:i64 (xor:i64 GPR64:i64:$Rm, -1:i64), GPR64:i64:$Rn)  =>  (BICXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::BICXrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable520\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable520, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable521[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (and:i32 GPR32:i32:$Rn, (xor:i32 GPR32:i32:$Rm, -1:i32))  =>  (BICWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::BICWrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable521\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable521, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable522[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (and:i64 GPR64:i64:$Rn, (xor:i64 GPR64:i64:$Rm, -1:i64))  =>  (BICXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::BICXrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable522\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable522, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable523[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // (and:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (ANDWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ANDWrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable523\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable523, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable524[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (and:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (ANDXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ANDXrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable524\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable524, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable525[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (and:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (ANDv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ANDv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable525\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable525, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable526[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (and:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (ANDv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ANDv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable526\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable526, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable527[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (and:v4i16 V64:v4i16:$LHS, V64:v4i16:$RHS)  =>  (ANDv8i8:v4i16 V64:v4i16:$LHS, V64:v4i16:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ANDv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable527\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable527, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable528[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (and:v2i32 V64:v2i32:$LHS, V64:v2i32:$RHS)  =>  (ANDv8i8:v2i32 V64:v2i32:$LHS, V64:v2i32:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ANDv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable528\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable528, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable529[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (and:v1i64 V64:v1i64:$LHS, V64:v1i64:$RHS)  =>  (ANDv8i8:v1i64 V64:v1i64:$LHS, V64:v1i64:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ANDv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable529\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable529, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable530[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (and:v8i16 V128:v8i16:$LHS, V128:v8i16:$RHS)  =>  (ANDv16i8:v8i16 V128:v8i16:$LHS, V128:v8i16:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ANDv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable530\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable530, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable531[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (and:v4i32 V128:v4i32:$LHS, V128:v4i32:$RHS)  =>  (ANDv16i8:v4i32 V128:v4i32:$LHS, V128:v4i32:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ANDv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable531\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable531, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable532[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (and:v2i64 V128:v2i64:$LHS, V128:v2i64:$RHS)  =>  (ANDv16i8:v2i64 V128:v2i64:$LHS, V128:v2i64:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ANDv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable532\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable532, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable533[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ASHR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sra:i32 GPR32:i32:$Rn, (zext:i64 GPR32:i32:$Rm))  =>  (ASRVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ASRVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable533\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable533, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable534[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ASHR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ANYEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sra:i32 GPR32:i32:$Rn, (anyext:i64 GPR32:i32:$Rm))  =>  (ASRVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ASRVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable534\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable534, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable535[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ASHR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sra:i32 GPR32:i32:$Rn, (sext:i64 GPR32:i32:$Rm))  =>  (ASRVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ASRVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable535\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable535, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable536[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ASHR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (sra:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (ASRVXr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ASRVXr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable536\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable536, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable537[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (fadd:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)  =>  (FADDHrr:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FADDHrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable537\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable537, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable538[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (fadd:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)  =>  (FADDSrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FADDSrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable538\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable538, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable539[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fadd:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)  =>  (FADDDrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FADDDrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable539\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable539, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable540[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fadd:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FADDv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FADDv4f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable540\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable540, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable541[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fadd:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FADDv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FADDv8f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable541\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable541, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable542[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fadd:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FADDv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FADDv2f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable542\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable542, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable543[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fadd:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FADDv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FADDv4f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable543\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable543, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable544[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fadd:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FADDv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FADDv2f64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable544\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable544, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable545[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (fdiv:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)  =>  (FDIVHrr:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FDIVHrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable545\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable545, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable546[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (fdiv:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)  =>  (FDIVSrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FDIVSrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable546\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable546, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable547[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fdiv:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)  =>  (FDIVDrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FDIVDrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable547\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable547, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable548[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fdiv:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FDIVv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FDIVv4f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable548\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable548, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable549[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fdiv:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FDIVv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FDIVv8f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable549\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable549, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable550[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fdiv:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FDIVv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FDIVv2f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable550\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable550, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable551[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fdiv:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FDIVv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FDIVv4f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable551\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable551, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable552[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fdiv:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FDIVv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FDIVv2f64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable552\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable552, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable553[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (fmul:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)  =>  (FMULHrr:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMULHrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable553\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable553, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable554[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (fmul:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)  =>  (FMULSrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMULSrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable554\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable554, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable555[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fmul:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)  =>  (FMULDrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMULDrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable555\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable555, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable556[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fmul:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FMULv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMULv4f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable556\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable556, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable557[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fmul:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FMULv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMULv8f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable557\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable557, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable558[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fmul:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FMULv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMULv2f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable558\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable558, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable559[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fmul:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FMULv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMULv4f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable559\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable559, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable560[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fmul:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FMULv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FMULv2f64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable560\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable560, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable561[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (fsub:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)  =>  (FSUBHrr:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FSUBHrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable561\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable561, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable562[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (fsub:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)  =>  (FSUBSrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FSUBSrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable562\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable562, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable563[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fsub:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)  =>  (FSUBDrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FSUBDrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable563\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable563, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable564[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fsub:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)  =>  (FSUBv4f16:v4f16 V64:v4f16:$Rn, V64:v4f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FSUBv4f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable564\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable564, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable565[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fsub:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)  =>  (FSUBv8f16:v8f16 V128:v8f16:$Rn, V128:v8f16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FSUBv8f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable565\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable565, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable566[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (fsub:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)  =>  (FSUBv2f32:v2f32 V64:v2f32:$Rn, V64:v2f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FSUBv2f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable566\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable566, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable567[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fsub:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)  =>  (FSUBv4f32:v4f32 V128:v4f32:$Rn, V128:v4f32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FSUBv4f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable567\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable567, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable568[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (fsub:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)  =>  (FSUBv2f64:v2f64 V128:v2f64:$Rn, V128:v2f64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FSUBv2f64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable568\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable568, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable569[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i32 209:iPTR, FPR16:f16:$Rn)  =>  (FCVTASUWHr:i32 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASUWHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable569\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable569, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable570[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i64 209:iPTR, FPR16:f16:$Rn)  =>  (FCVTASUXHr:i64 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASUXHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable570\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable570, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable571[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 209:iPTR, FPR32:f32:$Rn)  =>  (FCVTASUWSr:i32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASUWSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable571\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable571, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable572[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i64 209:iPTR, FPR32:f32:$Rn)  =>  (FCVTASUXSr:i64 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASUXSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable572\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable572, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable573[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 209:iPTR, FPR64:f64:$Rn)  =>  (FCVTASUWDr:i32 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASUWDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable573\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable573, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable574[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 209:iPTR, FPR64:f64:$Rn)  =>  (FCVTASUXDr:i64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASUXDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable574\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable574, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable575[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i32 210:iPTR, FPR16:f16:$Rn)  =>  (FCVTAUUWHr:i32 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUUWHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable575\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable575, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable576[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i64 210:iPTR, FPR16:f16:$Rn)  =>  (FCVTAUUXHr:i64 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUUXHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable576\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable576, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable577[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 210:iPTR, FPR32:f32:$Rn)  =>  (FCVTAUUWSr:i32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUUWSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable577\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable577, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable578[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i64 210:iPTR, FPR32:f32:$Rn)  =>  (FCVTAUUXSr:i64 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUUXSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable578\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable578, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable579[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 210:iPTR, FPR64:f64:$Rn)  =>  (FCVTAUUWDr:i32 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUUWDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable579\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable579, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable580[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 210:iPTR, FPR64:f64:$Rn)  =>  (FCVTAUUXDr:i64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUUXDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable580\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable580, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable581[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i32 211:iPTR, FPR16:f16:$Rn)  =>  (FCVTMSUWHr:i32 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSUWHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable581\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable581, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable582[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i64 211:iPTR, FPR16:f16:$Rn)  =>  (FCVTMSUXHr:i64 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSUXHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable582\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable582, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable583[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 211:iPTR, FPR32:f32:$Rn)  =>  (FCVTMSUWSr:i32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSUWSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable583\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable583, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable584[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i64 211:iPTR, FPR32:f32:$Rn)  =>  (FCVTMSUXSr:i64 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSUXSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable584\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable584, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable585[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 211:iPTR, FPR64:f64:$Rn)  =>  (FCVTMSUWDr:i32 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSUWDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable585\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable585, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable586[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 211:iPTR, FPR64:f64:$Rn)  =>  (FCVTMSUXDr:i64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSUXDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable586\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable586, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable587[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i32 212:iPTR, FPR16:f16:$Rn)  =>  (FCVTMUUWHr:i32 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUUWHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable587\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable587, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable588[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i64 212:iPTR, FPR16:f16:$Rn)  =>  (FCVTMUUXHr:i64 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUUXHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable588\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable588, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable589[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 212:iPTR, FPR32:f32:$Rn)  =>  (FCVTMUUWSr:i32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUUWSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable589\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable589, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable590[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i64 212:iPTR, FPR32:f32:$Rn)  =>  (FCVTMUUXSr:i64 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUUXSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable590\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable590, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable591[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 212:iPTR, FPR64:f64:$Rn)  =>  (FCVTMUUWDr:i32 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUUWDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable591\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable591, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable592[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 212:iPTR, FPR64:f64:$Rn)  =>  (FCVTMUUXDr:i64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUUXDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable592\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable592, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable593[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i32 213:iPTR, FPR16:f16:$Rn)  =>  (FCVTNSUWHr:i32 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSUWHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable593\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable593, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable594[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i64 213:iPTR, FPR16:f16:$Rn)  =>  (FCVTNSUXHr:i64 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSUXHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable594\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable594, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable595[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 213:iPTR, FPR32:f32:$Rn)  =>  (FCVTNSUWSr:i32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSUWSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable595\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable595, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable596[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i64 213:iPTR, FPR32:f32:$Rn)  =>  (FCVTNSUXSr:i64 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSUXSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable596\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable596, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable597[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 213:iPTR, FPR64:f64:$Rn)  =>  (FCVTNSUWDr:i32 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSUWDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable597\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable597, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable598[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 213:iPTR, FPR64:f64:$Rn)  =>  (FCVTNSUXDr:i64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSUXDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable598\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable598, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable599[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i32 214:iPTR, FPR16:f16:$Rn)  =>  (FCVTNUUWHr:i32 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUUWHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable599\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable599, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable600[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i64 214:iPTR, FPR16:f16:$Rn)  =>  (FCVTNUUXHr:i64 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUUXHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable600\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable600, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable601[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 214:iPTR, FPR32:f32:$Rn)  =>  (FCVTNUUWSr:i32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUUWSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable601\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable601, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable602[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i64 214:iPTR, FPR32:f32:$Rn)  =>  (FCVTNUUXSr:i64 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUUXSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable602\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable602, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable603[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 214:iPTR, FPR64:f64:$Rn)  =>  (FCVTNUUWDr:i32 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUUWDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable603\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable603, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable604[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 214:iPTR, FPR64:f64:$Rn)  =>  (FCVTNUUXDr:i64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUUXDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable604\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable604, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable605[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i32 215:iPTR, FPR16:f16:$Rn)  =>  (FCVTPSUWHr:i32 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSUWHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable605\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable605, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable606[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i64 215:iPTR, FPR16:f16:$Rn)  =>  (FCVTPSUXHr:i64 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSUXHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable606\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable606, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable607[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 215:iPTR, FPR32:f32:$Rn)  =>  (FCVTPSUWSr:i32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSUWSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable607\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable607, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable608[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i64 215:iPTR, FPR32:f32:$Rn)  =>  (FCVTPSUXSr:i64 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSUXSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable608\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable608, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable609[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 215:iPTR, FPR64:f64:$Rn)  =>  (FCVTPSUWDr:i32 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSUWDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable609\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable609, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable610[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 215:iPTR, FPR64:f64:$Rn)  =>  (FCVTPSUXDr:i64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSUXDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable610\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable610, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable611[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i32 216:iPTR, FPR16:f16:$Rn)  =>  (FCVTPUUWHr:i32 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUUWHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable611\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable611, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable612[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:i64 216:iPTR, FPR16:f16:$Rn)  =>  (FCVTPUUXHr:i64 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUUXHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable612\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable612, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable613[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 216:iPTR, FPR32:f32:$Rn)  =>  (FCVTPUUWSr:i32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUUWSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable613\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable613, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable614[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i64 216:iPTR, FPR32:f32:$Rn)  =>  (FCVTPUUXSr:i64 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUUXSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable614\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable614, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable615[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 216:iPTR, FPR64:f64:$Rn)  =>  (FCVTPUUWDr:i32 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUUWDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable615\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable615, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable616[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 216:iPTR, FPR64:f64:$Rn)  =>  (FCVTPUUXDr:i64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUUXDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable616\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable616, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable617[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frintn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // (intrinsic_wo_chain:f16 236:iPTR, FPR16:f16:$Rn)  =>  (FRINTNHr:f16 FPR16:f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRINTNHr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable617\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable617, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable618[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frintn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:f32 236:iPTR, FPR32:f32:$Rn)  =>  (FRINTNSr:f32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRINTNSr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable618\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable618, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable619[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frintn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f64 236:iPTR, FPR64:f64:$Rn)  =>  (FRINTNDr:f64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRINTNDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable619\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable619, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable620[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_cls,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 204:iPTR, V64:v8i8:$Rn)  =>  (CLSv8i8:v8i8 V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CLSv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable620\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable620, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable621[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_cls,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 204:iPTR, V128:v16i8:$Rn)  =>  (CLSv16i8:v16i8 V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CLSv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable621\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable621, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable622[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_cls,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 204:iPTR, V64:v4i16:$Rn)  =>  (CLSv4i16:v4i16 V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CLSv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable622\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable622, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable623[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_cls,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 204:iPTR, V128:v8i16:$Rn)  =>  (CLSv8i16:v8i16 V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CLSv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable623\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable623, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable624[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_cls,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 204:iPTR, V64:v2i32:$Rn)  =>  (CLSv2i32:v2i32 V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CLSv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable624\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable624, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable625[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_cls,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 204:iPTR, V128:v4i32:$Rn)  =>  (CLSv4i32:v4i32 V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::CLSv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable625\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable625, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable626[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 209:iPTR, V64:v4f16:$Rn)  =>  (FCVTASv4f16:v4i16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable626\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable626, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable627[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 209:iPTR, V128:v8f16:$Rn)  =>  (FCVTASv8f16:v8i16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable627\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable627, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable628[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 209:iPTR, V64:v2f32:$Rn)  =>  (FCVTASv2f32:v2i32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable628\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable628, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable629[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 209:iPTR, V128:v4f32:$Rn)  =>  (FCVTASv4f32:v4i32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable629\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable629, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable630[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 209:iPTR, V128:v2f64:$Rn)  =>  (FCVTASv2f64:v2i64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable630\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable630, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable631[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 210:iPTR, V64:v4f16:$Rn)  =>  (FCVTAUv4f16:v4i16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable631\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable631, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable632[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 210:iPTR, V128:v8f16:$Rn)  =>  (FCVTAUv8f16:v8i16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable632\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable632, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable633[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 210:iPTR, V64:v2f32:$Rn)  =>  (FCVTAUv2f32:v2i32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable633\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable633, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable634[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 210:iPTR, V128:v4f32:$Rn)  =>  (FCVTAUv4f32:v4i32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable634\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable634, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable635[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 210:iPTR, V128:v2f64:$Rn)  =>  (FCVTAUv2f64:v2i64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable635\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable635, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable636[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 211:iPTR, V64:v4f16:$Rn)  =>  (FCVTMSv4f16:v4i16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable636\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable636, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable637[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 211:iPTR, V128:v8f16:$Rn)  =>  (FCVTMSv8f16:v8i16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable637\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable637, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable638[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 211:iPTR, V64:v2f32:$Rn)  =>  (FCVTMSv2f32:v2i32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable638\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable638, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable639[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 211:iPTR, V128:v4f32:$Rn)  =>  (FCVTMSv4f32:v4i32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable639\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable639, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable640[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 211:iPTR, V128:v2f64:$Rn)  =>  (FCVTMSv2f64:v2i64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable640\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable640, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable641[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 212:iPTR, V64:v4f16:$Rn)  =>  (FCVTMUv4f16:v4i16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable641\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable641, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable642[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 212:iPTR, V128:v8f16:$Rn)  =>  (FCVTMUv8f16:v8i16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable642\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable642, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable643[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 212:iPTR, V64:v2f32:$Rn)  =>  (FCVTMUv2f32:v2i32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable643\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable643, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable644[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 212:iPTR, V128:v4f32:$Rn)  =>  (FCVTMUv4f32:v4i32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable644\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable644, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable645[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 212:iPTR, V128:v2f64:$Rn)  =>  (FCVTMUv2f64:v2i64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable645\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable645, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable646[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 213:iPTR, V64:v4f16:$Rn)  =>  (FCVTNSv4f16:v4i16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable646\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable646, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable647[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 213:iPTR, V128:v8f16:$Rn)  =>  (FCVTNSv8f16:v8i16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable647\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable647, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable648[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 213:iPTR, V64:v2f32:$Rn)  =>  (FCVTNSv2f32:v2i32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable648\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable648, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable649[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 213:iPTR, V128:v4f32:$Rn)  =>  (FCVTNSv4f32:v4i32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable649\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable649, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable650[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 213:iPTR, V128:v2f64:$Rn)  =>  (FCVTNSv2f64:v2i64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable650\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable650, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable651[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 214:iPTR, V64:v4f16:$Rn)  =>  (FCVTNUv4f16:v4i16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable651\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable651, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable652[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 214:iPTR, V128:v8f16:$Rn)  =>  (FCVTNUv8f16:v8i16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable652\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable652, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable653[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 214:iPTR, V64:v2f32:$Rn)  =>  (FCVTNUv2f32:v2i32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable653\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable653, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable654[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 214:iPTR, V128:v4f32:$Rn)  =>  (FCVTNUv4f32:v4i32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable654\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable654, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable655[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 214:iPTR, V128:v2f64:$Rn)  =>  (FCVTNUv2f64:v2i64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable655\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable655, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable656[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 215:iPTR, V64:v4f16:$Rn)  =>  (FCVTPSv4f16:v4i16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable656\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable656, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable657[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 215:iPTR, V128:v8f16:$Rn)  =>  (FCVTPSv8f16:v8i16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable657\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable657, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable658[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 215:iPTR, V64:v2f32:$Rn)  =>  (FCVTPSv2f32:v2i32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable658\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable658, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable659[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 215:iPTR, V128:v4f32:$Rn)  =>  (FCVTPSv4f32:v4i32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable659\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable659, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable660[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 215:iPTR, V128:v2f64:$Rn)  =>  (FCVTPSv2f64:v2i64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable660\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable660, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable661[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 216:iPTR, V64:v4f16:$Rn)  =>  (FCVTPUv4f16:v4i16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable661\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable661, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable662[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 216:iPTR, V128:v8f16:$Rn)  =>  (FCVTPUv8f16:v8i16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable662\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable662, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable663[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 216:iPTR, V64:v2f32:$Rn)  =>  (FCVTPUv2f32:v2i32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable663\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable663, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable664[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 216:iPTR, V128:v4f32:$Rn)  =>  (FCVTPUv4f32:v4i32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable664\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable664, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable665[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 216:iPTR, V128:v2f64:$Rn)  =>  (FCVTPUv2f64:v2i64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable665\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable665, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable666[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtxn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f32 217:iPTR, V128:v2f64:$Rn)  =>  (FCVTXNv2f32:v2f32 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTXNv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable666\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable666, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable667[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecpe,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 233:iPTR, V64:v4f16:$Rn)  =>  (FRECPEv4f16:v4f16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPEv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable667\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable667, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable668[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecpe,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 233:iPTR, V128:v8f16:$Rn)  =>  (FRECPEv8f16:v8f16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPEv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable668\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable668, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable669[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecpe,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 233:iPTR, V64:v2f32:$Rn)  =>  (FRECPEv2f32:v2f32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPEv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable669\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable669, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable670[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecpe,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 233:iPTR, V128:v4f32:$Rn)  =>  (FRECPEv4f32:v4f32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPEv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable670\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable670, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable671[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecpe,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 233:iPTR, V128:v2f64:$Rn)  =>  (FRECPEv2f64:v2f64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPEv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable671\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable671, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable672[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frintn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 236:iPTR, V64:v4f16:$Rn)  =>  (FRINTNv4f16:v4f16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRINTNv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable672\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable672, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable673[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frintn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 236:iPTR, V128:v8f16:$Rn)  =>  (FRINTNv8f16:v8f16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRINTNv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable673\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable673, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable674[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frintn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 236:iPTR, V64:v2f32:$Rn)  =>  (FRINTNv2f32:v2f32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRINTNv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable674\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable674, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable675[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frintn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 236:iPTR, V128:v4f32:$Rn)  =>  (FRINTNv4f32:v4f32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRINTNv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable675\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable675, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable676[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frintn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 236:iPTR, V128:v2f64:$Rn)  =>  (FRINTNv2f64:v2f64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRINTNv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable676\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable676, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable677[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrte,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f16 237:iPTR, V64:v4f16:$Rn)  =>  (FRSQRTEv4f16:v4f16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTEv4f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable677\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable677, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable678[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrte,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8f16 237:iPTR, V128:v8f16:$Rn)  =>  (FRSQRTEv8f16:v8f16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTEv8f16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable678\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable678, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable679[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrte,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2f32 237:iPTR, V64:v2f32:$Rn)  =>  (FRSQRTEv2f32:v2f32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTEv2f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable679\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable679, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable680[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrte,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4f32 237:iPTR, V128:v4f32:$Rn)  =>  (FRSQRTEv4f32:v4f32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTEv4f32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable680\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable680, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable681[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrte,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2f64 237:iPTR, V128:v2f64:$Rn)  =>  (FRSQRTEv2f64:v2f64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTEv2f64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable681\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable681, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable682[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_rbit,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 255:iPTR, V64:v8i8:$Rn)  =>  (RBITv8i8:v8i8 V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::RBITv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable682\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable682, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable683[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_rbit,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 255:iPTR, V128:v16i8:$Rn)  =>  (RBITv16i8:v16i8 V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::RBITv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable683\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable683, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable684[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 259:iPTR, V64:v8i8:$Rn)  =>  (SADDLPv8i8_v4i16:v4i16 V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDLPv8i8_v4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable684\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable684, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable685[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 259:iPTR, V128:v16i8:$Rn)  =>  (SADDLPv16i8_v8i16:v8i16 V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDLPv16i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable685\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable685, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable686[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 259:iPTR, V64:v4i16:$Rn)  =>  (SADDLPv4i16_v2i32:v2i32 V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDLPv4i16_v2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable686\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable686, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable687[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 259:iPTR, V128:v8i16:$Rn)  =>  (SADDLPv8i16_v4i32:v4i32 V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDLPv8i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable687\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable687, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable688[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 259:iPTR, V64:v2i32:$Rn)  =>  (SADDLPv2i32_v1i64:v1i64 V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDLPv2i32_v1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable688\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable688, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable689[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_saddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 259:iPTR, V128:v4i32:$Rn)  =>  (SADDLPv4i32_v2i64:v2i64 V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SADDLPv4i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable689\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable689, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable690[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqabs,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 275:iPTR, V64:v8i8:$Rn)  =>  (SQABSv8i8:v8i8 V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQABSv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable690\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable690, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable691[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqabs,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 275:iPTR, V128:v16i8:$Rn)  =>  (SQABSv16i8:v16i8 V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQABSv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable691\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable691, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable692[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqabs,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 275:iPTR, V64:v4i16:$Rn)  =>  (SQABSv4i16:v4i16 V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQABSv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable692\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable692, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable693[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqabs,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 275:iPTR, V128:v8i16:$Rn)  =>  (SQABSv8i16:v8i16 V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQABSv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable693\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable693, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable694[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqabs,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 275:iPTR, V64:v2i32:$Rn)  =>  (SQABSv2i32:v2i32 V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQABSv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable694\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable694, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable695[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqabs,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 275:iPTR, V128:v4i32:$Rn)  =>  (SQABSv4i32:v4i32 V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQABSv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable695\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable695, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable696[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqabs,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 275:iPTR, V128:v2i64:$Rn)  =>  (SQABSv2i64:v2i64 V128:v2i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQABSv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable696\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable696, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable697[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqneg,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v8i8 280:iPTR, V64:v8i8:$Rn)  =>  (SQNEGv8i8:v8i8 V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQNEGv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable697\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable697, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable698[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqneg,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 280:iPTR, V128:v16i8:$Rn)  =>  (SQNEGv16i8:v16i8 V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQNEGv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable698\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable698, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable699[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqneg,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 280:iPTR, V64:v4i16:$Rn)  =>  (SQNEGv4i16:v4i16 V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQNEGv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable699\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable699, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable700[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqneg,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 280:iPTR, V128:v8i16:$Rn)  =>  (SQNEGv8i16:v8i16 V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQNEGv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable700\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable700, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable701[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqneg,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 280:iPTR, V64:v2i32:$Rn)  =>  (SQNEGv2i32:v2i32 V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQNEGv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable701\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable701, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable702[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqneg,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 280:iPTR, V128:v4i32:$Rn)  =>  (SQNEGv4i32:v4i32 V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQNEGv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable702\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable702, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable703[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqneg,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 280:iPTR, V128:v2i64:$Rn)  =>  (SQNEGv2i64:v2i64 V128:v2i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQNEGv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable703\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable703, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable704[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqxtn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i8 290:iPTR, V128:v8i16:$Rn)  =>  (SQXTNv8i8:v8i8 V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQXTNv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable704\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable704, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable705[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqxtn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i16 290:iPTR, V128:v4i32:$Rn)  =>  (SQXTNv4i16:v4i16 V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQXTNv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable705\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable705, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable706[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqxtn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i32 290:iPTR, V128:v2i64:$Rn)  =>  (SQXTNv2i32:v2i32 V128:v2i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQXTNv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable706\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable706, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable707[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqxtun,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i8 291:iPTR, V128:v8i16:$Rn)  =>  (SQXTUNv8i8:v8i8 V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQXTUNv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable707\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable707, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable708[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqxtun,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i16 291:iPTR, V128:v4i32:$Rn)  =>  (SQXTUNv4i16:v4i16 V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQXTUNv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable708\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable708, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable709[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqxtun,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i32 291:iPTR, V128:v2i64:$Rn)  =>  (SQXTUNv2i32:v2i32 V128:v2i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQXTUNv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable709\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable709, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable710[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4i16 316:iPTR, V64:v8i8:$Rn)  =>  (UADDLPv8i8_v4i16:v4i16 V64:v8i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDLPv8i8_v4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable710\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable710, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable711[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i16 316:iPTR, V128:v16i8:$Rn)  =>  (UADDLPv16i8_v8i16:v8i16 V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDLPv16i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable711\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable711, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable712[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 316:iPTR, V64:v4i16:$Rn)  =>  (UADDLPv4i16_v2i32:v2i32 V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDLPv4i16_v2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable712\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable712, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable713[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 316:iPTR, V128:v8i16:$Rn)  =>  (UADDLPv8i16_v4i32:v4i32 V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDLPv8i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable713\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable713, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable714[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 316:iPTR, V64:v2i32:$Rn)  =>  (UADDLPv2i32_v1i64:v1i64 V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDLPv2i32_v1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable714\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable714, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable715[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uaddlp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i64 316:iPTR, V128:v4i32:$Rn)  =>  (UADDLPv4i32_v2i64:v2i64 V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UADDLPv4i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable715\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable715, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable716[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqxtn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v8i8 334:iPTR, V128:v8i16:$Rn)  =>  (UQXTNv8i8:v8i8 V128:v8i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQXTNv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable716\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable716, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable717[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqxtn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i16 334:iPTR, V128:v4i32:$Rn)  =>  (UQXTNv4i16:v4i16 V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQXTNv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable717\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable717, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable718[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_uqxtn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v2i32 334:iPTR, V128:v2i64:$Rn)  =>  (UQXTNv2i32:v2i32 V128:v2i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQXTNv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable718\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable718, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable719[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urecpe,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 335:iPTR, V64:v2i32:$Rn)  =>  (URECPEv2i32:v2i32 V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URECPEv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable719\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable719, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable720[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_urecpe,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 335:iPTR, V128:v4i32:$Rn)  =>  (URECPEv4i32:v4i32 V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URECPEv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable720\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable720, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable721[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ursqrte,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v2i32 338:iPTR, V64:v2i32:$Rn)  =>  (URSQRTEv2i32:v2i32 V64:v2i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSQRTEv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable721\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable721, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable722[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_ursqrte,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i32 338:iPTR, V128:v4i32:$Rn)  =>  (URSQRTEv4i32:v4i32 V128:v4i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::URSQRTEv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable722\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable722, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable723[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_sisd_fcvtxn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f32 353:iPTR, FPR64:f64:$Rn)  =>  (FCVTXNv1i64:f32 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTXNv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable723\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable723, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable724[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqabs,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 275:iPTR, FPR64:i64:$Rn)  =>  (SQABSv1i64:i64 FPR64:i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQABSv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable724\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable724, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable725[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqabs,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 275:iPTR, FPR32:i32:$Rn)  =>  (SQABSv1i32:i32 FPR32:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQABSv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable725\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable725, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable726[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqneg,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i64 280:iPTR, FPR64:i64:$Rn)  =>  (SQNEGv1i64:i64 FPR64:i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQNEGv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable726\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable726, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable727[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqneg,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 280:iPTR, FPR32:i32:$Rn)  =>  (SQNEGv1i32:i32 FPR32:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQNEGv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable727\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable727, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable728[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_scalar_sqxtn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 262:iPTR, FPR64:i64:$Rn)  =>  (SQXTNv1i32:i32 FPR64:i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQXTNv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable728\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable728, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable729[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_scalar_sqxtun,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 263:iPTR, FPR64:i64:$Rn)  =>  (SQXTUNv1i32:i32 FPR64:i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQXTUNv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable729\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable729, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable730[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_scalar_uqxtn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:i32 264:iPTR, FPR64:i64:$Rn)  =>  (UQXTNv1i32:i32 FPR64:i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UQXTNv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable730\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable730, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable731[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxnmv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f16 223:iPTR, V64:v4f16:$Rn)  =>  (FMAXNMVv4i16v:f16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXNMVv4i16v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable731\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable731, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable732[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxnmv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f16 223:iPTR, V128:v8f16:$Rn)  =>  (FMAXNMVv8i16v:f16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXNMVv8i16v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable732\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable732, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable733[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxnmv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f32 223:iPTR, V128:v4f32:$Rn)  =>  (FMAXNMVv4i32v:f32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXNMVv4i32v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable733\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable733, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable734[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f16 225:iPTR, V64:v4f16:$Rn)  =>  (FMAXVv4i16v:f16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXVv4i16v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable734\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable734, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable735[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f16 225:iPTR, V128:v8f16:$Rn)  =>  (FMAXVv8i16v:f16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXVv8i16v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable735\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable735, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable736[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f32 225:iPTR, V128:v4f32:$Rn)  =>  (FMAXVv4i32v:f32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXVv4i32v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable736\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable736, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable737[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminnmv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f16 229:iPTR, V64:v4f16:$Rn)  =>  (FMINNMVv4i16v:f16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINNMVv4i16v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable737\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable737, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable738[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminnmv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f16 229:iPTR, V128:v8f16:$Rn)  =>  (FMINNMVv8i16v:f16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINNMVv8i16v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable738\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable738, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable739[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminnmv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f32 229:iPTR, V128:v4f32:$Rn)  =>  (FMINNMVv4i32v:f32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINNMVv4i32v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable739\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable739, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable740[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f16 231:iPTR, V64:v4f16:$Rn)  =>  (FMINVv4i16v:f16 V64:v4f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINVv4i16v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable740\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable740, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable741[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f16 231:iPTR, V128:v8f16:$Rn)  =>  (FMINVv8i16v:f16 V128:v8f16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINVv8i16v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable741\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable741, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable742[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f32 231:iPTR, V128:v4f32:$Rn)  =>  (FMINVv4i32v:f32 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINVv4i32v,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable742\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable742, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable743[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_aesmc,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 182:iPTR, V128:v16i8:$Rn)  =>  (AESMCrr:v16i8 V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::AESMCrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable743\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable743, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable744[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_aesimc,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v16i8 181:iPTR, V128:v16i8:$Rn)  =>  (AESIMCrr:v16i8 V128:v16i8:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::AESIMCrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable744\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable744, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable745[] = {
    GIM_CheckFeatures, GIFBS_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_crypto_sha1h,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:i32 184:iPTR, FPR32:i32:$Rn)  =>  (SHA1Hrr:i32 FPR32:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SHA1Hrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable745\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable745, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable746[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqabs,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 275:iPTR, FPR64:v1i64:$Rn)  =>  (SQABSv1i64:v1i64 FPR64:v1i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQABSv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable746\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable746, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable747[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_sqneg,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 280:iPTR, FPR64:v1i64:$Rn)  =>  (SQNEGv1i64:v1i64 FPR64:v1i64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SQNEGv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable747\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable747, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable748[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frintn,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1f64 236:iPTR, FPR64:v1f64:$Rn)  =>  (FRINTNDr:v1f64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRINTNDr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable748\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable748, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable749[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_vcvthf2fp,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v4f32 348:iPTR, V64:v4i16:$Rn)  =>  (FCVTLv4i16:v4f32 V64:v4i16:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTLv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable749\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable749, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable750[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_vcvtfp2hf,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:v4i16 345:iPTR, V128:v4f32:$Rn)  =>  (FCVTNv4i16:v4i16 V128:v4f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable750\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable750, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable751[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtas,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 209:iPTR, FPR64:v1f64:$Rn)  =>  (FCVTASv1i64:v1i64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTASv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable751\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable751, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable752[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtau,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 210:iPTR, FPR64:v1f64:$Rn)  =>  (FCVTAUv1i64:v1i64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTAUv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable752\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable752, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable753[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtms,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 211:iPTR, FPR64:v1f64:$Rn)  =>  (FCVTMSv1i64:v1i64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMSv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable753\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable753, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable754[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtmu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 212:iPTR, FPR64:v1f64:$Rn)  =>  (FCVTMUv1i64:v1i64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTMUv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable754\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable754, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable755[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtns,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 213:iPTR, FPR64:v1f64:$Rn)  =>  (FCVTNSv1i64:v1i64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNSv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable755\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable755, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable756[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtnu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 214:iPTR, FPR64:v1f64:$Rn)  =>  (FCVTNUv1i64:v1i64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTNUv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable756\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable756, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable757[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtps,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 215:iPTR, FPR64:v1f64:$Rn)  =>  (FCVTPSv1i64:v1i64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPSv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable757\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable757, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable758[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fcvtpu,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1i64 216:iPTR, FPR64:v1f64:$Rn)  =>  (FCVTPUv1i64:v1i64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FCVTPUv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable758\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable758, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable759[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecpe,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:f32 233:iPTR, FPR32:f32:$Rn)  =>  (FRECPEv1i32:f32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPEv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable759\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable759, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable760[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecpe,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f64 233:iPTR, FPR64:f64:$Rn)  =>  (FRECPEv1i64:f64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPEv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable760\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable760, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable761[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecpe,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1f64 233:iPTR, FPR64:v1f64:$Rn)  =>  (FRECPEv1i64:v1f64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPEv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable761\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable761, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable762[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecpx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:f32 235:iPTR, FPR32:f32:$Rn)  =>  (FRECPXv1i32:f32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPXv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable762\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable762, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable763[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frecpx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f64 235:iPTR, FPR64:f64:$Rn)  =>  (FRECPXv1i64:f64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRECPXv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable763\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable763, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable764[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrte,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // (intrinsic_wo_chain:f32 237:iPTR, FPR32:f32:$Rn)  =>  (FRSQRTEv1i32:f32 FPR32:f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTEv1i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable764\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable764, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable765[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrte,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f64 237:iPTR, FPR64:f64:$Rn)  =>  (FRSQRTEv1i64:f64 FPR64:f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTEv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable765\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable765, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable766[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_frsqrte,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:v1f64 237:iPTR, FPR64:v1f64:$Rn)  =>  (FRSQRTEv1i64:v1f64 FPR64:v1f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FRSQRTEv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable766\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable766, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable767[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_faddv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f32 208:iPTR, V64:v2f32:$Rn)  =>  (FADDPv2i32p:f32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FADDPv2i32p,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable767\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable767, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable768[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_faddv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f64 208:iPTR, V128:v2f64:$Rn)  =>  (FADDPv2i64p:f64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FADDPv2i64p,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable768\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable768, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable769[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxnmv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f32 223:iPTR, V64:v2f32:$Rn)  =>  (FMAXNMPv2i32p:f32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXNMPv2i32p,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable769\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable769, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable770[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxnmv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f64 223:iPTR, V128:v2f64:$Rn)  =>  (FMAXNMPv2i64p:f64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXNMPv2i64p,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable770\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable770, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable771[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f32 225:iPTR, V64:v2f32:$Rn)  =>  (FMAXPv2i32p:f32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXPv2i32p,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable771\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable771, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable772[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fmaxv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f64 225:iPTR, V128:v2f64:$Rn)  =>  (FMAXPv2i64p:f64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMAXPv2i64p,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable772\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable772, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable773[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminnmv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f32 229:iPTR, V64:v2f32:$Rn)  =>  (FMINNMPv2i32p:f32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINNMPv2i32p,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable773\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable773, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable774[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminnmv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f64 229:iPTR, V128:v2f64:$Rn)  =>  (FMINNMPv2i64p:f64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINNMPv2i64p,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable774\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable774, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable775[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (intrinsic_wo_chain:f32 231:iPTR, V64:v2f32:$Rn)  =>  (FMINPv2i32p:f32 V64:v2f32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINPv2i32p,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable775\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable775, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable776[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::aarch64_neon_fminv,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (intrinsic_wo_chain:f64 231:iPTR, V128:v2f64:$Rn)  =>  (FMINPv2i64p:f64 V128:v2f64:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FMINPv2i64p,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable776\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable776, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable777[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_LSHR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (srl:i32 GPR32:i32:$Rn, (zext:i64 GPR32:i32:$Rm))  =>  (LSRVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::LSRVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable777\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable777, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable778[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_LSHR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ANYEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (srl:i32 GPR32:i32:$Rn, (anyext:i64 GPR32:i32:$Rm))  =>  (LSRVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::LSRVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable778\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable778, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable779[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_LSHR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (srl:i32 GPR32:i32:$Rn, (sext:i64 GPR32:i32:$Rm))  =>  (LSRVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::LSRVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable779\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable779, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable780[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_LSHR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (srl:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (LSRVXr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::LSRVXr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable780\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable780, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable781[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (mul:i64 (sext:i64 GPR32:i32:$Rn), (sext:i64 GPR32:i32:$Rm))  =>  (SMADDLrrr:i64 GPR32:i32:$Rn, GPR32:i32:$Rm, XZR:i64)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMADDLrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::XZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable781\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable781, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable782[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (mul:i64 (zext:i64 GPR32:i32:$Rn), (zext:i64 GPR32:i32:$Rm))  =>  (UMADDLrrr:i64 GPR32:i32:$Rn, GPR32:i32:$Rm, XZR:i64)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMADDLrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::XZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable782\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable782, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable783[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SUB,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/1, 0,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (mul:i32 (sub:i32 0:i32, GPR32:i32:$Rn), GPR32:i32:$Rm)  =>  (MSUBWrrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm, WZR:i32)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MSUBWrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::WZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable783\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable783, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable784[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SUB,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/1, 0,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (mul:i64 (sub:i64 0:i64, GPR64:i64:$Rn), GPR64:i64:$Rm)  =>  (MSUBXrrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm, XZR:i64)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MSUBXrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::XZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable784\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable784, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable785[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SUB,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/1, 0,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (mul:i32 GPR32:i32:$Rm, (sub:i32 0:i32, GPR32:i32:$Rn))  =>  (MSUBWrrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm, WZR:i32)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MSUBWrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::WZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable785\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable785, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable786[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SUB,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/1, 0,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (mul:i64 GPR64:i64:$Rm, (sub:i64 0:i64, GPR64:i64:$Rn))  =>  (MSUBXrrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm, XZR:i64)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MSUBXrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::XZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable786\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable786, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable787[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (mul:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (MULv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::MULv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable787\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable787, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable788[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (mul:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (MULv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::MULv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable788\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable788, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable789[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (mul:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (MULv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::MULv4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable789\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable789, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable790[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (mul:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (MULv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::MULv8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable790\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable790, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable791[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (mul:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (MULv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::MULv2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable791\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable791, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable792[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (mul:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (MULv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::MULv4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable792\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable792, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable793[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // (mul:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (MADDWrrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm, WZR:i32)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MADDWrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::WZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable793\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable793, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable794[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (mul:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (MADDXrrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm, XZR:i64)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MADDXrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::XZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable794\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable794, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable795[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (or:i32 (xor:i32 GPR32:i32:$Rm, -1:i32), GPR32:i32:$Rn)  =>  (ORNWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ORNWrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable795\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable795, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable796[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (or:i64 (xor:i64 GPR64:i64:$Rm, -1:i64), GPR64:i64:$Rn)  =>  (ORNXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ORNXrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable796\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable796, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable797[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (or:i32 GPR32:i32:$Rn, (xor:i32 GPR32:i32:$Rm, -1:i32))  =>  (ORNWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ORNWrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable797\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable797, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable798[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (or:i64 GPR64:i64:$Rn, (xor:i64 GPR64:i64:$Rm, -1:i64))  =>  (ORNXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ORNXrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable798\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable798, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable799[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // (or:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (ORRWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ORRWrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable799\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable799, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable800[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (or:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (ORRXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ORRXrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable800\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable800, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable801[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (or:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (ORRv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ORRv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable801\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable801, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable802[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (or:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (ORRv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ORRv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable802\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable802, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable803[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (or:v4i16 V64:v4i16:$LHS, V64:v4i16:$RHS)  =>  (ORRv8i8:v4i16 V64:v4i16:$LHS, V64:v4i16:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ORRv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable803\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable803, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable804[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (or:v2i32 V64:v2i32:$LHS, V64:v2i32:$RHS)  =>  (ORRv8i8:v2i32 V64:v2i32:$LHS, V64:v2i32:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ORRv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable804\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable804, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable805[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (or:v1i64 V64:v1i64:$LHS, V64:v1i64:$RHS)  =>  (ORRv8i8:v1i64 V64:v1i64:$LHS, V64:v1i64:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ORRv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable805\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable805, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable806[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (or:v8i16 V128:v8i16:$LHS, V128:v8i16:$RHS)  =>  (ORRv16i8:v8i16 V128:v8i16:$LHS, V128:v8i16:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ORRv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable806\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable806, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable807[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (or:v4i32 V128:v4i32:$LHS, V128:v4i32:$RHS)  =>  (ORRv16i8:v4i32 V128:v4i32:$LHS, V128:v4i32:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ORRv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable807\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable807, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable808[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (or:v2i64 V128:v2i64:$LHS, V128:v2i64:$RHS)  =>  (ORRv16i8:v2i64 V128:v2i64:$LHS, V128:v2i64:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::ORRv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable808\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable808, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable809[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // (sdiv:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (SDIVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SDIVWr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable809\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable809, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable810[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (sdiv:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (SDIVXr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SDIVXr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable810\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable810, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable811[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SHL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (shl:i32 GPR32:i32:$Rn, (zext:i64 GPR32:i32:$Rm))  =>  (LSLVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::LSLVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable811\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable811, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable812[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SHL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ANYEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (shl:i32 GPR32:i32:$Rn, (anyext:i64 GPR32:i32:$Rm))  =>  (LSLVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::LSLVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable812\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable812, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable813[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SHL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (shl:i32 GPR32:i32:$Rn, (sext:i64 GPR32:i32:$Rm))  =>  (LSLVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::LSLVWr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable813\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable813, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable814[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SHL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (shl:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (LSLVXr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::LSLVXr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable814\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable814, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable815[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v8i16 (sext:v8i16 V64:v8i8:$Rn), (sext:v8i16 V64:v8i8:$Rm))  =>  (SSUBLv8i8_v8i16:v8i16 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSUBLv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable815\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable815, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable816[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v4i32 (sext:v4i32 V64:v4i16:$Rn), (sext:v4i32 V64:v4i16:$Rm))  =>  (SSUBLv4i16_v4i32:v4i32 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSUBLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable816\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable816, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable817[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v2i64 (sext:v2i64 V64:v2i32:$Rn), (sext:v2i64 V64:v2i32:$Rm))  =>  (SSUBLv2i32_v2i64:v2i64 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSUBLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable817\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable817, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable818[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v8i16 (zext:v8i16 V64:v8i8:$Rn), (zext:v8i16 V64:v8i8:$Rm))  =>  (USUBLv8i8_v8i16:v8i16 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USUBLv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable818\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable818, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable819[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v4i32 (zext:v4i32 V64:v4i16:$Rn), (zext:v4i32 V64:v4i16:$Rm))  =>  (USUBLv4i16_v4i32:v4i32 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USUBLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable819\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable819, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable820[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v2i64 (zext:v2i64 V64:v2i32:$Rn), (zext:v2i64 V64:v2i32:$Rm))  =>  (USUBLv2i32_v2i64:v2i64 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USUBLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable820\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable820, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable821[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/1, 0,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:i32 0:i32, (mul:i32 GPR32:i32:$Rn, GPR32:i32:$Rm))  =>  (MSUBWrrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm, WZR:i32)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MSUBWrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::WZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable821\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable821, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable822[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/1, 0,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:i64 0:i64, (mul:i64 GPR64:i64:$Rn, GPR64:i64:$Rm))  =>  (MSUBXrrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm, XZR:i64)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MSUBXrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::XZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable822\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable822, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable823[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/1, 0,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_SEXT,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (sub:i64 0:i64, (mul:i64 (sext:i64 GPR32:i32:$Rn), (sext:i64 GPR32:i32:$Rm)))  =>  (SMSUBLrrr:i64 GPR32:i32:$Rn, GPR32:i32:$Rm, XZR:i64)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMSUBLrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::XZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable823\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable823, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable824[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/1, 0,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_ZEXT,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (sub:i64 0:i64, (mul:i64 (zext:i64 GPR32:i32:$Rn), (zext:i64 GPR32:i32:$Rm)))  =>  (UMSUBLrrr:i64 GPR32:i32:$Rn, GPR32:i32:$Rm, XZR:i64)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMSUBLrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
      GIR_AddRegister, /*InsnID*/0, AArch64::XZR,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable824\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable824, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable825[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32spRegClassID,
    // MIs[0] imm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckComplexPattern, /*MI*/0, /*Op*/2, /*Renderer*/0, GICP_gi_addsub_shifted_imm32,
    // (sub:i32 GPR32sp:i32:$Rn, addsub_shifted_imm32:i32:$imm)  =>  (SUBSWri:i32:i32 GPR32sp:i32:$Rn, addsub_shifted_imm32:i32:$imm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUBSWri,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_ComplexRenderer, /*InsnID*/0, /*RendererID*/0,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable825\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable825, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable826[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64spRegClassID,
    // MIs[0] imm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckComplexPattern, /*MI*/0, /*Op*/2, /*Renderer*/0, GICP_gi_addsub_shifted_imm64,
    // (sub:i64 GPR64sp:i64:$Rn, addsub_shifted_imm64:i64:$imm)  =>  (SUBSXri:i64:i32 GPR64sp:i64:$Rn, addsub_shifted_imm64:i64:$imm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SUBSXri,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_ComplexRenderer, /*InsnID*/0, /*RendererID*/0,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable826\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable826, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable827[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_SEXT,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (sub:i64 GPR64:i64:$Ra, (mul:i64 (sext:i64 GPR32:i32:$Rn), (sext:i64 GPR32:i32:$Rm)))  =>  (SMSUBLrrr:i64 GPR32:i32:$Rn, GPR32:i32:$Rm, GPR64:i64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMSUBLrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable827\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable827, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable828[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_ZEXT,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (sub:i64 GPR64:i64:$Ra, (mul:i64 (zext:i64 GPR32:i32:$Rn), (zext:i64 GPR32:i32:$Rm)))  =>  (UMSUBLrrr:i64 GPR32:i32:$Rn, GPR32:i32:$Rm, GPR64:i64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMSUBLrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable828\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable828, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable829[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v8i8 V64:v8i8:$Rd, (mul:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm))  =>  (MLSv8i8:v8i8 V64:v8i8:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLSv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable829\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable829, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable830[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v16i8 V128:v16i8:$Rd, (mul:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm))  =>  (MLSv16i8:v16i8 V128:v16i8:$Rd, V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLSv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable830\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable830, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable831[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v4i16 V64:v4i16:$Rd, (mul:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (MLSv4i16:v4i16 V64:v4i16:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLSv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable831\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable831, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable832[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v8i16 V128:v8i16:$Rd, (mul:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm))  =>  (MLSv8i16:v8i16 V128:v8i16:$Rd, V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLSv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable832\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable832, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable833[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v2i32 V64:v2i32:$Rd, (mul:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (MLSv2i32:v2i32 V64:v2i32:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLSv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable833\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable833, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable834[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v4i32 V128:v4i32:$Rd, (mul:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm))  =>  (MLSv4i32:v4i32 V128:v4i32:$Rd, V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::MLSv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable834\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable834, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable835[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v8i16 V128:v8i16:$Rd, (intrinsic_wo_chain:v8i16 274:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm))  =>  (SMLSLv8i8_v8i16:v8i16 V128:v8i16:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMLSLv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable835\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable835, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable836[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v4i32 V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 274:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (SMLSLv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMLSLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable836\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable836, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable837[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_smull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v2i64 V128:v2i64:$Rd, (intrinsic_wo_chain:v2i64 274:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (SMLSLv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SMLSLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable837\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable837, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable838[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v8i16 V128:v8i16:$Rn, (sext:v8i16 V64:v8i8:$Rm))  =>  (SSUBWv8i8_v8i16:v8i16 V128:v8i16:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSUBWv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable838\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable838, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable839[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v4i32 V128:v4i32:$Rn, (sext:v4i32 V64:v4i16:$Rm))  =>  (SSUBWv4i16_v4i32:v4i32 V128:v4i32:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSUBWv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable839\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable839, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable840[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v2i64 V128:v2i64:$Rn, (sext:v2i64 V64:v2i32:$Rm))  =>  (SSUBWv2i32_v2i64:v2i64 V128:v2i64:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SSUBWv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable840\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable840, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable841[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v8i16 V128:v8i16:$Rd, (intrinsic_wo_chain:v8i16 327:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm))  =>  (UMLSLv8i8_v8i16:v8i16 V128:v8i16:$Rd, V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMLSLv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable841\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable841, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable842[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v4i32 V128:v4i32:$Rd, (intrinsic_wo_chain:v4i32 327:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (UMLSLv4i16_v4i32:v4i32 V128:v4i32:$Rd, V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMLSLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable842\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable842, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable843[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_umull,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v2i64 V128:v2i64:$Rd, (intrinsic_wo_chain:v2i64 327:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (UMLSLv2i32_v2i64:v2i64 V128:v2i64:$Rd, V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UMLSLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable843\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable843, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable844[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v8i16 V128:v8i16:$Rn, (zext:v8i16 V64:v8i8:$Rm))  =>  (USUBWv8i8_v8i16:v8i16 V128:v8i16:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USUBWv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable844\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable844, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable845[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v4i32 V128:v4i32:$Rn, (zext:v4i32 V64:v4i16:$Rm))  =>  (USUBWv4i16_v4i32:v4i32 V128:v4i32:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USUBWv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable845\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable845, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable846[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v2i64 V128:v2i64:$Rn, (zext:v2i64 V64:v2i32:$Rm))  =>  (USUBWv2i32_v2i64:v2i64 V128:v2i64:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::USUBWv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable846\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable846, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable847[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (sub:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (SUBv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SUBv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable847\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable847, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable848[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (sub:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (SUBv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SUBv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable848\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable848, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable849[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (sub:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)  =>  (SUBv4i16:v4i16 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SUBv4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable849\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable849, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable850[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (sub:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)  =>  (SUBv8i16:v8i16 V128:v8i16:$Rn, V128:v8i16:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SUBv8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable850\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable850, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable851[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (sub:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)  =>  (SUBv2i32:v2i32 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SUBv2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable851\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable851, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable852[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (sub:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)  =>  (SUBv4i32:v4i32 V128:v4i32:$Rn, V128:v4i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SUBv4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable852\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable852, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable853[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (sub:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)  =>  (SUBv2i64:v2i64 V128:v2i64:$Rn, V128:v2i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SUBv2i64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable853\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable853, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable854[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (sub:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)  =>  (SUBv1i64:v1i64 FPR64:v1i64:$Rn, FPR64:v1i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SUBv1i64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable854\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable854, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable855[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // (sub:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (SUBSWrr:i32:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SUBSWrr,
    GIR_AddImplicitDef, 0, AArch64::NZCV,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable855\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable855, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable856[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (sub:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (SUBSXrr:i64:i32 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SUBSXrr,
    GIR_AddImplicitDef, 0, AArch64::NZCV,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable856\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable856, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable857[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // (udiv:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (UDIVWr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UDIVWr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable857\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable857, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable858[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (udiv:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (UDIVXr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UDIVXr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable858\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable858, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable859[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (xor:i32 (xor:i32 GPR32:i32:$Rn, GPR32:i32:$Rm), -1:i32)  =>  (EONWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::EONWrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable859\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable859, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable860[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (xor:i64 (xor:i64 GPR64:i64:$Rn, GPR64:i64:$Rm), -1:i64)  =>  (EONXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::EONXrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable860\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable860, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable861[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (xor:i32 (xor:i32 GPR32:i32:$Rn, -1:i32), GPR32:i32:$Rm)  =>  (EONWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::EONWrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable861\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable861, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable862[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (xor:i64 (xor:i64 GPR64:i64:$Rn, -1:i64), GPR64:i64:$Rm)  =>  (EONXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::EONXrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable862\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable862, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable863[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (xor:i32 GPR32:i32:$Rm, (xor:i32 GPR32:i32:$Rn, -1:i32))  =>  (EONWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::EONWrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable863\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable863, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable864[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (xor:i64 GPR64:i64:$Rm, (xor:i64 GPR64:i64:$Rn, -1:i64))  =>  (EONXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::EONXrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable864\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable864, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable865[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Wm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/2, -1,
    // (xor:i32 GPR32:i32:$Wm, -1:i32)  =>  (ORNWrr:i32 WZR:i32, GPR32:i32:$Wm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ORNWrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
      GIR_AddRegister, /*InsnID*/0, AArch64::WZR,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Wm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable865\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable865, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable866[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Xm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/2, -1,
    // (xor:i64 GPR64:i64:$Xm, -1:i64)  =>  (ORNXrr:i64 XZR:i64, GPR64:i64:$Xm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::ORNXrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
      GIR_AddRegister, /*InsnID*/0, AArch64::XZR,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Xm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable866\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable866, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable867[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR32RegClassID,
    // (xor:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)  =>  (EORWrr:i32 GPR32:i32:$Rn, GPR32:i32:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::EORWrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable867\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable867, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable868[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::GPR64RegClassID,
    // (xor:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)  =>  (EORXrr:i64 GPR64:i64:$Rn, GPR64:i64:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::EORXrr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable868\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable868, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable869[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (xor:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)  =>  (EORv8i8:v8i8 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::EORv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable869\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable869, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable870[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (xor:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)  =>  (EORv16i8:v16i8 V128:v16i8:$Rn, V128:v16i8:$Rm)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::EORv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable870\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable870, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable871[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (xor:v4i16 V64:v4i16:$LHS, V64:v4i16:$RHS)  =>  (EORv8i8:v4i16 V64:v4i16:$LHS, V64:v4i16:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::EORv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable871\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable871, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable872[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (xor:v2i32 V64:v2i32:$LHS, V64:v2i32:$RHS)  =>  (EORv8i8:v2i32 V64:v2i32:$LHS, V64:v2i32:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::EORv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable872\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable872, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable873[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // (xor:v1i64 V64:v1i64:$LHS, V64:v1i64:$RHS)  =>  (EORv8i8:v1i64 V64:v1i64:$LHS, V64:v1i64:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::EORv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable873\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable873, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable874[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (xor:v8i16 V128:v8i16:$LHS, V128:v8i16:$RHS)  =>  (EORv16i8:v8i16 V128:v8i16:$LHS, V128:v8i16:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::EORv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable874\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable874, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable875[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (xor:v4i32 V128:v4i32:$LHS, V128:v4i32:$RHS)  =>  (EORv16i8:v4i32 V128:v4i32:$LHS, V128:v4i32:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::EORv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable875\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable875, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable876[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] LHS
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] RHS
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/AArch64::FPR128RegClassID,
    // (xor:v2i64 V128:v2i64:$LHS, V128:v2i64:$RHS)  =>  (EORv16i8:v2i64 V128:v2i64:$LHS, V128:v2i64:$RHS)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::EORv16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable876\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable876, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable877[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (bitconvert:v8i8 GPR64:i64:$Xn)  =>  (COPY_TO_REGCLASS:v8i8 GPR64:i64:$Xn, FPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC FPR64*/ 14,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable877\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable877, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable878[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (bitconvert:v4i16 GPR64:i64:$Xn)  =>  (COPY_TO_REGCLASS:v4i16 GPR64:i64:$Xn, FPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC FPR64*/ 14,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable878\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable878, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable879[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (bitconvert:v2i32 GPR64:i64:$Xn)  =>  (COPY_TO_REGCLASS:v2i32 GPR64:i64:$Xn, FPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC FPR64*/ 14,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable879\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable879, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable880[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (bitconvert:v4f16 GPR64:i64:$Xn)  =>  (COPY_TO_REGCLASS:v4f16 GPR64:i64:$Xn, FPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC FPR64*/ 14,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable880\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable880, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable881[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (bitconvert:v2f32 GPR64:i64:$Xn)  =>  (COPY_TO_REGCLASS:v2f32 GPR64:i64:$Xn, FPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC FPR64*/ 14,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable881\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable881, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable882[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:i64 V64:v8i8:$Vn)  =>  (COPY_TO_REGCLASS:i64 V64:v8i8:$Vn, GPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR64*/ 15,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable882\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable882, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable883[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:i64 V64:v4i16:$Vn)  =>  (COPY_TO_REGCLASS:i64 V64:v4i16:$Vn, GPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR64*/ 15,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable883\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable883, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable884[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:i64 V64:v2i32:$Vn)  =>  (COPY_TO_REGCLASS:i64 V64:v2i32:$Vn, GPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR64*/ 15,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable884\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable884, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable885[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:i64 V64:v4f16:$Vn)  =>  (COPY_TO_REGCLASS:i64 V64:v4f16:$Vn, GPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR64*/ 15,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable885\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable885, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable886[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:i64 V64:v2f32:$Vn)  =>  (COPY_TO_REGCLASS:i64 V64:v2f32:$Vn, GPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR64*/ 15,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable886\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable886, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable887[] = {
    GIM_CheckFeatures, GIFBS_IsLE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:i64 V64:v1f64:$Vn)  =>  (COPY_TO_REGCLASS:i64 V64:v1f64:$Vn, GPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR64*/ 15,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable887\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable887, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable888[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (bitconvert:v1i64 GPR64:i64:$Xn)  =>  (COPY_TO_REGCLASS:v1i64 GPR64:i64:$Xn, FPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC FPR64*/ 14,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable888\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable888, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable889[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (bitconvert:v1f64 GPR64:i64:$Xn)  =>  (COPY_TO_REGCLASS:v1f64 GPR64:i64:$Xn, FPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC FPR64*/ 14,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable889\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable889, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable890[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:i64 V64:v1i64:$Vn)  =>  (COPY_TO_REGCLASS:i64 V64:v1i64:$Vn, GPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR64*/ 15,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable890\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable890, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable891[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // (bitconvert:f32 GPR32:i32:$Xn)  =>  (COPY_TO_REGCLASS:f32 GPR32:i32:$Xn, FPR32:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC FPR32*/ 3,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable891\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable891, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable892[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // (bitconvert:i32 FPR32:f32:$Xn)  =>  (COPY_TO_REGCLASS:i32 FPR32:f32:$Xn, GPR32:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR32*/ 4,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable892\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable892, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable893[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (bitconvert:f64 GPR64:i64:$Xn)  =>  (COPY_TO_REGCLASS:f64 GPR64:i64:$Xn, FPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC FPR64*/ 14,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable893\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable893, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable894[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Xn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:i64 FPR64:f64:$Xn)  =>  (COPY_TO_REGCLASS:i64 FPR64:f64:$Xn, GPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR64*/ 15,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable894\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable894, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable895[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:i64 V64:v1f64:$Vn)  =>  (COPY_TO_REGCLASS:i64 V64:v1f64:$Vn, GPR64:i32)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/TargetOpcode::COPY,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR64*/ 15,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable895\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable895, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable896[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v1i64 FPR64:v2i32:$src)  =>  (REV64v2i32:v1i64 FPR64:v2i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable896\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable896, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable897[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v1i64 FPR64:v4i16:$src)  =>  (REV64v4i16:v1i64 FPR64:v4i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable897\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable897, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable898[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v1i64 FPR64:v8i8:$src)  =>  (REV64v8i8:v1i64 FPR64:v8i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable898\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable898, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable899[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v1i64 FPR64:v4f16:$src)  =>  (REV64v4i16:v1i64 FPR64:v4f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable899\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable899, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable900[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v1i64 FPR64:v2f32:$src)  =>  (REV64v2i32:v1i64 FPR64:v2f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable900\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable900, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable901[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2i32 FPR64:v1i64:$src)  =>  (REV64v2i32:v2i32 FPR64:v1i64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable901\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable901, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable902[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2i32 FPR64:v4i16:$src)  =>  (REV32v4i16:v2i32 FPR64:v4i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable902\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable902, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable903[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2i32 FPR64:v8i8:$src)  =>  (REV32v8i8:v2i32 FPR64:v8i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable903\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable903, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable904[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2i32 FPR64:f64:$src)  =>  (REV64v2i32:v2i32 FPR64:f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable904\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable904, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable905[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2i32 FPR64:v1f64:$src)  =>  (REV64v2i32:v2i32 FPR64:v1f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable905\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable905, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable906[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2i32 FPR64:v4f16:$src)  =>  (REV64v4i16:v2i32 FPR64:v4f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable906\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable906, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable907[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4i16 FPR64:v1i64:$src)  =>  (REV64v4i16:v4i16 FPR64:v1i64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable907\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable907, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable908[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4i16 FPR64:v2i32:$src)  =>  (REV32v4i16:v4i16 FPR64:v2i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable908\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable908, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable909[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4i16 FPR64:v8i8:$src)  =>  (REV16v8i8:v4i16 FPR64:v8i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV16v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable909\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable909, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable910[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4i16 FPR64:f64:$src)  =>  (REV64v4i16:v4i16 FPR64:f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable910\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable910, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable911[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4i16 FPR64:v4f16:$src)  =>  (REV32v4i16:v4i16 FPR64:v4f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable911\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable911, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable912[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4i16 FPR64:v2f32:$src)  =>  (REV32v4i16:v4i16 FPR64:v2f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable912\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable912, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable913[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4i16 FPR64:v1f64:$src)  =>  (REV64v4i16:v4i16 FPR64:v1f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable913\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable913, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable914[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4f16 FPR64:v1i64:$src)  =>  (REV64v4i16:v4f16 FPR64:v1i64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable914\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable914, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable915[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4f16 FPR64:v2i32:$src)  =>  (REV64v4i16:v4f16 FPR64:v2i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable915\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable915, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable916[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4f16 FPR64:v4i16:$src)  =>  (REV64v4i16:v4f16 FPR64:v4i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable916\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable916, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable917[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4f16 FPR64:v8i8:$src)  =>  (REV16v8i8:v4f16 FPR64:v8i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV16v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable917\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable917, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable918[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4f16 FPR64:f64:$src)  =>  (REV64v4i16:v4f16 FPR64:f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable918\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable918, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable919[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4f16 FPR64:v2f32:$src)  =>  (REV64v4i16:v4f16 FPR64:v2f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable919\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable919, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable920[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v4f16 FPR64:v1f64:$src)  =>  (REV64v4i16:v4f16 FPR64:v1f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable920\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable920, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable921[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v8i8 FPR64:v1i64:$src)  =>  (REV64v8i8:v8i8 FPR64:v1i64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable921\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable921, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable922[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v8i8 FPR64:v2i32:$src)  =>  (REV32v8i8:v8i8 FPR64:v2i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable922\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable922, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable923[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v8i8 FPR64:v4i16:$src)  =>  (REV16v8i8:v8i8 FPR64:v4i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV16v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable923\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable923, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable924[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v8i8 FPR64:f64:$src)  =>  (REV64v8i8:v8i8 FPR64:f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable924\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable924, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable925[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v8i8 FPR64:v2f32:$src)  =>  (REV32v8i8:v8i8 FPR64:v2f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable925\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable925, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable926[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v8i8 FPR64:v1f64:$src)  =>  (REV64v8i8:v8i8 FPR64:v1f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable926\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable926, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable927[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v8i8 FPR64:v4f16:$src)  =>  (REV16v8i8:v8i8 FPR64:v4f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV16v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable927\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable927, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable928[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:f64 FPR64:v2i32:$src)  =>  (REV64v2i32:f64 FPR64:v2i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable928\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable928, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable929[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:f64 FPR64:v4i16:$src)  =>  (REV64v4i16:f64 FPR64:v4i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable929\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable929, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable930[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:f64 FPR64:v2f32:$src)  =>  (REV64v2i32:f64 FPR64:v2f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable930\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable930, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable931[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:f64 FPR64:v8i8:$src)  =>  (REV64v8i8:f64 FPR64:v8i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable931\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable931, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable932[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:f64 FPR64:v4f16:$src)  =>  (REV64v4i16:f64 FPR64:v4f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable932\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable932, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable933[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v1f64 FPR64:v2i32:$src)  =>  (REV64v2i32:v1f64 FPR64:v2i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable933\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable933, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable934[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v1f64 FPR64:v4i16:$src)  =>  (REV64v4i16:v1f64 FPR64:v4i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable934\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable934, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable935[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v1f64 FPR64:v8i8:$src)  =>  (REV64v8i8:v1f64 FPR64:v8i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable935\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable935, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable936[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v1f64 FPR64:v2f32:$src)  =>  (REV64v2i32:v1f64 FPR64:v2f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable936\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable936, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable937[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v1f64 FPR64:v4f16:$src)  =>  (REV64v4i16:v1f64 FPR64:v4f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable937\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable937, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable938[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2f32 FPR64:v1i64:$src)  =>  (REV64v2i32:v2f32 FPR64:v1i64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable938\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable938, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable939[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2f32 FPR64:v4i16:$src)  =>  (REV32v4i16:v2f32 FPR64:v4i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable939\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable939, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable940[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2f32 FPR64:v8i8:$src)  =>  (REV32v8i8:v2f32 FPR64:v8i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable940\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable940, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable941[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2f32 FPR64:v1f64:$src)  =>  (REV64v2i32:v2f32 FPR64:v1f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable941\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable941, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable942[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2f32 FPR64:f64:$src)  =>  (REV64v2i32:v2f32 FPR64:f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable942\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable942, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable943[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (bitconvert:v2f32 FPR64:v4f16:$src)  =>  (REV64v4i16:v2f32 FPR64:v4f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable943\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable943, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable944[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v2f64 FPR128:v4i32:$src)  =>  (REV64v4i32:v2f64 FPR128:v4i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable944\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable944, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable945[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v2f64 FPR128:v8i16:$src)  =>  (REV64v8i16:v2f64 FPR128:v8i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable945\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable945, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable946[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v2f64 FPR128:v8f16:$src)  =>  (REV64v8i16:v2f64 FPR128:v8f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable946\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable946, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable947[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v2f64 FPR128:v16i8:$src)  =>  (REV64v16i8:v2f64 FPR128:v16i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable947\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable947, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable948[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v2f64 FPR128:v4f32:$src)  =>  (REV64v4i32:v2f64 FPR128:v4f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable948\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable948, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable949[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v4f32 FPR128:v8i16:$src)  =>  (REV32v8i16:v4f32 FPR128:v8i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable949\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable949, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable950[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v4f32 FPR128:v8f16:$src)  =>  (REV32v8i16:v4f32 FPR128:v8f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable950\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable950, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable951[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v4f32 FPR128:v16i8:$src)  =>  (REV32v16i8:v4f32 FPR128:v16i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable951\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable951, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable952[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v4f32 FPR128:v2i64:$src)  =>  (REV64v4i32:v4f32 FPR128:v2i64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable952\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable952, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable953[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v4f32 FPR128:v2f64:$src)  =>  (REV64v4i32:v4f32 FPR128:v2f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable953\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable953, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable954[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v2i64 FPR128:v4i32:$src)  =>  (REV64v4i32:v2i64 FPR128:v4i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable954\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable954, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable955[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v2i64 FPR128:v8i16:$src)  =>  (REV64v8i16:v2i64 FPR128:v8i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable955\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable955, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable956[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v2i64 FPR128:v16i8:$src)  =>  (REV64v16i8:v2i64 FPR128:v16i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable956\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable956, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable957[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v2i64 FPR128:v4f32:$src)  =>  (REV64v4i32:v2i64 FPR128:v4f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable957\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable957, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable958[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v2i64 FPR128:v8f16:$src)  =>  (REV64v8i16:v2i64 FPR128:v8f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable958\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable958, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable959[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v4i32 FPR128:v2i64:$src)  =>  (REV64v4i32:v4i32 FPR128:v2i64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable959\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable959, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable960[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v4i32 FPR128:v8i16:$src)  =>  (REV32v8i16:v4i32 FPR128:v8i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable960\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable960, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable961[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v4i32 FPR128:v16i8:$src)  =>  (REV32v16i8:v4i32 FPR128:v16i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable961\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable961, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable962[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v4i32 FPR128:v2f64:$src)  =>  (REV64v4i32:v4i32 FPR128:v2f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v4i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable962\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable962, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable963[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v4i32 FPR128:v8f16:$src)  =>  (REV32v8i16:v4i32 FPR128:v8f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable963\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable963, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable964[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8i16 FPR128:v2i64:$src)  =>  (REV64v8i16:v8i16 FPR128:v2i64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable964\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable964, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable965[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8i16 FPR128:v4i32:$src)  =>  (REV32v8i16:v8i16 FPR128:v4i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable965\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable965, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable966[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8i16 FPR128:v16i8:$src)  =>  (REV16v16i8:v8i16 FPR128:v16i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV16v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable966\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable966, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable967[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8i16 FPR128:v2f64:$src)  =>  (REV64v8i16:v8i16 FPR128:v2f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable967\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable967, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable968[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8i16 FPR128:v4f32:$src)  =>  (REV32v8i16:v8i16 FPR128:v4f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable968\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable968, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable969[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8i16 FPR128:v8f16:$src)  =>  (REV32v8i16:v8i16 FPR128:v8f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable969\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable969, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable970[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8f16 FPR128:v2i64:$src)  =>  (REV64v8i16:v8f16 FPR128:v2i64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable970\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable970, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable971[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8f16 FPR128:v4i32:$src)  =>  (REV32v8i16:v8f16 FPR128:v4i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable971\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable971, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable972[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8f16 FPR128:v8i16:$src)  =>  (REV64v8i16:v8f16 FPR128:v8i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable972\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable972, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable973[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8f16 FPR128:v16i8:$src)  =>  (REV16v16i8:v8f16 FPR128:v16i8:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV16v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable973\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable973, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable974[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8f16 FPR128:v2f64:$src)  =>  (REV64v8i16:v8f16 FPR128:v2f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable974\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable974, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable975[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v8f16 FPR128:v4f32:$src)  =>  (REV32v8i16:v8f16 FPR128:v4f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v8i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable975\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable975, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable976[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v16i8 FPR128:v2i64:$src)  =>  (REV64v16i8:v16i8 FPR128:v2i64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable976\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable976, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable977[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v16i8 FPR128:v4i32:$src)  =>  (REV32v16i8:v16i8 FPR128:v4i32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable977\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable977, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable978[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v16i8 FPR128:v8i16:$src)  =>  (REV16v16i8:v16i8 FPR128:v8i16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV16v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable978\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable978, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable979[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v16i8 FPR128:v2f64:$src)  =>  (REV64v16i8:v16i8 FPR128:v2f64:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV64v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable979\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable979, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable980[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v16i8 FPR128:v4f32:$src)  =>  (REV32v16i8:v16i8 FPR128:v4f32:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV32v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable980\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable980, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable981[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (bitconvert:v16i8 FPR128:v8f16:$src)  =>  (REV16v16i8:v16i8 FPR128:v8f16:$src)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::REV16v16i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable981\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable981, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable982[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fneg:f16 (fmul:f16 FPR16:f16:$Rn, FPR16:f16:$Rm))  =>  (FNMULHrr:f16 FPR16:f16:$Rn, FPR16:f16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMULHrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable982\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable982, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable983[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fneg:f32 (fmul:f32 FPR32:f32:$Rn, FPR32:f32:$Rm))  =>  (FNMULSrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMULSrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable983\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable983, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable984[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fneg:f64 (fmul:f64 FPR64:f64:$Rn, FPR64:f64:$Rm))  =>  (FNMULDrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMULDrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable984\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable984, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable985[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMA,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s16, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR16RegClassID,
    // MIs[1] Ra
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR16RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fneg:f16 (fma:f16 FPR16:f16:$Rn, FPR16:f16:$Rm, FPR16:f16:$Ra))  =>  (FNMADDHrrr:f16 FPR16:f16:$Rn, FPR16:f16:$Rm, FPR16:f16:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMADDHrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable985\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable985, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable986[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMA,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR32RegClassID,
    // MIs[1] Ra
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR32RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fneg:f32 (fma:f32 FPR32:f32:$Rn, FPR32:f32:$Rm, FPR32:f32:$Ra))  =>  (FNMADDSrrr:f32 FPR32:f32:$Rn, FPR32:f32:$Rm, FPR32:f32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMADDSrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable986\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable986, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable987[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMA,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Ra
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fneg:f64 (fma:f64 FPR64:f64:$Rn, FPR64:f64:$Rm, FPR64:f64:$Ra))  =>  (FNMADDDrrr:f64 FPR64:f64:$Rn, FPR64:f64:$Rm, FPR64:f64:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::FNMADDDrrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Ra
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable987\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable987, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable988[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // (fneg:f16 FPR16:f16:$Rn)  =>  (FNEGHr:f16 FPR16:f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FNEGHr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable988\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable988, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable989[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // (fneg:f32 FPR32:f32:$Rn)  =>  (FNEGSr:f32 FPR32:f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FNEGSr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable989\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable989, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable990[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fneg:f64 FPR64:f64:$Rn)  =>  (FNEGDr:f64 FPR64:f64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FNEGDr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable990\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable990, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable991[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fneg:v4f16 V64:v4f16:$Rn)  =>  (FNEGv4f16:v4f16 V64:v4f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FNEGv4f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable991\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable991, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable992[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (fneg:v8f16 V128:v8f16:$Rn)  =>  (FNEGv8f16:v8f16 V128:v8f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FNEGv8f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable992\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable992, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable993[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fneg:v2f32 V64:v2f32:$Rn)  =>  (FNEGv2f32:v2f32 V64:v2f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FNEGv2f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable993\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable993, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable994[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (fneg:v4f32 V128:v4f32:$Rn)  =>  (FNEGv4f32:v4f32 V128:v4f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FNEGv4f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable994\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable994, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable995[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (fneg:v2f64 V128:v2f64:$Rn)  =>  (FNEGv2f64:v2f64 V128:v2f64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FNEGv2f64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable995\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable995, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable996[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // (fpextend:f64 FPR16:f16:$Rn)  =>  (FCVTDHr:f64 FPR16:f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTDHr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable996\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable996, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable997[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // (fpextend:f32 FPR16:f16:$Rn)  =>  (FCVTSHr:f32 FPR16:f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTSHr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable997\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable997, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable998[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // (fpextend:f64 FPR32:f32:$Rn)  =>  (FCVTDSr:f64 FPR32:f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTDSr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable998\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable998, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable999[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fpextend:v2f64 V64:v2f32:$Rn)  =>  (FCVTLv2i32:v2f64 V64:v2f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTLv2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable999\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable999, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1000[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fpextend:v4f32 V64:v4f16:$Rn)  =>  (FCVTLv4i16:v4f32 V64:v4f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTLv4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1000\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1000, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1001[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // (fp_to_sint:i32 FPR16:f16:$Rn)  =>  (FCVTZSUWHr:i32 FPR16:f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSUWHr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1001\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1001, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1002[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // (fp_to_sint:i64 FPR16:f16:$Rn)  =>  (FCVTZSUXHr:i64 FPR16:f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSUXHr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1002\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1002, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1003[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // (fp_to_sint:i32 FPR32:f32:$Rn)  =>  (FCVTZSUWSr:i32 FPR32:f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSUWSr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1003\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1003, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1004[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // (fp_to_sint:i64 FPR32:f32:$Rn)  =>  (FCVTZSUXSr:i64 FPR32:f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSUXSr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1004\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1004, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1005[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fp_to_sint:i32 FPR64:f64:$Rn)  =>  (FCVTZSUWDr:i32 FPR64:f64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSUWDr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1005\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1005, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1006[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fp_to_sint:i64 FPR64:f64:$Rn)  =>  (FCVTZSUXDr:i64 FPR64:f64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSUXDr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1006\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1006, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1007[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fp_to_sint:v4i16 V64:v4f16:$Rn)  =>  (FCVTZSv4f16:v4i16 V64:v4f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSv4f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1007\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1007, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1008[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (fp_to_sint:v8i16 V128:v8f16:$Rn)  =>  (FCVTZSv8f16:v8i16 V128:v8f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSv8f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1008\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1008, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1009[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fp_to_sint:v2i32 V64:v2f32:$Rn)  =>  (FCVTZSv2f32:v2i32 V64:v2f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSv2f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1009\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1009, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1010[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (fp_to_sint:v4i32 V128:v4f32:$Rn)  =>  (FCVTZSv4f32:v4i32 V128:v4f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSv4f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1010\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1010, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1011[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (fp_to_sint:v2i64 V128:v2f64:$Rn)  =>  (FCVTZSv2f64:v2i64 V128:v2f64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZSv2f64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1011\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1011, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1012[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // (fp_to_uint:i32 FPR16:f16:$Rn)  =>  (FCVTZUUWHr:i32 FPR16:f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUUWHr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1012\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1012, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1013[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // (fp_to_uint:i64 FPR16:f16:$Rn)  =>  (FCVTZUUXHr:i64 FPR16:f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUUXHr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1013\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1013, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1014[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // (fp_to_uint:i32 FPR32:f32:$Rn)  =>  (FCVTZUUWSr:i32 FPR32:f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUUWSr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1014\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1014, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1015[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // (fp_to_uint:i64 FPR32:f32:$Rn)  =>  (FCVTZUUXSr:i64 FPR32:f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUUXSr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1015\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1015, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1016[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fp_to_uint:i32 FPR64:f64:$Rn)  =>  (FCVTZUUWDr:i32 FPR64:f64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUUWDr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1016\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1016, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1017[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fp_to_uint:i64 FPR64:f64:$Rn)  =>  (FCVTZUUXDr:i64 FPR64:f64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUUXDr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1017\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1017, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1018[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fp_to_uint:v4i16 V64:v4f16:$Rn)  =>  (FCVTZUv4f16:v4i16 V64:v4f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUv4f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1018\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1018, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1019[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (fp_to_uint:v8i16 V128:v8f16:$Rn)  =>  (FCVTZUv8f16:v8i16 V128:v8f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUv8f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1019\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1019, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1020[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (fp_to_uint:v2i32 V64:v2f32:$Rn)  =>  (FCVTZUv2f32:v2i32 V64:v2f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUv2f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1020\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1020, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1021[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (fp_to_uint:v4i32 V128:v4f32:$Rn)  =>  (FCVTZUv4f32:v4i32 V128:v4f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUv4f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1021\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1021, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1022[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (fp_to_uint:v2i64 V128:v2f64:$Rn)  =>  (FCVTZUv2f64:v2i64 V128:v2f64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FCVTZUv2f64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1022\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1022, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1023[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR16RegClassID,
    // (ftrunc:f16 FPR16:f16:$Rn)  =>  (FRINTZHr:f16 FPR16:f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FRINTZHr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1023\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1023, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1024[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR32RegClassID,
    // (ftrunc:f32 FPR32:f32:$Rn)  =>  (FRINTZSr:f32 FPR32:f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FRINTZSr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1024\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1024, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1025[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (ftrunc:f64 FPR64:f64:$Rn)  =>  (FRINTZDr:f64 FPR64:f64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FRINTZDr,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1025\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1025, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1026[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (ftrunc:v4f16 V64:v4f16:$Rn)  =>  (FRINTZv4f16:v4f16 V64:v4f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FRINTZv4f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1026\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1026, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1027[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (ftrunc:v8f16 V128:v8f16:$Rn)  =>  (FRINTZv8f16:v8f16 V128:v8f16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FRINTZv8f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1027\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1027, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1028[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (ftrunc:v2f32 V64:v2f32:$Rn)  =>  (FRINTZv2f32:v2f32 V64:v2f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FRINTZv2f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1028\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1028, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1029[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (ftrunc:v4f32 V128:v4f32:$Rn)  =>  (FRINTZv4f32:v4f32 V128:v4f32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FRINTZv4f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1029\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1029, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1030[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (ftrunc:v2f64 V128:v2f64:$Rn)  =>  (FRINTZv2f64:v2f64 V128:v2f64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::FRINTZv2f64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1030\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1030, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1031[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // (sint_to_fp:f16 GPR32:i32:$Rn)  =>  (SCVTFUWHri:f16 GPR32:i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFUWHri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1031\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1031, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1032[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // (sint_to_fp:f32 GPR32:i32:$Rn)  =>  (SCVTFUWSri:f32 GPR32:i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFUWSri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1032\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1032, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1033[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // (sint_to_fp:f64 GPR32:i32:$Rn)  =>  (SCVTFUWDri:f64 GPR32:i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFUWDri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1033\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1033, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1034[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (sint_to_fp:f16 GPR64:i64:$Rn)  =>  (SCVTFUXHri:f16 GPR64:i64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFUXHri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1034\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1034, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1035[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (sint_to_fp:f32 GPR64:i64:$Rn)  =>  (SCVTFUXSri:f32 GPR64:i64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFUXSri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1035\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1035, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1036[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (sint_to_fp:f64 GPR64:i64:$Rn)  =>  (SCVTFUXDri:f64 GPR64:i64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFUXDri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1036\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1036, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1037[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (sint_to_fp:v4f16 V64:v4i16:$Rn)  =>  (SCVTFv4f16:v4f16 V64:v4i16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFv4f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1037\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1037, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1038[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (sint_to_fp:v8f16 V128:v8i16:$Rn)  =>  (SCVTFv8f16:v8f16 V128:v8i16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFv8f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1038\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1038, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1039[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (sint_to_fp:v2f32 V64:v2i32:$Rn)  =>  (SCVTFv2f32:v2f32 V64:v2i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFv2f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1039\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1039, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1040[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (sint_to_fp:v4f32 V128:v4i32:$Rn)  =>  (SCVTFv4f32:v4f32 V128:v4i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFv4f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1040\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1040, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1041[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (sint_to_fp:v2f64 V128:v2i64:$Rn)  =>  (SCVTFv2f64:v2f64 V128:v2i64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::SCVTFv2f64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1041\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1041, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1042[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_TRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (trunc:v8i8 V128:v8i16:$Rn)  =>  (XTNv8i8:v8i8 V128:v8i16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::XTNv8i8,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1042\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1042, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1043[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_TRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (trunc:v4i16 V128:v4i32:$Rn)  =>  (XTNv4i16:v4i16 V128:v4i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::XTNv4i16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1043\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1043, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1044[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_TRUNC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (trunc:v2i32 V128:v2i64:$Rn)  =>  (XTNv2i32:v2i32 V128:v2i64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::XTNv2i32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1044\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1044, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1045[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_TRUNC,
    // MIs[0] dst
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::GPR64spRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64spRegClassID,
    // (trunc:i32 GPR64sp:i64:$src)  =>  (EXTRACT_SUBREG:i32 GPR64sp:i64:$src, sub_32:i32)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/TargetOpcode::COPY,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // dst
    GIR_CopySubReg, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, /*SubRegIdx*/15, // src
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/0, /*RC GPR32sp*/ 5,
    GIR_ConstrainOperandRC, /*InsnID*/0, /*Op*/1, /*RC GPR64sp*/ 16,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1045\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1045, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1046[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // (uint_to_fp:f16 GPR32:i32:$Rn)  =>  (UCVTFUWHri:f16 GPR32:i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFUWHri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1046\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1046, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1047[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // (uint_to_fp:f32 GPR32:i32:$Rn)  =>  (UCVTFUWSri:f32 GPR32:i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFUWSri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1047\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1047, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1048[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR32RegClassID,
    // (uint_to_fp:f64 GPR32:i32:$Rn)  =>  (UCVTFUWDri:f64 GPR32:i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFUWDri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1048\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1048, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1049[] = {
    GIM_CheckFeatures, GIFBS_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR16RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (uint_to_fp:f16 GPR64:i64:$Rn)  =>  (UCVTFUXHri:f16 GPR64:i64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFUXHri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1049\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1049, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1050[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR32RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (uint_to_fp:f32 GPR64:i64:$Rn)  =>  (UCVTFUXSri:f32 GPR64:i64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFUXSri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1050\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1050, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1051[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::GPR64RegClassID,
    // (uint_to_fp:f64 GPR64:i64:$Rn)  =>  (UCVTFUXDri:f64 GPR64:i64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFUXDri,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1051\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1051, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1052[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (uint_to_fp:v4f16 V64:v4i16:$Rn)  =>  (UCVTFv4f16:v4f16 V64:v4i16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFv4f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1052\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1052, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1053[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (uint_to_fp:v8f16 V128:v8i16:$Rn)  =>  (UCVTFv8f16:v8f16 V128:v8i16:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFv8f16,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1053\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1053, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1054[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR64RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR64RegClassID,
    // (uint_to_fp:v2f32 V64:v2i32:$Rn)  =>  (UCVTFv2f32:v2f32 V64:v2i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFv2f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1054\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1054, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1055[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (uint_to_fp:v4f32 V128:v4i32:$Rn)  =>  (UCVTFv4f32:v4f32 V128:v4i32:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFv4f32,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1055\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1055, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1056[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/AArch64::FPR128RegClassID,
    // (uint_to_fp:v2f64 V128:v2i64:$Rn)  =>  (UCVTFv2f64:v2f64 V128:v2i64:$Rn)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::UCVTFv2f64,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1056\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1056, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1057[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v8i16 (intrinsic_wo_chain:v8i8 315:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm))  =>  (UABDLv8i8_v8i16:v8i16 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABDLv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1057\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1057, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1058[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v4i32 (intrinsic_wo_chain:v4i16 315:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (UABDLv4i16_v4i32:v4i32 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABDLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1058\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1058, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1059[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_uabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v2i64 (intrinsic_wo_chain:v2i32 315:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (UABDLv2i32_v2i64:v2i64 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::UABDLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1059\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1059, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1060[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v8i16 (intrinsic_wo_chain:v8i8 258:iPTR, V64:v8i8:$Rn, V64:v8i8:$Rm))  =>  (SABDLv8i8_v8i16:v8i16 V64:v8i8:$Rn, V64:v8i8:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABDLv8i8_v8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1060\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1060, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1061[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v4i32 (intrinsic_wo_chain:v4i16 258:iPTR, V64:v4i16:$Rn, V64:v4i16:$Rm))  =>  (SABDLv4i16_v4i32:v4i32 V64:v4i16:$Rn, V64:v4i16:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABDLv4i16_v4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1061\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1061, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1062[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/AArch64::FPR128RegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::aarch64_neon_sabd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/AArch64::FPR64RegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/AArch64::FPR64RegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v2i64 (intrinsic_wo_chain:v2i32 258:iPTR, V64:v2i32:$Rn, V64:v2i32:$Rm))  =>  (SABDLv2i32_v2i64:v2i64 V64:v2i32:$Rn, V64:v2i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/AArch64::SABDLv2i32_v2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1062\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1062, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1063[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/1,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BR,
    // MIs[0] addr
    GIM_CheckIsMBB, /*MI*/0, /*Op*/0,
    // (br (bb:Other):$addr)  =>  (B (bb:Other):$addr)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/AArch64::B,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1063\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1063, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  return false;
}
#endif // ifdef GET_GLOBALISEL_IMPL
#ifdef GET_GLOBALISEL_PREDICATES_DECL
PredicateBitset AvailableModuleFeatures;
mutable PredicateBitset AvailableFunctionFeatures;
PredicateBitset getAvailableFeatures() const {
  return AvailableModuleFeatures | AvailableFunctionFeatures;
}
PredicateBitset
computeAvailableModuleFeatures(const AArch64Subtarget *Subtarget) const;
PredicateBitset
computeAvailableFunctionFeatures(const AArch64Subtarget *Subtarget,
                                 const MachineFunction *MF) const;
#endif // ifdef GET_GLOBALISEL_PREDICATES_DECL
#ifdef GET_GLOBALISEL_PREDICATES_INIT
AvailableModuleFeatures(computeAvailableModuleFeatures(&STI)),
AvailableFunctionFeatures()
#endif // ifdef GET_GLOBALISEL_PREDICATES_INIT
