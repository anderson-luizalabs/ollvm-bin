/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Global Instruction Selector for the ARM target                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

#ifdef GET_GLOBALISEL_PREDICATE_BITSET
const unsigned MAX_SUBTARGET_PREDICATES = 59;
using PredicateBitset = llvm::PredicateBitsetImpl<MAX_SUBTARGET_PREDICATES>;
#endif // ifdef GET_GLOBALISEL_PREDICATE_BITSET

#ifdef GET_GLOBALISEL_TEMPORARIES_DECL
  mutable MatcherState State;
  typedef ComplexRendererFn(ARMInstructionSelector::*ComplexMatcherMemFn)(MachineOperand &) const;
const MatcherInfoTy<PredicateBitset, ComplexMatcherMemFn> MatcherInfo;
#endif // ifdef GET_GLOBALISEL_TEMPORARIES_DECL

#ifdef GET_GLOBALISEL_TEMPORARIES_INIT
, State(0),
MatcherInfo({TypeObjects, FeatureBitsets, {
  nullptr, // GICP_Invalid
}})
#endif // ifdef GET_GLOBALISEL_TEMPORARIES_INIT

#ifdef GET_GLOBALISEL_IMPL
// Bits for subtarget features that participate in instruction matching.
enum SubtargetFeatureBits : uint8_t {
  Feature_NoHonorSignDependentRoundingBit = 52,
  Feature_HasV4TBit = 6,
  Feature_NoV4TBit = 7,
  Feature_HasV5TBit = 8,
  Feature_HasV5TEBit = 12,
  Feature_HasV6Bit = 1,
  Feature_NoV6Bit = 10,
  Feature_HasV6MBit = 27,
  Feature_HasV8MBaselineBit = 31,
  Feature_HasV6T2Bit = 9,
  Feature_HasV6KBit = 19,
  Feature_HasV7Bit = 2,
  Feature_HasV8Bit = 14,
  Feature_PreV8Bit = 20,
  Feature_HasV8_1aBit = 54,
  Feature_NoVFPBit = 22,
  Feature_HasVFP2Bit = 21,
  Feature_HasVFP3Bit = 43,
  Feature_HasVFP4Bit = 41,
  Feature_HasDPVFPBit = 35,
  Feature_HasFPARMv8Bit = 37,
  Feature_HasNEONBit = 44,
  Feature_HasCryptoBit = 46,
  Feature_HasCRCBit = 15,
  Feature_HasFP16Bit = 50,
  Feature_HasFullFP16Bit = 45,
  Feature_HasDivideInThumbBit = 33,
  Feature_HasDivideInARMBit = 13,
  Feature_HasDSPBit = 32,
  Feature_HasDBBit = 16,
  Feature_HasV7ClrexBit = 18,
  Feature_HasAcquireReleaseBit = 17,
  Feature_HasMPBit = 3,
  Feature_HasZCZBit = 47,
  Feature_UseNEONForFPBit = 57,
  Feature_DontUseNEONForFPBit = 36,
  Feature_IsThumbBit = 25,
  Feature_IsThumb1OnlyBit = 26,
  Feature_IsThumb2Bit = 30,
  Feature_IsNotMClassBit = 34,
  Feature_IsARMBit = 0,
  Feature_IsWindowsBit = 28,
  Feature_IsNotWindowsBit = 29,
  Feature_UseNaClTrapBit = 4,
  Feature_DontUseNaClTrapBit = 5,
  Feature_UseMovtBit = 24,
  Feature_DontUseMovtBit = 23,
  Feature_UseFPVMLxBit = 39,
  Feature_UseMulOpsBit = 11,
  Feature_UseFusedMACBit = 42,
  Feature_DontUseFusedMACBit = 40,
  Feature_HasFastVGETLNi32Bit = 48,
  Feature_HasSlowVGETLNi32Bit = 55,
  Feature_HasFastVDUP32Bit = 49,
  Feature_HasSlowVDUP32Bit = 56,
  Feature_UseVMOVSRBit = 38,
  Feature_DontUseVMOVSRBit = 58,
  Feature_IsLEBit = 51,
  Feature_IsBEBit = 53,
};

PredicateBitset ARMInstructionSelector::
computeAvailableModuleFeatures(const ARMSubtarget *Subtarget) const {
  PredicateBitset Features;
  if (!TM.Options.HonorSignDependentRoundingFPMath())
    Features[Feature_NoHonorSignDependentRoundingBit] = 1;
  if (Subtarget->hasV4TOps())
    Features[Feature_HasV4TBit] = 1;
  if (!Subtarget->hasV4TOps())
    Features[Feature_NoV4TBit] = 1;
  if (Subtarget->hasV5TOps())
    Features[Feature_HasV5TBit] = 1;
  if (Subtarget->hasV5TEOps())
    Features[Feature_HasV5TEBit] = 1;
  if (Subtarget->hasV6Ops())
    Features[Feature_HasV6Bit] = 1;
  if (!Subtarget->hasV6Ops())
    Features[Feature_NoV6Bit] = 1;
  if (Subtarget->hasV6MOps())
    Features[Feature_HasV6MBit] = 1;
  if (Subtarget->hasV8MBaselineOps())
    Features[Feature_HasV8MBaselineBit] = 1;
  if (Subtarget->hasV6T2Ops())
    Features[Feature_HasV6T2Bit] = 1;
  if (Subtarget->hasV6KOps())
    Features[Feature_HasV6KBit] = 1;
  if (Subtarget->hasV7Ops())
    Features[Feature_HasV7Bit] = 1;
  if (Subtarget->hasV8Ops())
    Features[Feature_HasV8Bit] = 1;
  if (!Subtarget->hasV8Ops())
    Features[Feature_PreV8Bit] = 1;
  if (Subtarget->hasV8_1aOps())
    Features[Feature_HasV8_1aBit] = 1;
  if (!Subtarget->hasVFP2())
    Features[Feature_NoVFPBit] = 1;
  if (Subtarget->hasVFP2())
    Features[Feature_HasVFP2Bit] = 1;
  if (Subtarget->hasVFP3())
    Features[Feature_HasVFP3Bit] = 1;
  if (Subtarget->hasVFP4())
    Features[Feature_HasVFP4Bit] = 1;
  if (!Subtarget->isFPOnlySP())
    Features[Feature_HasDPVFPBit] = 1;
  if (Subtarget->hasFPARMv8())
    Features[Feature_HasFPARMv8Bit] = 1;
  if (Subtarget->hasNEON())
    Features[Feature_HasNEONBit] = 1;
  if (Subtarget->hasCrypto())
    Features[Feature_HasCryptoBit] = 1;
  if (Subtarget->hasCRC())
    Features[Feature_HasCRCBit] = 1;
  if (Subtarget->hasFP16())
    Features[Feature_HasFP16Bit] = 1;
  if (Subtarget->hasFullFP16())
    Features[Feature_HasFullFP16Bit] = 1;
  if (Subtarget->hasDivideInThumbMode())
    Features[Feature_HasDivideInThumbBit] = 1;
  if (Subtarget->hasDivideInARMMode())
    Features[Feature_HasDivideInARMBit] = 1;
  if (Subtarget->hasDSP())
    Features[Feature_HasDSPBit] = 1;
  if (Subtarget->hasDataBarrier())
    Features[Feature_HasDBBit] = 1;
  if (Subtarget->hasV7Clrex())
    Features[Feature_HasV7ClrexBit] = 1;
  if (Subtarget->hasAcquireRelease())
    Features[Feature_HasAcquireReleaseBit] = 1;
  if (Subtarget->hasMPExtension())
    Features[Feature_HasMPBit] = 1;
  if (Subtarget->hasZeroCycleZeroing())
    Features[Feature_HasZCZBit] = 1;
  if (Subtarget->useNEONForSinglePrecisionFP())
    Features[Feature_UseNEONForFPBit] = 1;
  if (!Subtarget->useNEONForSinglePrecisionFP())
    Features[Feature_DontUseNEONForFPBit] = 1;
  if (Subtarget->isThumb())
    Features[Feature_IsThumbBit] = 1;
  if (Subtarget->isThumb1Only())
    Features[Feature_IsThumb1OnlyBit] = 1;
  if (Subtarget->isThumb2())
    Features[Feature_IsThumb2Bit] = 1;
  if (!Subtarget->isMClass())
    Features[Feature_IsNotMClassBit] = 1;
  if (!Subtarget->isThumb())
    Features[Feature_IsARMBit] = 1;
  if (Subtarget->isTargetWindows())
    Features[Feature_IsWindowsBit] = 1;
  if (!Subtarget->isTargetWindows())
    Features[Feature_IsNotWindowsBit] = 1;
  if (Subtarget->useNaClTrap())
    Features[Feature_UseNaClTrapBit] = 1;
  if (!Subtarget->useNaClTrap())
    Features[Feature_DontUseNaClTrapBit] = 1;
  if (Subtarget->useFPVMLx())
    Features[Feature_UseFPVMLxBit] = 1;
  if (Subtarget->useMulOps())
    Features[Feature_UseMulOpsBit] = 1;
  if ((TM.Options.AllowFPOpFusion == FPOpFusion::Fast &&  Subtarget->hasVFP4()) && !Subtarget->isTargetDarwin())
    Features[Feature_UseFusedMACBit] = 1;
  if (!(TM.Options.AllowFPOpFusion == FPOpFusion::Fast && Subtarget->hasVFP4()) || Subtarget->isTargetDarwin())
    Features[Feature_DontUseFusedMACBit] = 1;
  if (!Subtarget->hasSlowVGETLNi32())
    Features[Feature_HasFastVGETLNi32Bit] = 1;
  if (Subtarget->hasSlowVGETLNi32())
    Features[Feature_HasSlowVGETLNi32Bit] = 1;
  if (!Subtarget->hasSlowVDUP32())
    Features[Feature_HasFastVDUP32Bit] = 1;
  if (Subtarget->hasSlowVDUP32())
    Features[Feature_HasSlowVDUP32Bit] = 1;
  if (Subtarget->preferVMOVSR() ||!Subtarget->useNEONForSinglePrecisionFP())
    Features[Feature_UseVMOVSRBit] = 1;
  if (!Subtarget->preferVMOVSR() &&Subtarget->useNEONForSinglePrecisionFP())
    Features[Feature_DontUseVMOVSRBit] = 1;
  return Features;
}

PredicateBitset ARMInstructionSelector::
computeAvailableFunctionFeatures(const ARMSubtarget *Subtarget, const MachineFunction *MF) const {
  PredicateBitset Features;
  if (Subtarget->useMovt(*MF))
    Features[Feature_UseMovtBit] = 1;
  if (!Subtarget->useMovt(*MF))
    Features[Feature_DontUseMovtBit] = 1;
  if (MF->getDataLayout().isLittleEndian())
    Features[Feature_IsLEBit] = 1;
  if (MF->getDataLayout().isBigEndian())
    Features[Feature_IsBEBit] = 1;
  return Features;
}

enum {
  GILLT_v2s32,
  GILLT_v2s64,
  GILLT_v4s16,
  GILLT_v4s32,
  GILLT_v4s64,
  GILLT_v8s1,
  GILLT_v8s8,
  GILLT_v8s16,
  GILLT_v8s32,
  GILLT_v8s64,
  GILLT_v16s1,
  GILLT_v16s8,
  GILLT_v16s16,
  GILLT_v16s32,
  GILLT_v32s1,
  GILLT_v32s8,
  GILLT_v32s16,
  GILLT_v64s1,
  GILLT_v64s8,
  GILLT_s8,
  GILLT_s16,
  GILLT_s32,
  GILLT_s64,
  GILLT_s80,
};
const static LLT TypeObjects[] = {
  LLT::vector(2, 32),
  LLT::vector(2, 64),
  LLT::vector(4, 16),
  LLT::vector(4, 32),
  LLT::vector(4, 64),
  LLT::vector(8, 1),
  LLT::vector(8, 8),
  LLT::vector(8, 16),
  LLT::vector(8, 32),
  LLT::vector(8, 64),
  LLT::vector(16, 1),
  LLT::vector(16, 8),
  LLT::vector(16, 16),
  LLT::vector(16, 32),
  LLT::vector(32, 1),
  LLT::vector(32, 8),
  LLT::vector(32, 16),
  LLT::vector(64, 1),
  LLT::vector(64, 8),
  LLT::scalar(8),
  LLT::scalar(16),
  LLT::scalar(32),
  LLT::scalar(64),
  LLT::scalar(80),
};

enum {
  GIFBS_Invalid,
  GIFBS_HasFPARMv8,
  GIFBS_HasNEON,
  GIFBS_HasVFP2,
  GIFBS_HasVFP4,
  GIFBS_IsARM,
  GIFBS_IsBE,
  GIFBS_IsThumb2,
  GIFBS_NoHonorSignDependentRounding,
  GIFBS_HasFPARMv8_HasDPVFP,
  GIFBS_HasNEON_HasFP16,
  GIFBS_HasNEON_HasFullFP16,
  GIFBS_HasNEON_HasV8_1a,
  GIFBS_HasV8_HasCrypto,
  GIFBS_HasV8_HasNEON,
  GIFBS_HasVFP2_DontUseNEONForFP,
  GIFBS_HasVFP2_HasDPVFP,
  GIFBS_HasVFP2_UseVMOVSR,
  GIFBS_HasVFP4_HasDPVFP,
  GIFBS_IsARM_HasDivideInARM,
  GIFBS_IsARM_HasV5TE,
  GIFBS_IsARM_HasV6,
  GIFBS_IsARM_NoV6,
  GIFBS_IsThumb_HasV8MBaseline,
  GIFBS_IsThumb_IsThumb1Only,
  GIFBS_IsThumb2_HasDSP,
  GIFBS_IsThumb2_UseMulOps,
  GIFBS_NoHonorSignDependentRounding_HasDPVFP,
  GIFBS_HasDivideInThumb_IsThumb_HasV8MBaseline,
  GIFBS_HasNEON_HasFullFP16_UseFusedMAC,
  GIFBS_HasV8_HasNEON_HasFullFP16,
  GIFBS_IsARM_HasV5TE_UseMulOps,
  GIFBS_IsARM_HasV6_UseMulOps,
  GIFBS_IsARM_HasV6T2_UseMulOps,
  GIFBS_IsARM_HasV8_HasCRC,
  GIFBS_IsARM_NoV6_UseMulOps,
  GIFBS_IsThumb_IsThumb1Only_HasV6,
  GIFBS_IsThumb2_HasDSP_UseMulOps,
  GIFBS_IsThumb2_HasV8_HasCRC,
  GIFBS_HasNEON_HasFullFP16_UseFPVMLx_DontUseFusedMAC,
};
const static PredicateBitset FeatureBitsets[] {
  {}, // GIFBS_Invalid
  {Feature_HasFPARMv8Bit, },
  {Feature_HasNEONBit, },
  {Feature_HasVFP2Bit, },
  {Feature_HasVFP4Bit, },
  {Feature_IsARMBit, },
  {Feature_IsBEBit, },
  {Feature_IsThumb2Bit, },
  {Feature_NoHonorSignDependentRoundingBit, },
  {Feature_HasFPARMv8Bit, Feature_HasDPVFPBit, },
  {Feature_HasNEONBit, Feature_HasFP16Bit, },
  {Feature_HasNEONBit, Feature_HasFullFP16Bit, },
  {Feature_HasNEONBit, Feature_HasV8_1aBit, },
  {Feature_HasV8Bit, Feature_HasCryptoBit, },
  {Feature_HasV8Bit, Feature_HasNEONBit, },
  {Feature_HasVFP2Bit, Feature_DontUseNEONForFPBit, },
  {Feature_HasVFP2Bit, Feature_HasDPVFPBit, },
  {Feature_HasVFP2Bit, Feature_UseVMOVSRBit, },
  {Feature_HasVFP4Bit, Feature_HasDPVFPBit, },
  {Feature_IsARMBit, Feature_HasDivideInARMBit, },
  {Feature_IsARMBit, Feature_HasV5TEBit, },
  {Feature_IsARMBit, Feature_HasV6Bit, },
  {Feature_IsARMBit, Feature_NoV6Bit, },
  {Feature_IsThumbBit, Feature_HasV8MBaselineBit, },
  {Feature_IsThumbBit, Feature_IsThumb1OnlyBit, },
  {Feature_IsThumb2Bit, Feature_HasDSPBit, },
  {Feature_IsThumb2Bit, Feature_UseMulOpsBit, },
  {Feature_NoHonorSignDependentRoundingBit, Feature_HasDPVFPBit, },
  {Feature_HasDivideInThumbBit, Feature_IsThumbBit, Feature_HasV8MBaselineBit, },
  {Feature_HasNEONBit, Feature_HasFullFP16Bit, Feature_UseFusedMACBit, },
  {Feature_HasV8Bit, Feature_HasNEONBit, Feature_HasFullFP16Bit, },
  {Feature_IsARMBit, Feature_HasV5TEBit, Feature_UseMulOpsBit, },
  {Feature_IsARMBit, Feature_HasV6Bit, Feature_UseMulOpsBit, },
  {Feature_IsARMBit, Feature_HasV6T2Bit, Feature_UseMulOpsBit, },
  {Feature_IsARMBit, Feature_HasV8Bit, Feature_HasCRCBit, },
  {Feature_IsARMBit, Feature_NoV6Bit, Feature_UseMulOpsBit, },
  {Feature_IsThumbBit, Feature_IsThumb1OnlyBit, Feature_HasV6Bit, },
  {Feature_IsThumb2Bit, Feature_HasDSPBit, Feature_UseMulOpsBit, },
  {Feature_IsThumb2Bit, Feature_HasV8Bit, Feature_HasCRCBit, },
  {Feature_HasNEONBit, Feature_HasFullFP16Bit, Feature_UseFPVMLxBit, Feature_DontUseFusedMACBit, },
};

enum {
  GICP_Invalid,
};
// See constructor for table contents

bool ARMInstructionSelector::selectImpl(MachineInstr &I) const {
  MachineFunction &MF = *I.getParent()->getParent();
  MachineRegisterInfo &MRI = MF.getRegInfo();
  // FIXME: This should be computed on a per-function basis rather than per-insn.
  AvailableFunctionFeatures = computeAvailableFunctionFeatures(&STI, &MF);
  const PredicateBitset AvailableFeatures = getAvailableFeatures();
  NewMIVector OutMIs;
  State.MIs.clear();
  State.MIs.push_back(&I);

  const static int64_t MatchTable0[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_usada8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 788:iPTR, GPR:i32:$Rn, GPR:i32:$Rm, GPR:i32:$Ra)  =>  (USADA8:i32 GPR:i32:$Rn, GPR:i32:$Rm, GPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::USADA8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable0\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable0, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable1[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_usada8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 788:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)  =>  (t2USADA8:i32 rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2USADA8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable1\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable1, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable2[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlad,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 733:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)  =>  (t2SMLAD:i32 rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLAD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable2\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable2, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable3[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smladx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 734:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)  =>  (t2SMLADX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLADX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable3\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable3, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable4[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlsd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 741:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)  =>  (t2SMLSD:i32 rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLSD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable4\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable4, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable5[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlsdx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 742:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)  =>  (t2SMLSDX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLSDX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable5\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable5, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable6[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vtbx1,
    // MIs[0] orig
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 708:iPTR, DPR:v8i8:$orig, VecListOneD:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VTBX1:v8i8 DPR:v8i8:$orig, VecListOneD:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VTBX1,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // orig
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable6\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable6, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable7[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_sha1su0,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 597:iPTR, QPR:v4i32:$src, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (SHA1SU0:v4i32 QPR:v4i32:$src, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHA1SU0,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable7\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable7, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable8[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_sha256h,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 599:iPTR, QPR:v4i32:$src, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (SHA256H:v4i32 QPR:v4i32:$src, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHA256H,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable8\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable8, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable9[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_sha256h2,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 600:iPTR, QPR:v4i32:$src, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (SHA256H2:v4i32 QPR:v4i32:$src, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHA256H2,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable9\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable9, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable10[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_sha256su1,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 602:iPTR, QPR:v4i32:$src, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (SHA256SU1:v4i32 QPR:v4i32:$src, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHA256SU1,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable10\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable10, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable11[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlad,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 733:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPR:i32:$Ra)  =>  (SMLAD:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPRnopc:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLAD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable11\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable11, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable12[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smladx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 734:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPR:i32:$Ra)  =>  (SMLADX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPRnopc:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLADX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable12\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable12, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable13[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlsd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 741:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPR:i32:$Ra)  =>  (SMLSD:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPRnopc:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLSD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable13\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable13, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable14[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlsdx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 742:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPR:i32:$Ra)  =>  (SMLSDX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPRnopc:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLSDX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable14\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable14, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable15[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlabb,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 731:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (SMLABB:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLABB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable15\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable15, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable16[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlabt,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 732:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (SMLABT:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLABT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable16\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable16, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable17[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlatb,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 737:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (SMLATB:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLATB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable17\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable17, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable18[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlatt,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 738:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (SMLATT:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLATT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable18\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable18, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable19[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlawb,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 739:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (SMLAWB:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLAWB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable19\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable19, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable20[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlawt,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 740:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (SMLAWT:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLAWT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable20\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable20, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable21[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlabb,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 731:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (t2SMLABB:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLABB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable21\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable21, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable22[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlabt,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 732:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (t2SMLABT:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLABT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable22\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable22, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable23[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlatb,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 737:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (t2SMLATB:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLATB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable23\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable23, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable24[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlatt,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 738:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (t2SMLATT:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLATT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable24\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable24, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable25[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlawb,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 739:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (t2SMLAWB:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLAWB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable25\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable25, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable26[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smlawt,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // MIs[0] acc
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 740:iPTR, GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)  =>  (t2SMLAWT:i32 GPR:i32:$a, GPR:i32:$b, GPR:i32:$acc)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLAWT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // acc
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable26\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable26, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable27[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vbsl,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 608:iPTR, DPR:v8i8:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VBSLd:v8i8 DPR:v8i8:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VBSLd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable27\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable27, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable28[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vbsl,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 608:iPTR, DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VBSLd:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VBSLd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable28\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable28, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable29[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vbsl,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 608:iPTR, DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VBSLd:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VBSLd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable29\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable29, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable30[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vbsl,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 608:iPTR, DPR:v2f32:$src1, DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VBSLd:v2f32 DPR:v2f32:$src1, DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VBSLd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable30\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable30, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable31[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vbsl,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 608:iPTR, DPR:v1i64:$src1, DPR:v1i64:$Vn, DPR:v1i64:$Vm)  =>  (VBSLd:v1i64 DPR:v1i64:$src1, DPR:v1i64:$Vn, DPR:v1i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VBSLd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable31\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable31, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable32[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vbsl,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 608:iPTR, QPR:v16i8:$src1, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VBSLq:v16i8 QPR:v16i8:$src1, QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VBSLq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable32\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable32, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable33[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vbsl,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 608:iPTR, QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VBSLq:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VBSLq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable33\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable33, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable34[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vbsl,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 608:iPTR, QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VBSLq:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VBSLq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable34\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable34, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable35[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vbsl,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 608:iPTR, QPR:v4f32:$src1, QPR:v4f32:$Vn, QPR:v4f32:$Vm)  =>  (VBSLq:v4f32 QPR:v4f32:$src1, QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VBSLq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable35\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable35, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable36[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/5,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vbsl,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/4, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/4, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 608:iPTR, QPR:v2i64:$src1, QPR:v2i64:$Vn, QPR:v2i64:$Vm)  =>  (VBSLq:v2i64 QPR:v2i64:$src1, QPR:v2i64:$Vn, QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VBSLq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/4, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable36\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable36, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable37[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/3, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Dn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_FNEG,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Ddin
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (fma:f64 (fneg:f64 DPR:f64:$Dn), DPR:f64:$Dm, (fneg:f64 DPR:f64:$Ddin))  =>  (VFNMAD:f64 DPR:f64:$Ddin, DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFNMAD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Ddin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable37\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable37, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable38[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/3, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Sn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_FNEG,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Sdin
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (fma:f32 (fneg:f32 SPR:f32:$Sn), SPR:f32:$Sm, (fneg:f32 SPR:f32:$Sdin))  =>  (VFNMAS:f32 SPR:f32:$Sdin, SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFNMAS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Sdin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable38\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable38, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable39[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Dn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Ddin
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f64 (fneg:f64 DPR:f64:$Dn), DPR:f64:$Dm, DPR:f64:$Ddin)  =>  (VFMSD:f64 DPR:f64:$Ddin, DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMSD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Ddin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable39\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable39, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable40[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Sn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sdin
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::SPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f32 (fneg:f32 SPR:f32:$Sn), SPR:f32:$Sm, SPR:f32:$Sdin)  =>  (VFMSS:f32 SPR:f32:$Sdin, SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMSS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Sdin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable40\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable40, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable41[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:v2f32 (fneg:v2f32 DPR:v2f32:$Vn), DPR:v2f32:$Vm, DPR:v2f32:$src1)  =>  (VFMSfd:v2f32 DPR:v2f32:$src1, DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMSfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable41\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable41, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable42[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:v4f32 (fneg:v4f32 QPR:v4f32:$Vn), QPR:v4f32:$Vm, QPR:v4f32:$src1)  =>  (VFMSfq:v4f32 QPR:v4f32:$src1, QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMSfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable42\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable42, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable43[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Dm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Ddin
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f64 DPR:f64:$Dn, (fneg:f64 DPR:f64:$Dm), DPR:f64:$Ddin)  =>  (VFMSD:f64 DPR:f64:$Ddin, DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMSD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Ddin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable43\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable43, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable44[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Sm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sdin
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::SPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f32 SPR:f32:$Sn, (fneg:f32 SPR:f32:$Sm), SPR:f32:$Sdin)  =>  (VFMSS:f32 SPR:f32:$Sdin, SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMSS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Sdin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable44\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable44, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable45[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Ddin
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f64 DPR:f64:$Dn, DPR:f64:$Dm, (fneg:f64 DPR:f64:$Ddin))  =>  (VFNMSD:f64 DPR:f64:$Ddin, DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFNMSD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Ddin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable45\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable45, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable46[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Sdin
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fma:f32 SPR:f32:$Sn, SPR:f32:$Sm, (fneg:f32 SPR:f32:$Sdin))  =>  (VFNMSS:f32 SPR:f32:$Sdin, SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFNMSS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Sdin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable46\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable46, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable47[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Ddin
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (fma:f64 DPR:f64:$Dn, DPR:f64:$Dm, DPR:f64:$Ddin)  =>  (VFMAD:f64 DPR:f64:$Ddin, DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMAD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Ddin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable47\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable47, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable48[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sdin
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::SPRRegClassID,
    // (fma:f32 SPR:f32:$Sn, SPR:f32:$Sm, SPR:f32:$Sdin)  =>  (VFMAS:f32 SPR:f32:$Sdin, SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMAS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Sdin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable48\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable48, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable49[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (fma:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm, DPR:v2f32:$src1)  =>  (VFMAfd:v2f32 DPR:v2f32:$src1, DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMAfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable49\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable49, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable50[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMA,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (fma:v4f32 QPR:v4f32:$Vn, QPR:v4f32:$Vm, QPR:v4f32:$src1)  =>  (VFMAfq:v4f32 QPR:v4f32:$src1, QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMAfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable50\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable50, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable51[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:i32 712:iPTR, (intrinsic_wo_chain:i32 712:iPTR, GPRnopc:i32:$Rm, GPRnopc:i32:$Rm), GPRnopc:i32:$Rn)  =>  (QDADD:i32 GPRnopc:i32:$Rm, GPRnopc:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QDADD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable51\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable51, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable52[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:i32 712:iPTR, (intrinsic_wo_chain:i32 712:iPTR, rGPR:i32:$Rm, rGPR:i32:$Rm), rGPR:i32:$Rn)  =>  (t2QDADD:i32 rGPR:i32:$Rm, rGPR:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QDADD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable52\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable52, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable53[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i16 655:iPTR, (intrinsic_wo_chain:v4i16 663:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm), DPR:v4i16:$src1)  =>  (VQRDMLAHv4i16:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLAHv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable53\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable53, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable54[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v2i32 655:iPTR, (intrinsic_wo_chain:v2i32 663:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm), DPR:v2i32:$src1)  =>  (VQRDMLAHv2i32:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLAHv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable54\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable54, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable55[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v8i16 655:iPTR, (intrinsic_wo_chain:v8i16 663:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm), QPR:v8i16:$src1)  =>  (VQRDMLAHv8i16:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLAHv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable55\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable55, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable56[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i32 655:iPTR, (intrinsic_wo_chain:v4i32 663:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm), QPR:v4i32:$src1)  =>  (VQRDMLAHv4i32:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLAHv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable56\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable56, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable57[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqdmull,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i32 655:iPTR, (intrinsic_wo_chain:v4i32 658:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm), QPR:v4i32:$src1)  =>  (VQDMLALv4i32:v4i32 QPR:v4i32:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMLALv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable57\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable57, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable58[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqdmull,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v2i64 655:iPTR, (intrinsic_wo_chain:v2i64 658:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm), QPR:v2i64:$src1)  =>  (VQDMLALv2i64:v2i64 QPR:v2i64:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMLALv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable58\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable58, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable59[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qsub,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:i32 717:iPTR, GPRnopc:i32:$Rm, (intrinsic_wo_chain:i32 712:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rn))  =>  (QDSUB:i32 GPRnopc:i32:$Rm, GPRnopc:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QDSUB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable59\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable59, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable60[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qsub,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:i32 717:iPTR, rGPR:i32:$Rm, (intrinsic_wo_chain:i32 712:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rn))  =>  (t2QDSUB:i32 rGPR:i32:$Rm, rGPR:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QDSUB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable60\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable60, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable61[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i16 655:iPTR, DPR:v4i16:$src1, (intrinsic_wo_chain:v4i16 663:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm))  =>  (VQRDMLAHv4i16:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLAHv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable61\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable61, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable62[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v2i32 655:iPTR, DPR:v2i32:$src1, (intrinsic_wo_chain:v2i32 663:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm))  =>  (VQRDMLAHv2i32:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLAHv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable62\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable62, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable63[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v8i16 655:iPTR, QPR:v8i16:$src1, (intrinsic_wo_chain:v8i16 663:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm))  =>  (VQRDMLAHv8i16:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLAHv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable63\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable63, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable64[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i32 655:iPTR, QPR:v4i32:$src1, (intrinsic_wo_chain:v4i32 663:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm))  =>  (VQRDMLAHv4i32:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLAHv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable64\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable64, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable65[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i16 675:iPTR, DPR:v4i16:$src1, (intrinsic_wo_chain:v4i16 663:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm))  =>  (VQRDMLSHv4i16:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLSHv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable65\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable65, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable66[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v2i32 675:iPTR, DPR:v2i32:$src1, (intrinsic_wo_chain:v2i32 663:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm))  =>  (VQRDMLSHv2i32:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLSHv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable66\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable66, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable67[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v8i16 675:iPTR, QPR:v8i16:$src1, (intrinsic_wo_chain:v8i16 663:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm))  =>  (VQRDMLSHv8i16:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLSHv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable67\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable67, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable68[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasV8_1a,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i32 675:iPTR, QPR:v4i32:$src1, (intrinsic_wo_chain:v4i32 663:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm))  =>  (VQRDMLSHv4i32:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMLSHv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable68\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable68, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable69[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqdmull,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i32 655:iPTR, QPR:v4i32:$src1, (intrinsic_wo_chain:v4i32 658:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm))  =>  (VQDMLALv4i32:v4i32 QPR:v4i32:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMLALv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable69\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable69, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable70[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqdmull,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v2i64 655:iPTR, QPR:v2i64:$src1, (intrinsic_wo_chain:v2i64 658:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm))  =>  (VQDMLALv2i64:v2i64 QPR:v2i64:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMLALv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable70\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable70, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable71[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqdmull,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v4i32 675:iPTR, QPR:v4i32:$src1, (intrinsic_wo_chain:v4i32 658:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm))  =>  (VQDMLSLv4i32:v4i32 QPR:v4i32:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMLSLv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable71\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable71, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable72[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vqdmull,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:v2i64 675:iPTR, QPR:v2i64:$src1, (intrinsic_wo_chain:v2i64 658:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm))  =>  (VQDMLSLv2i64:v2i64 QPR:v2i64:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMLSLv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable72\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable72, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable73[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:i32 712:iPTR, GPRnopc:i32:$Rn, (intrinsic_wo_chain:i32 712:iPTR, GPRnopc:i32:$Rm, GPRnopc:i32:$Rm))  =>  (QDADD:i32 GPRnopc:i32:$Rm, GPRnopc:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QDADD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable73\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable73, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable74[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/3, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 3
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (intrinsic_wo_chain:i32 712:iPTR, rGPR:i32:$Rn, (intrinsic_wo_chain:i32 712:iPTR, rGPR:i32:$Rm, rGPR:i32:$Rm))  =>  (t2QDADD:i32 rGPR:i32:$Rm, rGPR:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QDADD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable74\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable74, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable75[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qadd8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 714:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (QADD8:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QADD8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable75\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable75, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable76[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qadd16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 713:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (QADD16:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QADD16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable76\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable76, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable77[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qsub16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 718:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (QSUB16:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QSUB16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable77\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable77, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable78[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qsub8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 719:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (QSUB8:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QSUB8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable78\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable78, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable79[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qsub,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 717:iPTR, GPRnopc:i32:$Rm, GPRnopc:i32:$Rn)  =>  (QSUB:i32 GPRnopc:i32:$Rm, GPRnopc:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QSUB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable79\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable79, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable80[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 712:iPTR, GPRnopc:i32:$Rm, GPRnopc:i32:$Rn)  =>  (QADD:i32 GPRnopc:i32:$Rm, GPRnopc:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QADD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable80\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable80, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable81[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqadd16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 781:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UQADD16:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UQADD16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable81\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable81, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable82[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqadd8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 782:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UQADD8:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UQADD8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable82\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable82, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable83[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqsub16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 785:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UQSUB16:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UQSUB16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable83\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable83, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable84[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqsub8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 786:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UQSUB8:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UQSUB8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable84\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable84, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable85[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qasx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 715:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (QASX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QASX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable85\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable85, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable86[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qsax,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 716:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (QSAX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::QSAX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable86\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable86, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable87[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqasx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 783:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UQASX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UQASX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable87\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable87, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable88[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqsax,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 784:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UQSAX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UQSAX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable88\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable88, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable89[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shasx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 727:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (SHASX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHASX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable89\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable89, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable90[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shadd16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 725:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (SHADD16:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHADD16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable90\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable90, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable91[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shadd8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 726:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (SHADD8:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHADD8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable91\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable91, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable92[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shsax,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 728:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (SHSAX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHSAX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable92\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable92, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable93[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shsub16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 729:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (SHSUB16:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHSUB16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable93\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable93, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable94[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shsub8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 730:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (SHSUB8:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHSUB8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable94\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable94, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable95[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhasx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 776:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UHASX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UHASX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable95\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable95, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable96[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhadd16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 774:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UHADD16:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UHADD16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable96\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable96, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable97[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhadd8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 775:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UHADD8:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UHADD8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable97\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable97, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable98[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhsax,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 777:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UHSAX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UHSAX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable98\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable98, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable99[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhsub16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 778:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UHSUB16:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UHSUB16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable99\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable99, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable100[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhsub8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 779:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (UHSUB8:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UHSUB8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable100\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable100, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable101[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_usad8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 787:iPTR, GPR:i32:$Rn, GPR:i32:$Rm)  =>  (USAD8:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::USAD8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable101\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable101, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable102[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32b,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 561:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (CRC32B:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::CRC32B,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable102\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable102, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable103[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32cb,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 562:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (CRC32CB:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::CRC32CB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable103\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable103, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable104[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32h,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 565:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (CRC32H:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::CRC32H,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable104\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable104, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable105[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32ch,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 563:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (CRC32CH:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::CRC32CH,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable105\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable105, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable106[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32w,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 566:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (CRC32W:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::CRC32W,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable106\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable106, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable107[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32cw,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 564:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (CRC32CW:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::CRC32CW,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable107\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable107, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable108[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qadd16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 713:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2QADD16:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QADD16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable108\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable108, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable109[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qadd8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 714:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2QADD8:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QADD8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable109\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable109, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable110[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qasx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 715:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2QASX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QASX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable110\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable110, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable111[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqsub8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 786:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UQSUB8:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UQSUB8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable111\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable111, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable112[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qsax,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 716:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2QSAX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QSAX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable112\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable112, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable113[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qsub16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 718:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2QSUB16:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QSUB16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable113\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable113, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable114[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qsub8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 719:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2QSUB8:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QSUB8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable114\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable114, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable115[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqadd16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 781:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UQADD16:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UQADD16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable115\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable115, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable116[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqadd8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 782:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UQADD8:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UQADD8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable116\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable116, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable117[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqasx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 783:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UQASX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UQASX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable117\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable117, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable118[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqsax,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 784:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UQSAX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UQSAX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable118\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable118, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable119[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uqsub16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 785:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UQSUB16:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UQSUB16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable119\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable119, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable120[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shasx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 727:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SHASX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SHASX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable120\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable120, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable121[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shadd16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 725:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SHADD16:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SHADD16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable121\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable121, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable122[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shadd8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 726:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SHADD8:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SHADD8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable122\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable122, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable123[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shsax,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 728:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SHSAX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SHSAX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable123\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable123, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable124[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shsub16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 729:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SHSUB16:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SHSUB16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable124\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable124, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable125[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_shsub8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 730:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SHSUB8:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SHSUB8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable125\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable125, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable126[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhasx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 776:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UHASX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UHASX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable126\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable126, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable127[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhadd16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 774:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UHADD16:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UHADD16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable127\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable127, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable128[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhadd8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 775:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UHADD8:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UHADD8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable128\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable128, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable129[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhsax,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 777:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UHSAX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UHSAX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable129\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable129, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable130[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhsub16,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 778:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UHSUB16:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UHSUB16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable130\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable130, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable131[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_uhsub8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 779:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UHSUB8:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UHSUB8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable131\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable131, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable132[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_usad8,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 787:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2USAD8:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2USAD8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable132\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable132, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable133[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smuad,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 745:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SMUAD:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMUAD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable133\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable133, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable134[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smuadx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 746:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SMUADX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMUADX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable134\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable134, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable135[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smusd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 753:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SMUSD:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMUSD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable135\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable135, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable136[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smusdx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 754:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SMUSDX:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMUSDX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable136\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable136, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable137[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32b,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 561:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2CRC32B:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2CRC32B,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable137\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable137, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable138[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32cb,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 562:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2CRC32CB:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2CRC32CB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable138\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable138, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable139[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32h,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 565:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2CRC32H:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2CRC32H,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable139\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable139, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable140[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32ch,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 563:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2CRC32CH:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2CRC32CH,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable140\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable140, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable141[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32w,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 566:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2CRC32W:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2CRC32W,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable141\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable141, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable142[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasV8_HasCRC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_crc32cw,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 564:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2CRC32CW:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2CRC32CW,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable142\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable142, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable143[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 624:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VHADDsv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable143\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable143, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable144[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 624:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VHADDsv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable144\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable144, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable145[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 624:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VHADDsv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable145\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable145, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable146[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 624:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VHADDsv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable146\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable146, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable147[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 624:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VHADDsv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable147\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable147, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable148[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 624:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VHADDsv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable148\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable148, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable149[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 625:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VHADDuv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable149\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable149, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable150[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 625:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VHADDuv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable150\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable150, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable151[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 625:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VHADDuv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable151\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable151, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable152[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 625:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VHADDuv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable152\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable152, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable153[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 625:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VHADDuv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable153\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable153, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable154[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 625:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VHADDuv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHADDuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable154\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable154, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable155[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 680:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VRHADDsv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable155\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable155, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable156[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 680:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VRHADDsv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable156\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable156, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable157[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 680:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VRHADDsv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable157\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable157, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable158[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 680:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VRHADDsv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable158\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable158, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable159[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 680:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VRHADDsv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable159\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable159, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable160[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 680:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VRHADDsv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable160\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable160, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable161[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 681:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VRHADDuv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable161\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable161, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable162[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 681:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VRHADDuv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable162\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable162, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable163[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 681:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VRHADDuv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable163\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable163, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable164[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 681:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VRHADDuv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable164\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable164, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable165[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 681:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VRHADDuv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable165\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable165, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable166[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrhaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 681:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VRHADDuv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRHADDuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable166\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable166, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable167[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 655:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VQADDsv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable167\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable167, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable168[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 655:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VQADDsv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable168\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable168, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable169[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 655:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VQADDsv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable169\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable169, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable170[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 655:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VQADDsv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable170\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable170, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable171[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 655:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VQADDsv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable171\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable171, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable172[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 655:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VQADDsv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable172\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable172, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable173[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 655:iPTR, DPR:v1i64:$Vn, DPR:v1i64:$Vm)  =>  (VQADDsv1i64:v1i64 DPR:v1i64:$Vn, DPR:v1i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDsv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable173\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable173, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable174[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqadds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 655:iPTR, QPR:v2i64:$Vn, QPR:v2i64:$Vm)  =>  (VQADDsv2i64:v2i64 QPR:v2i64:$Vn, QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable174\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable174, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable175[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 656:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VQADDuv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable175\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable175, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable176[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 656:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VQADDuv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable176\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable176, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable177[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 656:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VQADDuv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable177\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable177, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable178[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 656:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VQADDuv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable178\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable178, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable179[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 656:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VQADDuv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable179\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable179, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable180[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 656:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VQADDuv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable180\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable180, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable181[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 656:iPTR, DPR:v1i64:$Vn, DPR:v1i64:$Vm)  =>  (VQADDuv1i64:v1i64 DPR:v1i64:$Vn, DPR:v1i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDuv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable181\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable181, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable182[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqaddu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 656:iPTR, QPR:v2i64:$Vn, QPR:v2i64:$Vm)  =>  (VQADDuv2i64:v2i64 QPR:v2i64:$Vn, QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQADDuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable182\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable182, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable183[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vraddhn,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i8 677:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VRADDHNv8i8:v8i8 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRADDHNv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable183\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable183, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable184[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vraddhn,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i16 677:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VRADDHNv4i16:v4i16 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRADDHNv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable184\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable184, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable185[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vraddhn,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i32 677:iPTR, QPR:v2i64:$Vn, QPR:v2i64:$Vm)  =>  (VRADDHNv2i32:v2i32 QPR:v2i64:$Vn, QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRADDHNv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable185\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable185, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable186[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vmulp,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 644:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VMULpd:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULpd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable186\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable186, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable187[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vmulp,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 644:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VMULpq:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULpq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable187\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable187, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable188[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqdmulh,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 657:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VQDMULHv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMULHv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable188\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable188, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable189[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqdmulh,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 657:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VQDMULHv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMULHv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable189\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable189, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable190[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqdmulh,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 657:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VQDMULHv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMULHv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable190\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable190, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable191[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqdmulh,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 657:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VQDMULHv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMULHv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable191\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable191, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable192[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 663:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VQRDMULHv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMULHv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable192\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable192, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable193[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 663:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VQRDMULHv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMULHv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable193\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable193, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable194[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 663:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VQRDMULHv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMULHv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable194\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable194, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable195[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrdmulh,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 663:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VQRDMULHv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRDMULHv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable195\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable195, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable196[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vmullp,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i16 641:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VMULLp8:v8i16 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULLp8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable196\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable196, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable197[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vmullp,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i64 641:iPTR, DPR:v1i64:$Vn, DPR:v1i64:$Vm)  =>  (VMULLp64:v2i64 DPR:v1i64:$Vn, DPR:v1i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULLp64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable197\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable197, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable198[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqdmull,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i32 658:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VQDMULLv4i32:v4i32 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMULLv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable198\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable198, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable199[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqdmull,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i64 658:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VQDMULLv2i64:v2i64 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQDMULLv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable199\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable199, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable200[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 626:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VHSUBsv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable200\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable200, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable201[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 626:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VHSUBsv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable201\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable201, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable202[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 626:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VHSUBsv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable202\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable202, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable203[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 626:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VHSUBsv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable203\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable203, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable204[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 626:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VHSUBsv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable204\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable204, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable205[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 626:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VHSUBsv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable205\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable205, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable206[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 627:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VHSUBuv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable206\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable206, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable207[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 627:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VHSUBuv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable207\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable207, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable208[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 627:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VHSUBuv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable208\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable208, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable209[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 627:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VHSUBuv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable209\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable209, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable210[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 627:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VHSUBuv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable210\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable210, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable211[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vhsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 627:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VHSUBuv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VHSUBuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable211\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable211, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable212[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 675:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VQSUBsv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable212\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable212, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable213[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 675:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VQSUBsv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable213\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable213, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable214[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 675:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VQSUBsv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable214\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable214, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable215[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 675:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VQSUBsv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable215\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable215, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable216[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 675:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VQSUBsv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable216\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable216, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable217[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 675:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VQSUBsv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable217\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable217, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable218[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 675:iPTR, DPR:v1i64:$Vn, DPR:v1i64:$Vm)  =>  (VQSUBsv1i64:v1i64 DPR:v1i64:$Vn, DPR:v1i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBsv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable218\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable218, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable219[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 675:iPTR, QPR:v2i64:$Vn, QPR:v2i64:$Vm)  =>  (VQSUBsv2i64:v2i64 QPR:v2i64:$Vn, QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable219\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable219, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable220[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 676:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VQSUBuv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable220\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable220, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable221[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 676:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VQSUBuv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable221\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable221, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable222[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 676:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VQSUBuv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable222\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable222, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable223[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 676:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VQSUBuv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable223\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable223, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable224[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 676:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VQSUBuv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable224\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable224, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable225[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 676:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VQSUBuv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable225\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable225, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable226[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 676:iPTR, DPR:v1i64:$Vn, DPR:v1i64:$Vm)  =>  (VQSUBuv1i64:v1i64 DPR:v1i64:$Vn, DPR:v1i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBuv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable226\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable226, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable227[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqsubu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 676:iPTR, QPR:v2i64:$Vn, QPR:v2i64:$Vm)  =>  (VQSUBuv2i64:v2i64 QPR:v2i64:$Vn, QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSUBuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable227\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable227, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable228[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsubhn,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i8 693:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VRSUBHNv8i8:v8i8 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSUBHNv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable228\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable228, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable229[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsubhn,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i16 693:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VRSUBHNv4i16:v4i16 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSUBHNv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable229\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable229, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable230[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsubhn,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i32 693:iPTR, QPR:v2i64:$Vn, QPR:v2i64:$Vm)  =>  (VRSUBHNv2i32:v2i32 QPR:v2i64:$Vn, QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSUBHNv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable230\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable230, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable231[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vacge,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 606:iPTR, DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VACGEfd:v2i32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VACGEfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable231\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable231, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable232[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vacge,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 606:iPTR, QPR:v4f32:$Vn, QPR:v4f32:$Vm)  =>  (VACGEfq:v4i32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VACGEfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable232\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable232, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable233[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vacge,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 606:iPTR, DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VACGEhd:v4i16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VACGEhd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable233\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable233, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable234[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vacge,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 606:iPTR, QPR:v8f16:$Vn, QPR:v8f16:$Vm)  =>  (VACGEhq:v8i16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VACGEhq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable234\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable234, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable235[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vacgt,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 607:iPTR, DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VACGTfd:v2i32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VACGTfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable235\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable235, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable236[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vacgt,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 607:iPTR, QPR:v4f32:$Vn, QPR:v4f32:$Vm)  =>  (VACGTfq:v4i32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VACGTfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable236\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable236, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable237[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vacgt,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 607:iPTR, DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VACGThd:v4i16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VACGThd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable237\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable237, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable238[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vacgt,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 607:iPTR, QPR:v8f16:$Vn, QPR:v8f16:$Vm)  =>  (VACGThq:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VACGThq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable238\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable238, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable239[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 603:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VABDsv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable239\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable239, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable240[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 603:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VABDsv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable240\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable240, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable241[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 603:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VABDsv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable241\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable241, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable242[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 603:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VABDsv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable242\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable242, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable243[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 603:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VABDsv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable243\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable243, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable244[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 603:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VABDsv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable244\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable244, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable245[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 604:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VABDuv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable245\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable245, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable246[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 604:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VABDuv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable246\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable246, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable247[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 604:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VABDuv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable247\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable247, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable248[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 604:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VABDuv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable248\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable248, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable249[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 604:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VABDuv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable249\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable249, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable250[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 604:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VABDuv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable250\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable250, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable251[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 603:iPTR, DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VABDfd:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable251\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable251, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable252[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 603:iPTR, QPR:v4f32:$Vn, QPR:v4f32:$Vm)  =>  (VABDfq:v4f32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable252\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable252, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable253[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 603:iPTR, DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VABDhd:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDhd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable253\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable253, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable254[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 603:iPTR, QPR:v8f16:$Vn, QPR:v8f16:$Vm)  =>  (VABDhq:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDhq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable254\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable254, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable255[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadd,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 647:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VPADDi8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDi8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable255\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable255, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable256[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadd,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 647:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VPADDi16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDi16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable256\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable256, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable257[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadd,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 647:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VPADDi32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDi32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable257\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable257, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable258[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadd,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 647:iPTR, DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VPADDf:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable258\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable258, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable259[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadd,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 647:iPTR, DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VPADDh:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable259\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable259, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable260[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadals,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 645:iPTR, DPR:v4i16:$src1, DPR:v8i8:$Vm)  =>  (VPADALsv8i8:v4i16 DPR:v4i16:$src1, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable260\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable260, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable261[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadals,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 645:iPTR, DPR:v2i32:$src1, DPR:v4i16:$Vm)  =>  (VPADALsv4i16:v2i32 DPR:v2i32:$src1, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable261\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable261, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable262[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadals,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 645:iPTR, DPR:v1i64:$src1, DPR:v2i32:$Vm)  =>  (VPADALsv2i32:v1i64 DPR:v1i64:$src1, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable262\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable262, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable263[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadals,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 645:iPTR, QPR:v8i16:$src1, QPR:v16i8:$Vm)  =>  (VPADALsv16i8:v8i16 QPR:v8i16:$src1, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable263\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable263, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable264[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadals,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 645:iPTR, QPR:v4i32:$src1, QPR:v8i16:$Vm)  =>  (VPADALsv8i16:v4i32 QPR:v4i32:$src1, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable264\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable264, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable265[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadals,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 645:iPTR, QPR:v2i64:$src1, QPR:v4i32:$Vm)  =>  (VPADALsv4i32:v2i64 QPR:v2i64:$src1, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable265\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable265, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable266[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadalu,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 646:iPTR, DPR:v4i16:$src1, DPR:v8i8:$Vm)  =>  (VPADALuv8i8:v4i16 DPR:v4i16:$src1, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable266\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable266, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable267[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadalu,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 646:iPTR, DPR:v2i32:$src1, DPR:v4i16:$Vm)  =>  (VPADALuv4i16:v2i32 DPR:v2i32:$src1, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable267\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable267, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable268[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadalu,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 646:iPTR, DPR:v1i64:$src1, DPR:v2i32:$Vm)  =>  (VPADALuv2i32:v1i64 DPR:v1i64:$src1, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable268\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable268, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable269[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadalu,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 646:iPTR, QPR:v8i16:$src1, QPR:v16i8:$Vm)  =>  (VPADALuv16i8:v8i16 QPR:v8i16:$src1, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable269\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable269, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable270[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadalu,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 646:iPTR, QPR:v4i32:$src1, QPR:v8i16:$Vm)  =>  (VPADALuv8i16:v4i32 QPR:v4i32:$src1, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable270\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable270, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable271[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpadalu,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 646:iPTR, QPR:v2i64:$src1, QPR:v4i32:$Vm)  =>  (VPADALuv4i32:v2i64 QPR:v2i64:$src1, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADALuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable271\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable271, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable272[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmaxs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 650:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VPMAXs8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMAXs8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable272\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable272, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable273[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmaxs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 650:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VPMAXs16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMAXs16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable273\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable273, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable274[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmaxs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 650:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VPMAXs32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMAXs32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable274\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable274, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable275[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmaxu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 651:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VPMAXu8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMAXu8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable275\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable275, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable276[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmaxu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 651:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VPMAXu16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMAXu16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable276\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable276, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable277[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmaxu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 651:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VPMAXu32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMAXu32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable277\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable277, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable278[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmaxs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 650:iPTR, DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VPMAXf:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMAXf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable278\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable278, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable279[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmaxs,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 650:iPTR, DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VPMAXh:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMAXh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable279\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable279, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable280[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmins,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 652:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VPMINs8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMINs8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable280\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable280, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable281[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmins,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 652:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VPMINs16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMINs16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable281\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable281, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable282[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmins,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 652:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VPMINs32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMINs32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable282\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable282, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable283[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpminu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 653:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VPMINu8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMINu8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable283\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable283, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable284[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpminu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 653:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VPMINu16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMINu16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable284\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable284, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable285[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpminu,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 653:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VPMINu32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMINu32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable285\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable285, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable286[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmins,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 652:iPTR, DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VPMINf:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMINf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable286\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable286, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable287[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpmins,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 652:iPTR, DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VPMINh:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPMINh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable287\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable287, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable288[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrecps,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 679:iPTR, DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VRECPSfd:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRECPSfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable288\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable288, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable289[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrecps,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 679:iPTR, QPR:v4f32:$Vn, QPR:v4f32:$Vm)  =>  (VRECPSfq:v4f32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRECPSfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable289\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable289, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable290[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrecps,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 679:iPTR, DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VRECPShd:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRECPShd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable290\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable290, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable291[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrecps,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 679:iPTR, QPR:v8f16:$Vn, QPR:v8f16:$Vm)  =>  (VRECPShq:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRECPShq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable291\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable291, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable292[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsqrts,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 692:iPTR, DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VRSQRTSfd:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSQRTSfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable292\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable292, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable293[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsqrts,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 692:iPTR, QPR:v4f32:$Vn, QPR:v4f32:$Vm)  =>  (VRSQRTSfq:v4f32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSQRTSfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable293\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable293, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable294[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsqrts,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 692:iPTR, DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VRSQRTShd:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSQRTShd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable294\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable294, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable295[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsqrts,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 692:iPTR, QPR:v8f16:$Vn, QPR:v8f16:$Vm)  =>  (VRSQRTShq:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSQRTShq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable295\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable295, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable296[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 695:iPTR, DPR:v4i16:$Vm, DPR:v4i16:$Vn)  =>  (VSHLsv4i16:v4i16 DPR:v4i16:$Vm, DPR:v4i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable296\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable296, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable297[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 695:iPTR, DPR:v2i32:$Vm, DPR:v2i32:$Vn)  =>  (VSHLsv2i32:v2i32 DPR:v2i32:$Vm, DPR:v2i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable297\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable297, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable298[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 695:iPTR, QPR:v8i16:$Vm, QPR:v8i16:$Vn)  =>  (VSHLsv8i16:v8i16 QPR:v8i16:$Vm, QPR:v8i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable298\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable298, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable299[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 695:iPTR, QPR:v4i32:$Vm, QPR:v4i32:$Vn)  =>  (VSHLsv4i32:v4i32 QPR:v4i32:$Vm, QPR:v4i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable299\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable299, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable300[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 695:iPTR, DPR:v8i8:$Vm, DPR:v8i8:$Vn)  =>  (VSHLsv8i8:v8i8 DPR:v8i8:$Vm, DPR:v8i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable300\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable300, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable301[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 695:iPTR, QPR:v16i8:$Vm, QPR:v16i8:$Vn)  =>  (VSHLsv16i8:v16i8 QPR:v16i8:$Vm, QPR:v16i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable301\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable301, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable302[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 695:iPTR, DPR:v1i64:$Vm, DPR:v1i64:$Vn)  =>  (VSHLsv1i64:v1i64 DPR:v1i64:$Vm, DPR:v1i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLsv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable302\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable302, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable303[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 695:iPTR, QPR:v2i64:$Vm, QPR:v2i64:$Vn)  =>  (VSHLsv2i64:v2i64 QPR:v2i64:$Vm, QPR:v2i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable303\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable303, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable304[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 696:iPTR, DPR:v4i16:$Vm, DPR:v4i16:$Vn)  =>  (VSHLuv4i16:v4i16 DPR:v4i16:$Vm, DPR:v4i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable304\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable304, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable305[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 696:iPTR, DPR:v2i32:$Vm, DPR:v2i32:$Vn)  =>  (VSHLuv2i32:v2i32 DPR:v2i32:$Vm, DPR:v2i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable305\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable305, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable306[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 696:iPTR, QPR:v8i16:$Vm, QPR:v8i16:$Vn)  =>  (VSHLuv8i16:v8i16 QPR:v8i16:$Vm, QPR:v8i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable306\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable306, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable307[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 696:iPTR, QPR:v4i32:$Vm, QPR:v4i32:$Vn)  =>  (VSHLuv4i32:v4i32 QPR:v4i32:$Vm, QPR:v4i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable307\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable307, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable308[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 696:iPTR, DPR:v8i8:$Vm, DPR:v8i8:$Vn)  =>  (VSHLuv8i8:v8i8 DPR:v8i8:$Vm, DPR:v8i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable308\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable308, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable309[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 696:iPTR, QPR:v16i8:$Vm, QPR:v16i8:$Vn)  =>  (VSHLuv16i8:v16i8 QPR:v16i8:$Vm, QPR:v16i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable309\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable309, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable310[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 696:iPTR, DPR:v1i64:$Vm, DPR:v1i64:$Vn)  =>  (VSHLuv1i64:v1i64 DPR:v1i64:$Vm, DPR:v1i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLuv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable310\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable310, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable311[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 696:iPTR, QPR:v2i64:$Vm, QPR:v2i64:$Vn)  =>  (VSHLuv2i64:v2i64 QPR:v2i64:$Vm, QPR:v2i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSHLuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable311\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable311, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable312[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 689:iPTR, DPR:v4i16:$Vm, DPR:v4i16:$Vn)  =>  (VRSHLsv4i16:v4i16 DPR:v4i16:$Vm, DPR:v4i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable312\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable312, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable313[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 689:iPTR, DPR:v2i32:$Vm, DPR:v2i32:$Vn)  =>  (VRSHLsv2i32:v2i32 DPR:v2i32:$Vm, DPR:v2i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable313\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable313, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable314[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 689:iPTR, QPR:v8i16:$Vm, QPR:v8i16:$Vn)  =>  (VRSHLsv8i16:v8i16 QPR:v8i16:$Vm, QPR:v8i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable314\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable314, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable315[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 689:iPTR, QPR:v4i32:$Vm, QPR:v4i32:$Vn)  =>  (VRSHLsv4i32:v4i32 QPR:v4i32:$Vm, QPR:v4i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable315\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable315, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable316[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 689:iPTR, DPR:v8i8:$Vm, DPR:v8i8:$Vn)  =>  (VRSHLsv8i8:v8i8 DPR:v8i8:$Vm, DPR:v8i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable316\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable316, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable317[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 689:iPTR, QPR:v16i8:$Vm, QPR:v16i8:$Vn)  =>  (VRSHLsv16i8:v16i8 QPR:v16i8:$Vm, QPR:v16i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable317\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable317, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable318[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 689:iPTR, DPR:v1i64:$Vm, DPR:v1i64:$Vn)  =>  (VRSHLsv1i64:v1i64 DPR:v1i64:$Vm, DPR:v1i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLsv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable318\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable318, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable319[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 689:iPTR, QPR:v2i64:$Vm, QPR:v2i64:$Vn)  =>  (VRSHLsv2i64:v2i64 QPR:v2i64:$Vm, QPR:v2i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable319\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable319, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable320[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 690:iPTR, DPR:v4i16:$Vm, DPR:v4i16:$Vn)  =>  (VRSHLuv4i16:v4i16 DPR:v4i16:$Vm, DPR:v4i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable320\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable320, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable321[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 690:iPTR, DPR:v2i32:$Vm, DPR:v2i32:$Vn)  =>  (VRSHLuv2i32:v2i32 DPR:v2i32:$Vm, DPR:v2i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable321\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable321, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable322[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 690:iPTR, QPR:v8i16:$Vm, QPR:v8i16:$Vn)  =>  (VRSHLuv8i16:v8i16 QPR:v8i16:$Vm, QPR:v8i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable322\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable322, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable323[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 690:iPTR, QPR:v4i32:$Vm, QPR:v4i32:$Vn)  =>  (VRSHLuv4i32:v4i32 QPR:v4i32:$Vm, QPR:v4i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable323\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable323, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable324[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 690:iPTR, DPR:v8i8:$Vm, DPR:v8i8:$Vn)  =>  (VRSHLuv8i8:v8i8 DPR:v8i8:$Vm, DPR:v8i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable324\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable324, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable325[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 690:iPTR, QPR:v16i8:$Vm, QPR:v16i8:$Vn)  =>  (VRSHLuv16i8:v16i8 QPR:v16i8:$Vm, QPR:v16i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable325\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable325, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable326[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 690:iPTR, DPR:v1i64:$Vm, DPR:v1i64:$Vn)  =>  (VRSHLuv1i64:v1i64 DPR:v1i64:$Vm, DPR:v1i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLuv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable326\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable326, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable327[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 690:iPTR, QPR:v2i64:$Vm, QPR:v2i64:$Vn)  =>  (VRSHLuv2i64:v2i64 QPR:v2i64:$Vm, QPR:v2i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSHLuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable327\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable327, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable328[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 672:iPTR, DPR:v4i16:$Vm, DPR:v4i16:$Vn)  =>  (VQSHLsv4i16:v4i16 DPR:v4i16:$Vm, DPR:v4i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable328\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable328, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable329[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 672:iPTR, DPR:v2i32:$Vm, DPR:v2i32:$Vn)  =>  (VQSHLsv2i32:v2i32 DPR:v2i32:$Vm, DPR:v2i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable329\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable329, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable330[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 672:iPTR, QPR:v8i16:$Vm, QPR:v8i16:$Vn)  =>  (VQSHLsv8i16:v8i16 QPR:v8i16:$Vm, QPR:v8i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable330\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable330, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable331[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 672:iPTR, QPR:v4i32:$Vm, QPR:v4i32:$Vn)  =>  (VQSHLsv4i32:v4i32 QPR:v4i32:$Vm, QPR:v4i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable331\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable331, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable332[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 672:iPTR, DPR:v8i8:$Vm, DPR:v8i8:$Vn)  =>  (VQSHLsv8i8:v8i8 DPR:v8i8:$Vm, DPR:v8i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable332\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable332, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable333[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 672:iPTR, QPR:v16i8:$Vm, QPR:v16i8:$Vn)  =>  (VQSHLsv16i8:v16i8 QPR:v16i8:$Vm, QPR:v16i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable333\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable333, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable334[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 672:iPTR, DPR:v1i64:$Vm, DPR:v1i64:$Vn)  =>  (VQSHLsv1i64:v1i64 DPR:v1i64:$Vm, DPR:v1i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLsv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable334\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable334, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable335[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 672:iPTR, QPR:v2i64:$Vm, QPR:v2i64:$Vn)  =>  (VQSHLsv2i64:v2i64 QPR:v2i64:$Vm, QPR:v2i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable335\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable335, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable336[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 674:iPTR, DPR:v4i16:$Vm, DPR:v4i16:$Vn)  =>  (VQSHLuv4i16:v4i16 DPR:v4i16:$Vm, DPR:v4i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable336\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable336, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable337[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 674:iPTR, DPR:v2i32:$Vm, DPR:v2i32:$Vn)  =>  (VQSHLuv2i32:v2i32 DPR:v2i32:$Vm, DPR:v2i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable337\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable337, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable338[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 674:iPTR, QPR:v8i16:$Vm, QPR:v8i16:$Vn)  =>  (VQSHLuv8i16:v8i16 QPR:v8i16:$Vm, QPR:v8i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable338\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable338, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable339[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 674:iPTR, QPR:v4i32:$Vm, QPR:v4i32:$Vn)  =>  (VQSHLuv4i32:v4i32 QPR:v4i32:$Vm, QPR:v4i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable339\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable339, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable340[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 674:iPTR, DPR:v8i8:$Vm, DPR:v8i8:$Vn)  =>  (VQSHLuv8i8:v8i8 DPR:v8i8:$Vm, DPR:v8i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable340\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable340, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable341[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 674:iPTR, QPR:v16i8:$Vm, QPR:v16i8:$Vn)  =>  (VQSHLuv16i8:v16i8 QPR:v16i8:$Vm, QPR:v16i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable341\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable341, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable342[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 674:iPTR, DPR:v1i64:$Vm, DPR:v1i64:$Vn)  =>  (VQSHLuv1i64:v1i64 DPR:v1i64:$Vm, DPR:v1i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLuv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable342\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable342, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable343[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 674:iPTR, QPR:v2i64:$Vm, QPR:v2i64:$Vn)  =>  (VQSHLuv2i64:v2i64 QPR:v2i64:$Vm, QPR:v2i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQSHLuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable343\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable343, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable344[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 667:iPTR, DPR:v4i16:$Vm, DPR:v4i16:$Vn)  =>  (VQRSHLsv4i16:v4i16 DPR:v4i16:$Vm, DPR:v4i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable344\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable344, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable345[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 667:iPTR, DPR:v2i32:$Vm, DPR:v2i32:$Vn)  =>  (VQRSHLsv2i32:v2i32 DPR:v2i32:$Vm, DPR:v2i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable345\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable345, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable346[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 667:iPTR, QPR:v8i16:$Vm, QPR:v8i16:$Vn)  =>  (VQRSHLsv8i16:v8i16 QPR:v8i16:$Vm, QPR:v8i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable346\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable346, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable347[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 667:iPTR, QPR:v4i32:$Vm, QPR:v4i32:$Vn)  =>  (VQRSHLsv4i32:v4i32 QPR:v4i32:$Vm, QPR:v4i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable347\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable347, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable348[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 667:iPTR, DPR:v8i8:$Vm, DPR:v8i8:$Vn)  =>  (VQRSHLsv8i8:v8i8 DPR:v8i8:$Vm, DPR:v8i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable348\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable348, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable349[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 667:iPTR, QPR:v16i8:$Vm, QPR:v16i8:$Vn)  =>  (VQRSHLsv16i8:v16i8 QPR:v16i8:$Vm, QPR:v16i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable349\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable349, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable350[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 667:iPTR, DPR:v1i64:$Vm, DPR:v1i64:$Vn)  =>  (VQRSHLsv1i64:v1i64 DPR:v1i64:$Vm, DPR:v1i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLsv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable350\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable350, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable351[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshifts,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 667:iPTR, QPR:v2i64:$Vm, QPR:v2i64:$Vn)  =>  (VQRSHLsv2i64:v2i64 QPR:v2i64:$Vm, QPR:v2i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable351\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable351, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable352[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 668:iPTR, DPR:v4i16:$Vm, DPR:v4i16:$Vn)  =>  (VQRSHLuv4i16:v4i16 DPR:v4i16:$Vm, DPR:v4i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable352\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable352, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable353[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 668:iPTR, DPR:v2i32:$Vm, DPR:v2i32:$Vn)  =>  (VQRSHLuv2i32:v2i32 DPR:v2i32:$Vm, DPR:v2i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable353\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable353, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable354[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 668:iPTR, QPR:v8i16:$Vm, QPR:v8i16:$Vn)  =>  (VQRSHLuv8i16:v8i16 QPR:v8i16:$Vm, QPR:v8i16:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable354\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable354, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable355[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 668:iPTR, QPR:v4i32:$Vm, QPR:v4i32:$Vn)  =>  (VQRSHLuv4i32:v4i32 QPR:v4i32:$Vm, QPR:v4i32:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable355\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable355, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable356[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 668:iPTR, DPR:v8i8:$Vm, DPR:v8i8:$Vn)  =>  (VQRSHLuv8i8:v8i8 DPR:v8i8:$Vm, DPR:v8i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable356\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable356, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable357[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 668:iPTR, QPR:v16i8:$Vm, QPR:v16i8:$Vn)  =>  (VQRSHLuv16i8:v16i8 QPR:v16i8:$Vm, QPR:v16i8:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable357\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable357, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable358[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 668:iPTR, DPR:v1i64:$Vm, DPR:v1i64:$Vn)  =>  (VQRSHLuv1i64:v1i64 DPR:v1i64:$Vm, DPR:v1i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLuv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable358\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable358, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable359[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqrshiftu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 668:iPTR, QPR:v2i64:$Vm, QPR:v2i64:$Vn)  =>  (VQRSHLuv2i64:v2i64 QPR:v2i64:$Vm, QPR:v2i64:$Vn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQRSHLuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable359\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable359, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable360[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_aesd,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 589:iPTR, QPR:v16i8:$src, QPR:v16i8:$Vm)  =>  (AESD:v16i8 QPR:v16i8:$src, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::AESD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable360\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable360, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable361[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_aese,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 590:iPTR, QPR:v16i8:$src, QPR:v16i8:$Vm)  =>  (AESE:v16i8 QPR:v16i8:$src, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::AESE,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable361\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable361, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable362[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_sha1su1,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 598:iPTR, QPR:v4i32:$src, QPR:v4i32:$Vm)  =>  (SHA1SU1:v4i32 QPR:v4i32:$src, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHA1SU1,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable362\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable362, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable363[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_sha256su0,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 601:iPTR, QPR:v4i32:$src, QPR:v4i32:$Vm)  =>  (SHA256SU0:v4i32 QPR:v4i32:$src, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SHA256SU0,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable363\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable363, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable364[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smuad,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 745:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (SMUAD:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMUAD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable364\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable364, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable365[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smuadx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 746:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (SMUADX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMUADX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable365\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable365, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable366[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smusd,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 753:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (SMUSD:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMUSD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable366\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable366, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable367[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smusdx,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRnopcRegClassID,
    // (intrinsic_wo_chain:i32 754:iPTR, GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (SMUSDX:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMUSDX,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable367\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable367, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable368[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smulbb,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 747:iPTR, GPR:i32:$a, GPR:i32:$b)  =>  (SMULBB:i32 GPR:i32:$a, GPR:i32:$b)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMULBB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable368\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable368, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable369[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smulbt,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 748:iPTR, GPR:i32:$a, GPR:i32:$b)  =>  (SMULBT:i32 GPR:i32:$a, GPR:i32:$b)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMULBT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable369\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable369, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable370[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smultb,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 749:iPTR, GPR:i32:$a, GPR:i32:$b)  =>  (SMULTB:i32 GPR:i32:$a, GPR:i32:$b)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMULTB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable370\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable370, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable371[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smultt,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 750:iPTR, GPR:i32:$a, GPR:i32:$b)  =>  (SMULTT:i32 GPR:i32:$a, GPR:i32:$b)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMULTT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable371\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable371, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable372[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smulwb,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 751:iPTR, GPR:i32:$a, GPR:i32:$b)  =>  (SMULWB:i32 GPR:i32:$a, GPR:i32:$b)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMULWB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable372\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable372, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable373[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smulwt,
    // MIs[0] a
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::GPRRegClassID,
    // (intrinsic_wo_chain:i32 752:iPTR, GPR:i32:$a, GPR:i32:$b)  =>  (SMULWT:i32 GPR:i32:$a, GPR:i32:$b)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMULWT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // b
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable373\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable373, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable374[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qadd,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 712:iPTR, rGPR:i32:$Rm, rGPR:i32:$Rn)  =>  (t2QADD:i32 rGPR:i32:$Rm, rGPR:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QADD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable374\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable374, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable375[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_qsub,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 717:iPTR, rGPR:i32:$Rm, rGPR:i32:$Rn)  =>  (t2QSUB:i32 rGPR:i32:$Rm, rGPR:i32:$Rn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2QSUB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable375\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable375, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable376[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smulbb,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 747:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SMULBB:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMULBB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable376\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable376, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable377[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smulbt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 748:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SMULBT:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMULBT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable377\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable377, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable378[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smultb,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 749:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SMULTB:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMULTB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable378\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable378, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable379[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smultt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 750:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SMULTT:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMULTT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable379\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable379, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable380[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smulwb,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 751:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SMULWB:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMULWB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable380\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable380, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable381[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_smulwt,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/3, /*RC*/ARM::rGPRRegClassID,
    // (intrinsic_wo_chain:i32 752:iPTR, rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SMULWT:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMULWT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/3, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable381\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable381, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable382[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 (sext:v8i16 DPR:v8i8:$Vn), (sext:v8i16 DPR:v8i8:$Vm))  =>  (VADDLsv8i16:v8i16 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDLsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable382\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable382, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable383[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 (sext:v4i32 DPR:v4i16:$Vn), (sext:v4i32 DPR:v4i16:$Vm))  =>  (VADDLsv4i32:v4i32 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDLsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable383\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable383, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable384[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 (sext:v2i64 DPR:v2i32:$Vn), (sext:v2i64 DPR:v2i32:$Vm))  =>  (VADDLsv2i64:v2i64 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDLsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable384\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable384, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable385[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 (zext:v8i16 DPR:v8i8:$Vn), (zext:v8i16 DPR:v8i8:$Vm))  =>  (VADDLuv8i16:v8i16 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDLuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable385\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable385, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable386[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 (zext:v4i32 DPR:v4i16:$Vn), (zext:v4i32 DPR:v4i16:$Vm))  =>  (VADDLuv4i32:v4i32 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDLuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable386\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable386, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable387[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 (zext:v2i64 DPR:v2i32:$Vn), (zext:v2i64 DPR:v2i32:$Vm))  =>  (VADDLuv2i64:v2i64 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDLuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable387\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable387, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable388[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:i32 (mul:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm), GPRnopc:i32:$Ra)  =>  (MLA:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPRnopc:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::MLA,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable388\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable388, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable389[] = {
    GIM_CheckFeatures, GIFBS_IsARM_NoV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:i32 (mul:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm), GPRnopc:i32:$Ra)  =>  (MLAv5:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPRnopc:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::MLAv5,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable389\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable389, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable390[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:i32 (mul:i32 rGPR:i32:$Rn, rGPR:i32:$Rm), rGPR:i32:$Ra)  =>  (t2MLA:i32 rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2MLA,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable390\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable390, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable391[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ASHR,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[2] Operand 2
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/2, /*Op*/2, 16,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_ASHR,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[3] Operand 2
    GIM_CheckType, /*MI*/3, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/3, /*Op*/2, 16,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (add:i32 (mul:i32 (sra:i32 GPRnopc:i32:$Rn, 16:i32), (sra:i32 GPRnopc:i32:$Rm, 16:i32)), GPR:i32:$Ra)  =>  (SMLATT:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLATT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable391\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable391, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable392[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ASHR,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[2] Operand 2
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/2, /*Op*/2, 16,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_ASHR,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[3] Operand 2
    GIM_CheckType, /*MI*/3, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/3, /*Op*/2, 16,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (add:i32 (mul:i32 (sra:i32 rGPR:i32:$Rn, 16:i32), (sra:i32 rGPR:i32:$Rm, 16:i32)), rGPR:i32:$Ra)  =>  (t2SMLATT:i32 rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLATT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable392\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable392, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable393[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (sext:v8i16 DPR:v8i8:$Vm), QPR:v8i16:$Vn)  =>  (VADDWsv8i16:v8i16 QPR:v8i16:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable393\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable393, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable394[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (sext:v4i32 DPR:v4i16:$Vm), QPR:v4i32:$Vn)  =>  (VADDWsv4i32:v4i32 QPR:v4i32:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable394\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable394, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable395[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 (sext:v2i64 DPR:v2i32:$Vm), QPR:v2i64:$Vn)  =>  (VADDWsv2i64:v2i64 QPR:v2i64:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable395\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable395, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable396[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (zext:v8i16 DPR:v8i8:$Vm), QPR:v8i16:$Vn)  =>  (VADDWuv8i16:v8i16 QPR:v8i16:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable396\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable396, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable397[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (zext:v4i32 DPR:v4i16:$Vm), QPR:v4i32:$Vn)  =>  (VADDWuv4i32:v4i32 QPR:v4i32:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable397\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable397, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable398[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 (zext:v2i64 DPR:v2i32:$Vm), QPR:v2i64:$Vn)  =>  (VADDWuv2i64:v2i64 QPR:v2i64:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable398\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable398, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable399[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 (mul:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm), DPR:v8i8:$src1)  =>  (VMLAv8i8:v8i8 DPR:v8i8:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable399\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable399, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable400[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 (mul:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm), DPR:v4i16:$src1)  =>  (VMLAv4i16:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable400\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable400, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable401[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 (mul:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm), DPR:v2i32:$src1)  =>  (VMLAv2i32:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable401\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable401, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable402[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 (mul:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm), QPR:v16i8:$src1)  =>  (VMLAv16i8:v16i8 QPR:v16i8:$src1, QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable402\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable402, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable403[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (mul:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm), QPR:v8i16:$src1)  =>  (VMLAv8i16:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable403\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable403, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable404[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (mul:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm), QPR:v4i32:$src1)  =>  (VMLAv4i32:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable404\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable404, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable405[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 (intrinsic_wo_chain:v8i8 603:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm), DPR:v8i8:$src1)  =>  (VABAsv8i8:v8i8 DPR:v8i8:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable405\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable405, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable406[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 (intrinsic_wo_chain:v4i16 603:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm), DPR:v4i16:$src1)  =>  (VABAsv4i16:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable406\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable406, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable407[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 (intrinsic_wo_chain:v2i32 603:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm), DPR:v2i32:$src1)  =>  (VABAsv2i32:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable407\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable407, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable408[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 (intrinsic_wo_chain:v16i8 603:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm), QPR:v16i8:$src1)  =>  (VABAsv16i8:v16i8 QPR:v16i8:$src1, QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable408\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable408, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable409[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (intrinsic_wo_chain:v8i16 603:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm), QPR:v8i16:$src1)  =>  (VABAsv8i16:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable409\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable409, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable410[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (intrinsic_wo_chain:v4i32 603:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm), QPR:v4i32:$src1)  =>  (VABAsv4i32:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable410\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable410, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable411[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 (intrinsic_wo_chain:v8i8 604:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm), DPR:v8i8:$src1)  =>  (VABAuv8i8:v8i8 DPR:v8i8:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable411\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable411, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable412[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 (intrinsic_wo_chain:v4i16 604:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm), DPR:v4i16:$src1)  =>  (VABAuv4i16:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable412\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable412, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable413[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 (intrinsic_wo_chain:v2i32 604:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm), DPR:v2i32:$src1)  =>  (VABAuv2i32:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable413\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable413, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable414[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 (intrinsic_wo_chain:v16i8 604:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm), QPR:v16i8:$src1)  =>  (VABAuv16i8:v16i8 QPR:v16i8:$src1, QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable414\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable414, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable415[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 (intrinsic_wo_chain:v8i16 604:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm), QPR:v8i16:$src1)  =>  (VABAuv8i16:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable415\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable415, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable416[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 (intrinsic_wo_chain:v4i32 604:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm), QPR:v4i32:$src1)  =>  (VABAuv4i32:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable416\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable416, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable417[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 (zext:v8i16 (intrinsic_wo_chain:v8i8 603:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)), QPR:v8i16:$src1)  =>  (VABALsv8i16:v8i16 QPR:v8i16:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable417\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable417, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable418[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 (zext:v4i32 (intrinsic_wo_chain:v4i16 603:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)), QPR:v4i32:$src1)  =>  (VABALsv4i32:v4i32 QPR:v4i32:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable418\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable418, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable419[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 (zext:v2i64 (intrinsic_wo_chain:v2i32 603:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)), QPR:v2i64:$src1)  =>  (VABALsv2i64:v2i64 QPR:v2i64:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable419\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable419, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable420[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 (zext:v8i16 (intrinsic_wo_chain:v8i8 604:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)), QPR:v8i16:$src1)  =>  (VABALuv8i16:v8i16 QPR:v8i16:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable420\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable420, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable421[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 (zext:v4i32 (intrinsic_wo_chain:v4i16 604:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)), QPR:v4i32:$src1)  =>  (VABALuv4i32:v4i32 QPR:v4i32:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable421\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable421, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable422[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 (zext:v2i64 (intrinsic_wo_chain:v2i32 604:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)), QPR:v2i64:$src1)  =>  (VABALuv2i64:v2i64 QPR:v2i64:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable422\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable422, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable423[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ASHR,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[2] Operand 2
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/2, /*Op*/2, 16,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_ASHR,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[3] Operand 2
    GIM_CheckType, /*MI*/3, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/3, /*Op*/2, 16,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (add:i32 GPR:i32:$Ra, (mul:i32 (sra:i32 GPRnopc:i32:$Rn, 16:i32), (sra:i32 GPRnopc:i32:$Rm, 16:i32)))  =>  (SMLATT:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMLATT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable423\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable423, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable424[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/1, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ASHR,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Rn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[2] Operand 2
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/2, /*Op*/2, 16,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_ASHR,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[3] Rm
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/3, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[3] Operand 2
    GIM_CheckType, /*MI*/3, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/3, /*Op*/2, 16,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    // (add:i32 rGPR:i32:$Ra, (mul:i32 (sra:i32 rGPR:i32:$Rn, 16:i32), (sra:i32 rGPR:i32:$Rm, 16:i32)))  =>  (t2SMLATT:i32 rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMLATT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/3, /*OpIdx*/1, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable424\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable424, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable425[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 QPR:v8i16:$Vn, (sext:v8i16 DPR:v8i8:$Vm))  =>  (VADDWsv8i16:v8i16 QPR:v8i16:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable425\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable425, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable426[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 QPR:v4i32:$Vn, (sext:v4i32 DPR:v4i16:$Vm))  =>  (VADDWsv4i32:v4i32 QPR:v4i32:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable426\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable426, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable427[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 QPR:v2i64:$Vn, (sext:v2i64 DPR:v2i32:$Vm))  =>  (VADDWsv2i64:v2i64 QPR:v2i64:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable427\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable427, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable428[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 QPR:v8i16:$Vn, (zext:v8i16 DPR:v8i8:$Vm))  =>  (VADDWuv8i16:v8i16 QPR:v8i16:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable428\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable428, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable429[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 QPR:v4i32:$Vn, (zext:v4i32 DPR:v4i16:$Vm))  =>  (VADDWuv4i32:v4i32 QPR:v4i32:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable429\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable429, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable430[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i64 QPR:v2i64:$Vn, (zext:v2i64 DPR:v2i32:$Vm))  =>  (VADDWuv2i64:v2i64 QPR:v2i64:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDWuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable430\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable430, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable431[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 DPR:v8i8:$src1, (mul:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm))  =>  (VMLAv8i8:v8i8 DPR:v8i8:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable431\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable431, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable432[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 DPR:v4i16:$src1, (mul:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm))  =>  (VMLAv4i16:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable432\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable432, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable433[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 DPR:v2i32:$src1, (mul:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm))  =>  (VMLAv2i32:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable433\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable433, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable434[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 QPR:v16i8:$src1, (mul:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm))  =>  (VMLAv16i8:v16i8 QPR:v16i8:$src1, QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable434\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable434, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable435[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 QPR:v8i16:$src1, (mul:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm))  =>  (VMLAv8i16:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable435\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable435, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable436[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 QPR:v4i32:$src1, (mul:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm))  =>  (VMLAv4i32:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLAv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable436\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable436, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable437[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 DPR:v8i8:$src1, (intrinsic_wo_chain:v8i8 603:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm))  =>  (VABAsv8i8:v8i8 DPR:v8i8:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable437\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable437, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable438[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 DPR:v4i16:$src1, (intrinsic_wo_chain:v4i16 603:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm))  =>  (VABAsv4i16:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable438\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable438, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable439[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 DPR:v2i32:$src1, (intrinsic_wo_chain:v2i32 603:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm))  =>  (VABAsv2i32:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable439\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable439, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable440[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 QPR:v16i8:$src1, (intrinsic_wo_chain:v16i8 603:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm))  =>  (VABAsv16i8:v16i8 QPR:v16i8:$src1, QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable440\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable440, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable441[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 QPR:v8i16:$src1, (intrinsic_wo_chain:v8i16 603:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm))  =>  (VABAsv8i16:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable441\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable441, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable442[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 QPR:v4i32:$src1, (intrinsic_wo_chain:v4i32 603:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm))  =>  (VABAsv4i32:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable442\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable442, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable443[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i8 DPR:v8i8:$src1, (intrinsic_wo_chain:v8i8 604:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm))  =>  (VABAuv8i8:v8i8 DPR:v8i8:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable443\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable443, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable444[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i16 DPR:v4i16:$src1, (intrinsic_wo_chain:v4i16 604:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm))  =>  (VABAuv4i16:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable444\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable444, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable445[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v2i32 DPR:v2i32:$src1, (intrinsic_wo_chain:v2i32 604:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm))  =>  (VABAuv2i32:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable445\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable445, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable446[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v16i8 QPR:v16i8:$src1, (intrinsic_wo_chain:v16i8 604:iPTR, QPR:v16i8:$Vn, QPR:v16i8:$Vm))  =>  (VABAuv16i8:v16i8 QPR:v16i8:$src1, QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable446\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable446, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable447[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v8i16 QPR:v8i16:$src1, (intrinsic_wo_chain:v8i16 604:iPTR, QPR:v8i16:$Vn, QPR:v8i16:$Vm))  =>  (VABAuv8i16:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable447\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable447, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable448[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:v4i32 QPR:v4i32:$src1, (intrinsic_wo_chain:v4i32 604:iPTR, QPR:v4i32:$Vn, QPR:v4i32:$Vm))  =>  (VABAuv4i32:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABAuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable448\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable448, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable449[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 QPR:v8i16:$src1, (zext:v8i16 (intrinsic_wo_chain:v8i8 603:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)))  =>  (VABALsv8i16:v8i16 QPR:v8i16:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable449\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable449, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable450[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 QPR:v4i32:$src1, (zext:v4i32 (intrinsic_wo_chain:v4i16 603:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)))  =>  (VABALsv4i32:v4i32 QPR:v4i32:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable450\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable450, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable451[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 QPR:v2i64:$src1, (zext:v2i64 (intrinsic_wo_chain:v2i32 603:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)))  =>  (VABALsv2i64:v2i64 QPR:v2i64:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable451\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable451, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable452[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v8i16 QPR:v8i16:$src1, (zext:v8i16 (intrinsic_wo_chain:v8i8 604:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm)))  =>  (VABALuv8i16:v8i16 QPR:v8i16:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable452\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable452, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable453[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v4i32 QPR:v4i32:$src1, (zext:v4i32 (intrinsic_wo_chain:v4i16 604:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm)))  =>  (VABALuv4i32:v4i32 QPR:v4i32:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable453\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable453, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable454[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_INTRINSIC,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[2] Operand 1
    GIM_CheckIntrinsicID, /*MI*/2, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[2] Vn
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (add:v2i64 QPR:v2i64:$src1, (zext:v2i64 (intrinsic_wo_chain:v2i32 604:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm)))  =>  (VABALuv2i64:v2i64 QPR:v2i64:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABALuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable454\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable454, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable455[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:i32 GPRnopc:i32:$Ra, (mul:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm))  =>  (MLA:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPRnopc:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::MLA,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable455\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable455, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable456[] = {
    GIM_CheckFeatures, GIFBS_IsARM_NoV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:i32 GPRnopc:i32:$Ra, (mul:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm))  =>  (MLAv5:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm, GPRnopc:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::MLAv5,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable456\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable456, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable457[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (add:i32 rGPR:i32:$Ra, (mul:i32 rGPR:i32:$Rn, rGPR:i32:$Rm))  =>  (t2MLA:i32 rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2MLA,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable457\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable457, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable458[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // (add:i32 GPR:i32:$Rn, GPR:i32:$Rm)  =>  (ADDrr:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::ADDrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable458\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable458, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable459[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (add:i32 GPRnopc:i32:$Rn, rGPR:i32:$Rm)  =>  (t2ADDrr:i32 GPRnopc:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2ADDrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable459\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable459, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable460[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (add:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VADDv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable460\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable460, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable461[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (add:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VADDv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable461\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable461, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable462[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (add:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VADDv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable462\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable462, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable463[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (add:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VADDv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable463\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable463, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable464[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (add:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VADDv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable464\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable464, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable465[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (add:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VADDv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable465\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable465, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable466[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (add:v1i64 DPR:v1i64:$Vn, DPR:v1i64:$Vm)  =>  (VADDv1i64:v1i64 DPR:v1i64:$Vn, DPR:v1i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable466\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable466, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable467[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (add:v2i64 QPR:v2i64:$Vn, QPR:v2i64:$Vm)  =>  (VADDv2i64:v2i64 QPR:v2i64:$Vn, QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable467\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable467, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable468[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ADD,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // (add:i32 rGPR:i32:$Rm, GPRnopc:i32:$Rn)  =>  (t2ADDrr:i32 GPRnopc:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2ADDrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable468\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable468, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable469[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (and:i32 (xor:i32 GPR:i32:$Rm, -1:i32), GPR:i32:$Rn)  =>  (BICrr:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::BICrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable469\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable469, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable470[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (and:i32 (xor:i32 rGPR:i32:$Rm, -1:i32), rGPR:i32:$Rn)  =>  (t2BICrr:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2BICrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable470\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable470, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable471[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (and:i32 GPR:i32:$Rn, (xor:i32 GPR:i32:$Rm, -1:i32))  =>  (BICrr:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::BICrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable471\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable471, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable472[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (and:i32 rGPR:i32:$Rn, (xor:i32 rGPR:i32:$Rm, -1:i32))  =>  (t2BICrr:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2BICrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable472\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable472, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable473[] = {
    GIM_CheckFeatures, GIFBS_IsThumb_IsThumb1Only_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::tGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::tGPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/2, 255,
    // (and:i32 tGPR:i32:$Rm, 255:i32)  =>  (tUXTB:i32 tGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::tUXTB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable473\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable473, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable474[] = {
    GIM_CheckFeatures, GIFBS_IsThumb_IsThumb1Only_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::tGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::tGPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/2, 65535,
    // (and:i32 tGPR:i32:$Rm, 65535:i32)  =>  (tUXTH:i32 tGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::tUXTH,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable474\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable474, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable475[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // (and:i32 GPR:i32:$Rn, GPR:i32:$Rm)  =>  (ANDrr:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::ANDrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable475\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable475, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable476[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (and:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2ANDrr:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2ANDrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable476\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable476, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable477[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (and:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VANDd:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VANDd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable477\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable477, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable478[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_AND,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (and:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VANDq:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VANDq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable478\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable478, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable479[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ASHR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (sra:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2ASRrr:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2ASRrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable479\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable479, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable480[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16_UseFusedMAC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fadd:v4f16 (fmul:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm), DPR:v4f16:$src1)  =>  (VFMAhd:v4f16 DPR:v4f16:$src1, DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMAhd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable480\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable480, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable481[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16_UseFusedMAC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fadd:v8f16 (fmul:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm), QPR:v8f16:$src1)  =>  (VFMAhq:v8f16 QPR:v8f16:$src1, QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMAhq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable481\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable481, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable482[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16_UseFusedMAC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fadd:v4f16 DPR:v4f16:$src1, (fmul:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm))  =>  (VFMAhd:v4f16 DPR:v4f16:$src1, DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMAhd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable482\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable482, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable483[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16_UseFusedMAC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fadd:v8f16 QPR:v8f16:$src1, (fmul:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm))  =>  (VFMAhq:v8f16 QPR:v8f16:$src1, QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMAhq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable483\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable483, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable484[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (fadd:f64 DPR:f64:$Dn, DPR:f64:$Dm)  =>  (VADDD:f64 DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable484\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable484, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable485[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_DontUseNEONForFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // (fadd:f32 SPR:f32:$Sn, SPR:f32:$Sm)  =>  (VADDS:f32 SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable485\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable485, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable486[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (fadd:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VADDfd:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable486\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable486, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable487[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (fadd:v4f32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)  =>  (VADDfq:v4f32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable487\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable487, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable488[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (fadd:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VADDhd:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDhd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable488\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable488, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable489[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FADD,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (fadd:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)  =>  (VADDhq:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VADDhq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable489\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable489, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable490[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FDIV,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (fdiv:f64 DPR:f64:$Dn, DPR:f64:$Dm)  =>  (VDIVD:f64 DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VDIVD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable490\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable490, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable491[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FDIV,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // (fdiv:f32 SPR:f32:$Sn, SPR:f32:$Sm)  =>  (VDIVS:f32 SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VDIVS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable491\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable491, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable492[] = {
    GIM_CheckFeatures, GIFBS_NoHonorSignDependentRounding_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] a
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fmul:f64 (fneg:f64 DPR:f64:$a), DPR:f64:$b)  =>  (VNMULD:f64 DPR:f64:$a, DPR:f64:$b)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNMULD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // b
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable492\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable492, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable493[] = {
    GIM_CheckFeatures, GIFBS_NoHonorSignDependentRounding,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] a
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fmul:f32 (fneg:f32 SPR:f32:$a), SPR:f32:$b)  =>  (VNMULS:f32 SPR:f32:$a, SPR:f32:$b)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNMULS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // b
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable493\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable493, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable494[] = {
    GIM_CheckFeatures, GIFBS_NoHonorSignDependentRounding_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] a
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fmul:f64 DPR:f64:$b, (fneg:f64 DPR:f64:$a))  =>  (VNMULD:f64 DPR:f64:$a, DPR:f64:$b)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNMULD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // b
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable494\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable494, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable495[] = {
    GIM_CheckFeatures, GIFBS_NoHonorSignDependentRounding,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] b
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FNEG,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] a
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fmul:f32 SPR:f32:$b, (fneg:f32 SPR:f32:$a))  =>  (VNMULS:f32 SPR:f32:$a, SPR:f32:$b)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNMULS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // a
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // b
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable495\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable495, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable496[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (fmul:f64 DPR:f64:$Dn, DPR:f64:$Dm)  =>  (VMULD:f64 DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable496\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable496, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable497[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_DontUseNEONForFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // (fmul:f32 SPR:f32:$Sn, SPR:f32:$Sm)  =>  (VMULS:f32 SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable497\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable497, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable498[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (fmul:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VMULfd:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable498\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable498, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable499[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (fmul:v4f32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)  =>  (VMULfq:v4f32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable499\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable499, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable500[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (fmul:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VMULhd:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULhd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable500\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable500, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable501[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FMUL,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (fmul:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)  =>  (VMULhq:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULhq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable501\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable501, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable502[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16_UseFPVMLx_DontUseFusedMAC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fsub:v4f16 DPR:v4f16:$src1, (fmul:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm))  =>  (VMLShd:v4f16 DPR:v4f16:$src1, DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLShd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable502\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable502, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable503[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16_UseFPVMLx_DontUseFusedMAC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fsub:v8f16 QPR:v8f16:$src1, (fmul:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm))  =>  (VMLShq:v8f16 QPR:v8f16:$src1, QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLShq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable503\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable503, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable504[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16_UseFusedMAC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fsub:v4f16 DPR:v4f16:$src1, (fmul:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm))  =>  (VFMShd:v4f16 DPR:v4f16:$src1, DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMShd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable504\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable504, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable505[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16_UseFusedMAC,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fsub:v8f16 QPR:v8f16:$src1, (fmul:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm))  =>  (VFMShq:v8f16 QPR:v8f16:$src1, QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFMShq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable505\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable505, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable506[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (fsub:f64 DPR:f64:$Dn, DPR:f64:$Dm)  =>  (VSUBD:f64 DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable506\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable506, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable507[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_DontUseNEONForFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // (fsub:f32 SPR:f32:$Sn, SPR:f32:$Sm)  =>  (VSUBS:f32 SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable507\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable507, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable508[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (fsub:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)  =>  (VSUBfd:v2f32 DPR:v2f32:$Vn, DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable508\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable508, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable509[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (fsub:v4f32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)  =>  (VSUBfq:v4f32 QPR:v4f32:$Vn, QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable509\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable509, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable510[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (fsub:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)  =>  (VSUBhd:v4f16 DPR:v4f16:$Vn, DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBhd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable510\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable510, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable511[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FSUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (fsub:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)  =>  (VSUBhq:v8f16 QPR:v8f16:$Vn, QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBhq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable511\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable511, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable512[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_vcvtr,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:f32 796:iPTR, DPR:f64:$Dm)  =>  (VTOSIRD:f32 DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VTOSIRD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable512\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable512, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable513[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_DontUseNEONForFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_vcvtr,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // (intrinsic_wo_chain:f32 796:iPTR, SPR:f32:$Sm)  =>  (VTOSIRS:f32 SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VTOSIRS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable513\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable513, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable514[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_vcvtru,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:f32 797:iPTR, DPR:f64:$Dm)  =>  (VTOUIRD:f32 DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VTOUIRD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable514\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable514, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable515[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_DontUseNEONForFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_vcvtru,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // (intrinsic_wo_chain:f32 797:iPTR, SPR:f32:$Sm)  =>  (VTOUIRS:f32 SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VTOUIRS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable515\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable515, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable516[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 648:iPTR, DPR:v8i8:$Vm)  =>  (VPADDLsv8i8:v4i16 DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable516\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable516, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable517[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 648:iPTR, DPR:v4i16:$Vm)  =>  (VPADDLsv4i16:v2i32 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable517\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable517, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable518[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 648:iPTR, DPR:v2i32:$Vm)  =>  (VPADDLsv2i32:v1i64 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable518\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable518, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable519[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 648:iPTR, QPR:v16i8:$Vm)  =>  (VPADDLsv16i8:v8i16 QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLsv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable519\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable519, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable520[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 648:iPTR, QPR:v8i16:$Vm)  =>  (VPADDLsv8i16:v4i32 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable520\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable520, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable521[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 648:iPTR, QPR:v4i32:$Vm)  =>  (VPADDLsv4i32:v2i64 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable521\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable521, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable522[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddlu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 649:iPTR, DPR:v8i8:$Vm)  =>  (VPADDLuv8i8:v4i16 DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable522\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable522, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable523[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddlu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 649:iPTR, DPR:v4i16:$Vm)  =>  (VPADDLuv4i16:v2i32 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable523\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable523, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable524[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddlu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v1i64 649:iPTR, DPR:v2i32:$Vm)  =>  (VPADDLuv2i32:v1i64 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable524\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable524, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable525[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddlu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 649:iPTR, QPR:v16i8:$Vm)  =>  (VPADDLuv16i8:v8i16 QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLuv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable525\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable525, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable526[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddlu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 649:iPTR, QPR:v8i16:$Vm)  =>  (VPADDLuv8i16:v4i32 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable526\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable526, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable527[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vpaddlu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i64 649:iPTR, QPR:v4i32:$Vm)  =>  (VPADDLuv4i32:v2i64 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VPADDLuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable527\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable527, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable528[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrecpe,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 678:iPTR, DPR:v2i32:$Vm)  =>  (VRECPEd:v2i32 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRECPEd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable528\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable528, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable529[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrecpe,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 678:iPTR, QPR:v4i32:$Vm)  =>  (VRECPEq:v4i32 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRECPEq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable529\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable529, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable530[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrecpe,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 678:iPTR, DPR:v2f32:$Vm)  =>  (VRECPEfd:v2f32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRECPEfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable530\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable530, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable531[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrecpe,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 678:iPTR, QPR:v4f32:$Vm)  =>  (VRECPEfq:v4f32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRECPEfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable531\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable531, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable532[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrecpe,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 678:iPTR, DPR:v4f16:$Vm)  =>  (VRECPEhd:v4f16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRECPEhd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable532\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable532, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable533[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrecpe,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 678:iPTR, QPR:v8f16:$Vm)  =>  (VRECPEhq:v8f16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRECPEhq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable533\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable533, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable534[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsqrte,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 691:iPTR, DPR:v2i32:$Vm)  =>  (VRSQRTEd:v2i32 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSQRTEd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable534\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable534, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable535[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsqrte,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 691:iPTR, QPR:v4i32:$Vm)  =>  (VRSQRTEq:v4i32 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSQRTEq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable535\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable535, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable536[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsqrte,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 691:iPTR, DPR:v2f32:$Vm)  =>  (VRSQRTEfd:v2f32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSQRTEfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable536\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable536, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable537[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsqrte,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 691:iPTR, QPR:v4f32:$Vm)  =>  (VRSQRTEfq:v4f32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSQRTEfq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable537\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable537, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable538[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsqrte,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 691:iPTR, DPR:v4f16:$Vm)  =>  (VRSQRTEhd:v4f16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSQRTEhd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable538\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable538, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable539[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrsqrte,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 691:iPTR, QPR:v8f16:$Vm)  =>  (VRSQRTEhq:v8f16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRSQRTEhq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable539\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable539, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable540[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqabs,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 654:iPTR, DPR:v8i8:$Vm)  =>  (VQABSv8i8:v8i8 DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQABSv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable540\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable540, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable541[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqabs,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 654:iPTR, DPR:v4i16:$Vm)  =>  (VQABSv4i16:v4i16 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQABSv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable541\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable541, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable542[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqabs,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 654:iPTR, DPR:v2i32:$Vm)  =>  (VQABSv2i32:v2i32 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQABSv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable542\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable542, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable543[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqabs,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 654:iPTR, QPR:v16i8:$Vm)  =>  (VQABSv16i8:v16i8 QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQABSv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable543\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable543, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable544[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqabs,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 654:iPTR, QPR:v8i16:$Vm)  =>  (VQABSv8i16:v8i16 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQABSv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable544\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable544, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable545[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqabs,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 654:iPTR, QPR:v4i32:$Vm)  =>  (VQABSv4i32:v4i32 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQABSv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable545\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable545, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable546[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqneg,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 662:iPTR, DPR:v8i8:$Vm)  =>  (VQNEGv8i8:v8i8 DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQNEGv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable546\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable546, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable547[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqneg,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 662:iPTR, DPR:v4i16:$Vm)  =>  (VQNEGv4i16:v4i16 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQNEGv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable547\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable547, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable548[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqneg,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 662:iPTR, DPR:v2i32:$Vm)  =>  (VQNEGv2i32:v2i32 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQNEGv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable548\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable548, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable549[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqneg,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 662:iPTR, QPR:v16i8:$Vm)  =>  (VQNEGv16i8:v16i8 QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQNEGv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable549\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable549, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable550[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqneg,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 662:iPTR, QPR:v8i16:$Vm)  =>  (VQNEGv8i16:v8i16 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQNEGv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable550\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable550, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable551[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqneg,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 662:iPTR, QPR:v4i32:$Vm)  =>  (VQNEGv4i32:v4i32 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQNEGv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable551\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable551, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable552[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v8i8 609:iPTR, DPR:v8i8:$Vm)  =>  (VCLSv8i8:v8i8 DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCLSv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable552\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable552, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable553[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 609:iPTR, DPR:v4i16:$Vm)  =>  (VCLSv4i16:v4i16 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCLSv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable553\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable553, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable554[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 609:iPTR, DPR:v2i32:$Vm)  =>  (VCLSv2i32:v2i32 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCLSv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable554\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable554, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable555[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 609:iPTR, QPR:v16i8:$Vm)  =>  (VCLSv16i8:v16i8 QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCLSv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable555\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable555, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable556[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 609:iPTR, QPR:v8i16:$Vm)  =>  (VCLSv8i16:v8i16 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCLSv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable556\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable556, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable557[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcls,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 609:iPTR, QPR:v4i32:$Vm)  =>  (VCLSv4i32:v4i32 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCLSv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable557\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable557, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable558[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqmovns,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i8 659:iPTR, QPR:v8i16:$Vm)  =>  (VQMOVNsv8i8:v8i8 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQMOVNsv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable558\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable558, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable559[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqmovns,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i16 659:iPTR, QPR:v4i32:$Vm)  =>  (VQMOVNsv4i16:v4i16 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQMOVNsv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable559\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable559, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable560[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqmovns,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i32 659:iPTR, QPR:v2i64:$Vm)  =>  (VQMOVNsv2i32:v2i32 QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQMOVNsv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable560\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable560, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable561[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqmovnu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i8 661:iPTR, QPR:v8i16:$Vm)  =>  (VQMOVNuv8i8:v8i8 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQMOVNuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable561\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable561, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable562[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqmovnu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i16 661:iPTR, QPR:v4i32:$Vm)  =>  (VQMOVNuv4i16:v4i16 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQMOVNuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable562\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable562, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable563[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqmovnu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i32 661:iPTR, QPR:v2i64:$Vm)  =>  (VQMOVNuv2i32:v2i32 QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQMOVNuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable563\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable563, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable564[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqmovnsu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i8 660:iPTR, QPR:v8i16:$Vm)  =>  (VQMOVNsuv8i8:v8i8 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQMOVNsuv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable564\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable564, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable565[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqmovnsu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i16 660:iPTR, QPR:v4i32:$Vm)  =>  (VQMOVNsuv4i16:v4i16 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQMOVNsuv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable565\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable565, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable566[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vqmovnsu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v2i32 660:iPTR, QPR:v2i64:$Vm)  =>  (VQMOVNsuv2i32:v2i32 QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VQMOVNsuv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable566\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable566, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable567[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtas,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 610:iPTR, DPR:v2f32:$Vm)  =>  (VCVTANSDf:v2i32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTANSDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable567\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable567, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable568[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtas,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 610:iPTR, QPR:v4f32:$Vm)  =>  (VCVTANSQf:v4i32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTANSQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable568\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable568, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable569[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtau,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 611:iPTR, DPR:v2f32:$Vm)  =>  (VCVTANUDf:v2i32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTANUDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable569\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable569, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable570[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtau,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 611:iPTR, QPR:v4f32:$Vm)  =>  (VCVTANUQf:v4i32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTANUQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable570\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable570, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable571[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtas,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 610:iPTR, DPR:v4f16:$Vm)  =>  (VCVTANSDh:v4i16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTANSDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable571\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable571, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable572[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtas,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 610:iPTR, QPR:v8f16:$Vm)  =>  (VCVTANSQh:v8i16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTANSQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable572\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable572, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable573[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtau,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 611:iPTR, DPR:v4f16:$Vm)  =>  (VCVTANUDh:v4i16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTANUDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable573\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable573, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable574[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtau,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 611:iPTR, QPR:v8f16:$Vm)  =>  (VCVTANUQh:v8i16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTANUQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable574\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable574, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable575[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtns,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 620:iPTR, DPR:v2f32:$Vm)  =>  (VCVTNNSDf:v2i32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTNNSDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable575\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable575, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable576[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtns,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 620:iPTR, QPR:v4f32:$Vm)  =>  (VCVTNNSQf:v4i32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTNNSQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable576\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable576, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable577[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtnu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 621:iPTR, DPR:v2f32:$Vm)  =>  (VCVTNNUDf:v2i32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTNNUDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable577\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable577, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable578[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtnu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 621:iPTR, QPR:v4f32:$Vm)  =>  (VCVTNNUQf:v4i32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTNNUQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable578\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable578, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable579[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtns,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 620:iPTR, DPR:v4f16:$Vm)  =>  (VCVTNNSDh:v4i16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTNNSDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable579\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable579, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable580[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtns,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 620:iPTR, QPR:v8f16:$Vm)  =>  (VCVTNNSQh:v8i16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTNNSQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable580\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable580, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable581[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtnu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 621:iPTR, DPR:v4f16:$Vm)  =>  (VCVTNNUDh:v4i16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTNNUDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable581\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable581, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable582[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtnu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 621:iPTR, QPR:v8f16:$Vm)  =>  (VCVTNNUQh:v8i16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTNNUQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable582\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable582, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable583[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtps,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 622:iPTR, DPR:v2f32:$Vm)  =>  (VCVTPNSDf:v2i32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTPNSDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable583\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable583, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable584[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtps,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 622:iPTR, QPR:v4f32:$Vm)  =>  (VCVTPNSQf:v4i32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTPNSQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable584\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable584, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable585[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtpu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 623:iPTR, DPR:v2f32:$Vm)  =>  (VCVTPNUDf:v2i32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTPNUDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable585\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable585, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable586[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtpu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 623:iPTR, QPR:v4f32:$Vm)  =>  (VCVTPNUQf:v4i32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTPNUQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable586\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable586, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable587[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtps,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 622:iPTR, DPR:v4f16:$Vm)  =>  (VCVTPNSDh:v4i16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTPNSDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable587\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable587, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable588[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtps,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 622:iPTR, QPR:v8f16:$Vm)  =>  (VCVTPNSQh:v8i16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTPNSQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable588\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable588, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable589[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtpu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 623:iPTR, DPR:v4f16:$Vm)  =>  (VCVTPNUDh:v4i16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTPNUDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable589\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable589, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable590[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtpu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 623:iPTR, QPR:v8f16:$Vm)  =>  (VCVTPNUQh:v8i16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTPNUQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable590\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable590, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable591[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtms,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 618:iPTR, DPR:v2f32:$Vm)  =>  (VCVTMNSDf:v2i32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTMNSDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable591\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable591, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable592[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtms,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 618:iPTR, QPR:v4f32:$Vm)  =>  (VCVTMNSQf:v4i32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTMNSQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable592\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable592, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable593[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtmu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2i32 619:iPTR, DPR:v2f32:$Vm)  =>  (VCVTMNUDf:v2i32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTMNUDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable593\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable593, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable594[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtmu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i32 619:iPTR, QPR:v4f32:$Vm)  =>  (VCVTMNUQf:v4i32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTMNUQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable594\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable594, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable595[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtms,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 618:iPTR, DPR:v4f16:$Vm)  =>  (VCVTMNSDh:v4i16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTMNSDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable595\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable595, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable596[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtms,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 618:iPTR, QPR:v8f16:$Vm)  =>  (VCVTMNSQh:v8i16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTMNSQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable596\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable596, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable597[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtmu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4i16 619:iPTR, DPR:v4f16:$Vm)  =>  (VCVTMNUDh:v4i16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTMNUDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable597\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable597, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable598[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtmu,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8i16 619:iPTR, QPR:v8f16:$Vm)  =>  (VCVTMNUQh:v8i16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTMNUQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable598\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable598, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable599[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvtfp2hf,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4i16 614:iPTR, QPR:v4f32:$Vm)  =>  (VCVTf2h:v4i16 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTf2h,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable599\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable599, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable600[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vcvthf2fp,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f32 617:iPTR, DPR:v4i16:$Vm)  =>  (VCVTh2f:v4f32 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTh2f,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable600\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable600, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable601[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintn,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 684:iPTR, DPR:v2f32:$Vm)  =>  (VRINTNNDf:v2f32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTNNDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable601\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable601, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable602[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintn,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 684:iPTR, QPR:v4f32:$Vm)  =>  (VRINTNNQf:v4f32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTNNQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable602\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable602, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable603[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintn,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 684:iPTR, DPR:v4f16:$Vm)  =>  (VRINTNNDh:v4f16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTNNDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable603\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable603, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable604[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintn,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 684:iPTR, QPR:v8f16:$Vm)  =>  (VRINTNNQh:v8f16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTNNQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable604\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable604, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable605[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintx,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 686:iPTR, DPR:v2f32:$Vm)  =>  (VRINTXNDf:v2f32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTXNDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable605\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable605, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable606[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintx,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 686:iPTR, QPR:v4f32:$Vm)  =>  (VRINTXNQf:v4f32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTXNQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable606\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable606, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable607[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintx,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 686:iPTR, DPR:v4f16:$Vm)  =>  (VRINTXNDh:v4f16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTXNDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable607\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable607, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable608[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintx,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 686:iPTR, QPR:v8f16:$Vm)  =>  (VRINTXNQh:v8f16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTXNQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable608\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable608, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable609[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrinta,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 682:iPTR, DPR:v2f32:$Vm)  =>  (VRINTANDf:v2f32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTANDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable609\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable609, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable610[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrinta,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 682:iPTR, QPR:v4f32:$Vm)  =>  (VRINTANQf:v4f32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTANQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable610\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable610, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable611[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrinta,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 682:iPTR, DPR:v4f16:$Vm)  =>  (VRINTANDh:v4f16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTANDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable611\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable611, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable612[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrinta,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 682:iPTR, QPR:v8f16:$Vm)  =>  (VRINTANQh:v8f16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTANQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable612\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable612, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable613[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintz,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 687:iPTR, DPR:v2f32:$Vm)  =>  (VRINTZNDf:v2f32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTZNDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable613\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable613, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable614[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintz,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 687:iPTR, QPR:v4f32:$Vm)  =>  (VRINTZNQf:v4f32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTZNQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable614\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable614, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable615[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintz,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 687:iPTR, DPR:v4f16:$Vm)  =>  (VRINTZNDh:v4f16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTZNDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable615\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable615, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable616[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintz,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 687:iPTR, QPR:v8f16:$Vm)  =>  (VRINTZNQh:v8f16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTZNQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable616\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable616, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable617[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintm,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 683:iPTR, DPR:v2f32:$Vm)  =>  (VRINTMNDf:v2f32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTMNDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable617\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable617, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable618[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintm,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 683:iPTR, QPR:v4f32:$Vm)  =>  (VRINTMNQf:v4f32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTMNQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable618\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable618, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable619[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintm,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 683:iPTR, DPR:v4f16:$Vm)  =>  (VRINTMNDh:v4f16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTMNDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable619\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable619, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable620[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintm,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 683:iPTR, QPR:v8f16:$Vm)  =>  (VRINTMNQh:v8f16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTMNQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable620\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable620, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable621[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintp,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v2f32 685:iPTR, DPR:v2f32:$Vm)  =>  (VRINTPNDf:v2f32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTPNDf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable621\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable621, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable622[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintp,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v4f32 685:iPTR, QPR:v4f32:$Vm)  =>  (VRINTPNQf:v4f32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTPNQf,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable622\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable622, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable623[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintp,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (intrinsic_wo_chain:v4f16 685:iPTR, DPR:v4f16:$Vm)  =>  (VRINTPNDh:v4f16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTPNDh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable623\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable623, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable624[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_vrintp,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v8f16 685:iPTR, QPR:v8f16:$Vm)  =>  (VRINTPNQh:v8f16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTPNQh,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable624\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable624, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable625[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_aesimc,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 591:iPTR, QPR:v16i8:$Vm)  =>  (AESIMC:v16i8 QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::AESIMC,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable625\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable625, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable626[] = {
    GIM_CheckFeatures, GIFBS_HasV8_HasCrypto,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_INTRINSIC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckIntrinsicID, /*MI*/0, /*Op*/1, Intrinsic::arm_neon_aesmc,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (intrinsic_wo_chain:v16i8 592:iPTR, QPR:v16i8:$Vm)  =>  (AESMC:v16i8 QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::AESMC,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable626\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable626, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable627[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_LSHR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (srl:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2LSRrr:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2LSRrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable627\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable627, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable628[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV5TE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ASHR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, 16,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ASHR,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[2] Operand 2
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/2, /*Op*/2, 16,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (mul:i32 (sra:i32 GPR:i32:$Rn, 16:i32), (sra:i32 GPR:i32:$Rm, 16:i32))  =>  (SMULTT:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SMULTT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable628\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable628, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable629[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_HasDSP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ASHR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, 16,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ASHR,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[2] Operand 2
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/2, /*Op*/2, 16,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (mul:i32 (sra:i32 rGPR:i32:$Rn, 16:i32), (sra:i32 rGPR:i32:$Rm, 16:i32))  =>  (t2SMULTT:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SMULTT,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable629\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable629, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable630[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // (mul:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (MUL:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::MUL,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable630\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable630, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable631[] = {
    GIM_CheckFeatures, GIFBS_IsARM_NoV6_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRnopcRegClassID,
    // (mul:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)  =>  (MULv5:i32 GPRnopc:i32:$Rn, GPRnopc:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::MULv5,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable631\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable631, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable632[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (mul:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2MUL:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2MUL,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable632\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable632, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable633[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (mul:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VMULv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable633\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable633, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable634[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (mul:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VMULv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable634\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable634, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable635[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (mul:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VMULv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable635\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable635, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable636[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (mul:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VMULv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable636\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable636, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable637[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (mul:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VMULv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable637\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable637, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable638[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_MUL,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (mul:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VMULv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMULv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable638\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable638, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable639[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/0, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/4, /*MI*/3, /*OpIdx*/1, // MIs[4]
    GIM_CheckNumOperands, /*MI*/4, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ASHR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SHL,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[2] Operand 2
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/2, /*Op*/2, 24,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, 16,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_AND,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[3] Operand 1
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/4, TargetOpcode::G_LSHR,
    // MIs[4] Operand 0
    GIM_CheckType, /*MI*/4, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[4] Rm
    GIM_CheckType, /*MI*/4, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/4, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[4] Operand 2
    GIM_CheckType, /*MI*/4, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/4, /*Op*/2, 8,
    // MIs[3] Operand 2
    GIM_CheckType, /*MI*/3, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/3, /*Op*/2, 255,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    GIM_CheckIsSafeToFold, /*InsnID*/4,
    // (or:i32 (sra:i32 (shl:i32 GPR:i32:$Rm, 24:i32), 16:i32), (and:i32 (srl:i32 GPR:i32:$Rm, 8:i32), 255:i32))  =>  (REVSH:i32 GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::REVSH,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable639\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable639, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable640[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/0, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/4, /*MI*/3, /*OpIdx*/1, // MIs[4]
    GIM_CheckNumOperands, /*MI*/4, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ASHR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SHL,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[2] Operand 2
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/2, /*Op*/2, 24,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, 16,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_AND,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[3] Operand 1
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/4, TargetOpcode::G_LSHR,
    // MIs[4] Operand 0
    GIM_CheckType, /*MI*/4, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[4] Rm
    GIM_CheckType, /*MI*/4, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/4, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[4] Operand 2
    GIM_CheckType, /*MI*/4, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/4, /*Op*/2, 8,
    // MIs[3] Operand 2
    GIM_CheckType, /*MI*/3, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/3, /*Op*/2, 255,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    GIM_CheckIsSafeToFold, /*InsnID*/4,
    // (or:i32 (sra:i32 (shl:i32 rGPR:i32:$Rm, 24:i32), 16:i32), (and:i32 (srl:i32 rGPR:i32:$Rm, 8:i32), 255:i32))  =>  (t2REVSH:i32 rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2REVSH,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable640\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable640, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable641[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/0, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/4, /*MI*/3, /*OpIdx*/1, // MIs[4]
    GIM_CheckNumOperands, /*MI*/4, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_AND,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_LSHR,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[2] Operand 2
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/2, /*Op*/2, 8,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, 255,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_ASHR,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[3] Operand 1
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/4, TargetOpcode::G_SHL,
    // MIs[4] Operand 0
    GIM_CheckType, /*MI*/4, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[4] Rm
    GIM_CheckType, /*MI*/4, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/4, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[4] Operand 2
    GIM_CheckType, /*MI*/4, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/4, /*Op*/2, 24,
    // MIs[3] Operand 2
    GIM_CheckType, /*MI*/3, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/3, /*Op*/2, 16,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    GIM_CheckIsSafeToFold, /*InsnID*/4,
    // (or:i32 (and:i32 (srl:i32 GPR:i32:$Rm, 8:i32), 255:i32), (sra:i32 (shl:i32 GPR:i32:$Rm, 24:i32), 16:i32))  =>  (REVSH:i32 GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::REVSH,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable641\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable641, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable642[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/3, /*MI*/0, /*OpIdx*/2, // MIs[3]
    GIM_CheckNumOperands, /*MI*/3, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/4, /*MI*/3, /*OpIdx*/1, // MIs[4]
    GIM_CheckNumOperands, /*MI*/4, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_AND,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_LSHR,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Rm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[2] Operand 2
    GIM_CheckType, /*MI*/2, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/2, /*Op*/2, 8,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, 255,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/3, TargetOpcode::G_ASHR,
    // MIs[3] Operand 0
    GIM_CheckType, /*MI*/3, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[3] Operand 1
    GIM_CheckType, /*MI*/3, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/4, TargetOpcode::G_SHL,
    // MIs[4] Operand 0
    GIM_CheckType, /*MI*/4, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[4] Rm
    GIM_CheckType, /*MI*/4, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/4, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[4] Operand 2
    GIM_CheckType, /*MI*/4, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/4, /*Op*/2, 24,
    // MIs[3] Operand 2
    GIM_CheckType, /*MI*/3, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/3, /*Op*/2, 16,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    GIM_CheckIsSafeToFold, /*InsnID*/3,
    GIM_CheckIsSafeToFold, /*InsnID*/4,
    // (or:i32 (and:i32 (srl:i32 rGPR:i32:$Rm, 8:i32), 255:i32), (sra:i32 (shl:i32 rGPR:i32:$Rm, 24:i32), 16:i32))  =>  (t2REVSH:i32 rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2REVSH,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable642\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable642, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable643[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (or:i32 (xor:i32 rGPR:i32:$Rm, -1:i32), rGPR:i32:$Rn)  =>  (t2ORNrr:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2ORNrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable643\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable643, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable644[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_XOR,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/1, /*Op*/2, -1,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (or:i32 rGPR:i32:$Rn, (xor:i32 rGPR:i32:$Rm, -1:i32))  =>  (t2ORNrr:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2ORNrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable644\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable644, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable645[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // (or:i32 GPR:i32:$Rn, GPR:i32:$Rm)  =>  (ORRrr:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::ORRrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable645\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable645, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable646[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (or:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2ORRrr:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2ORRrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable646\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable646, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable647[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (or:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VORRd:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VORRd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable647\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable647, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable648[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_OR,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (or:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VORRq:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VORRq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable648\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable648, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable649[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasDivideInARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // (sdiv:i32 GPR:i32:$Rn, GPR:i32:$Rm)  =>  (SDIV:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SDIV,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable649\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable649, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable650[] = {
    GIM_CheckFeatures, GIFBS_HasDivideInThumb_IsThumb_HasV8MBaseline,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (sdiv:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SDIV:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SDIV,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable650\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable650, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable651[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SHL,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (shl:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2LSLrr:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2LSLrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable651\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable651, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable652[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v8i16 (sext:v8i16 DPR:v8i8:$Vn), (sext:v8i16 DPR:v8i8:$Vm))  =>  (VSUBLsv8i16:v8i16 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBLsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable652\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable652, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable653[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v4i32 (sext:v4i32 DPR:v4i16:$Vn), (sext:v4i32 DPR:v4i16:$Vm))  =>  (VSUBLsv4i32:v4i32 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBLsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable653\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable653, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable654[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_SEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v2i64 (sext:v2i64 DPR:v2i32:$Vn), (sext:v2i64 DPR:v2i32:$Vm))  =>  (VSUBLsv2i64:v2i64 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBLsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable654\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable654, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable655[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v8i16 (zext:v8i16 DPR:v8i8:$Vn), (zext:v8i16 DPR:v8i8:$Vm))  =>  (VSUBLuv8i16:v8i16 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBLuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable655\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable655, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable656[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v4i32 (zext:v4i32 DPR:v4i16:$Vn), (zext:v4i32 DPR:v4i16:$Vm))  =>  (VSUBLuv4i32:v4i32 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBLuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable656\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable656, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable657[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/0, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_ZEXT,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[2] Vm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (sub:v2i64 (zext:v2i64 DPR:v2i32:$Vn), (zext:v2i64 DPR:v2i32:$Vm))  =>  (VSUBLuv2i64:v2i64 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBLuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable657\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable657, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable658[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasV6T2_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:i32 GPR:i32:$Ra, (mul:i32 GPR:i32:$Rn, GPR:i32:$Rm))  =>  (MLS:i32 GPR:i32:$Rn, GPR:i32:$Rm, GPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::MLS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable658\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable658, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable659[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2_UseMulOps,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Ra
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Rn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[1] Rm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:i32 rGPR:i32:$Ra, (mul:i32 rGPR:i32:$Rn, rGPR:i32:$Rm))  =>  (t2MLS:i32 rGPR:i32:$Rn, rGPR:i32:$Rm, rGPR:i32:$Ra)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2MLS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Rm
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Ra
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable659\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable659, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable660[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v8i8 DPR:v8i8:$src1, (mul:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm))  =>  (VMLSv8i8:v8i8 DPR:v8i8:$src1, DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLSv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable660\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable660, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable661[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v4i16 DPR:v4i16:$src1, (mul:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm))  =>  (VMLSv4i16:v4i16 DPR:v4i16:$src1, DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLSv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable661\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable661, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable662[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v2i32 DPR:v2i32:$src1, (mul:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm))  =>  (VMLSv2i32:v2i32 DPR:v2i32:$src1, DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLSv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable662\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable662, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable663[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v16s8, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v16i8 QPR:v16i8:$src1, (mul:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm))  =>  (VMLSv16i8:v16i8 QPR:v16i8:$src1, QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLSv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable663\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable663, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable664[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v8i16 QPR:v8i16:$src1, (mul:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm))  =>  (VMLSv8i16:v8i16 QPR:v8i16:$src1, QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLSv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable664\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable664, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable665[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_MUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v4i32 QPR:v4i32:$src1, (mul:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm))  =>  (VMLSv4i32:v4i32 QPR:v4i32:$src1, QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMLSv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src1
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable665\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable665, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable666[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v8i16 QPR:v8i16:$Vn, (sext:v8i16 DPR:v8i8:$Vm))  =>  (VSUBWsv8i16:v8i16 QPR:v8i16:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBWsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable666\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable666, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable667[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v4i32 QPR:v4i32:$Vn, (sext:v4i32 DPR:v4i16:$Vm))  =>  (VSUBWsv4i32:v4i32 QPR:v4i32:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBWsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable667\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable667, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable668[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_SEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v2i64 QPR:v2i64:$Vn, (sext:v2i64 DPR:v2i32:$Vm))  =>  (VSUBWsv2i64:v2i64 QPR:v2i64:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBWsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable668\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable668, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable669[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s16, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v8i16 QPR:v8i16:$Vn, (zext:v8i16 DPR:v8i8:$Vm))  =>  (VSUBWuv8i16:v8i16 QPR:v8i16:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBWuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable669\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable669, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable670[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s32, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v4i32 QPR:v4i32:$Vn, (zext:v4i32 DPR:v4i16:$Vm))  =>  (VSUBWuv4i32:v4i32 QPR:v4i32:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBWuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable670\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable670, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable671[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/2, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_ZEXT,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s64, 
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (sub:v2i64 QPR:v2i64:$Vn, (zext:v2i64 DPR:v2i32:$Vm))  =>  (VSUBWuv2i64:v2i64 QPR:v2i64:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBWuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable671\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable671, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable672[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // (sub:i32 GPR:i32:$Rn, GPR:i32:$Rm)  =>  (SUBrr:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::SUBrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable672\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable672, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable673[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRnopcRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (sub:i32 GPRnopc:i32:$Rn, rGPR:i32:$Rm)  =>  (t2SUBrr:i32 GPRnopc:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2SUBrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable673\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable673, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable674[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (sub:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)  =>  (VSUBv8i8:v8i8 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable674\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable674, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable675[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (sub:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)  =>  (VSUBv4i16:v4i16 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable675\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable675, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable676[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (sub:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VSUBv2i32:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable676\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable676, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable677[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (sub:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)  =>  (VSUBv16i8:v16i8 QPR:v16i8:$Vn, QPR:v16i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBv16i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable677\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable677, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable678[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (sub:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)  =>  (VSUBv8i16:v8i16 QPR:v8i16:$Vn, QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable678\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable678, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable679[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (sub:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VSUBv4i32:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable679\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable679, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable680[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (sub:v1i64 DPR:v1i64:$Vn, DPR:v1i64:$Vm)  =>  (VSUBv1i64:v1i64 DPR:v1i64:$Vn, DPR:v1i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBv1i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable680\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable680, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable681[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SUB,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (sub:v2i64 QPR:v2i64:$Vn, QPR:v2i64:$Vm)  =>  (VSUBv2i64:v2i64 QPR:v2i64:$Vn, QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VSUBv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable681\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable681, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable682[] = {
    GIM_CheckFeatures, GIFBS_IsARM_HasDivideInARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // (udiv:i32 GPR:i32:$Rn, GPR:i32:$Rm)  =>  (UDIV:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::UDIV,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable682\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable682, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable683[] = {
    GIM_CheckFeatures, GIFBS_HasDivideInThumb_IsThumb_HasV8MBaseline,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UDIV,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (udiv:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2UDIV:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2UDIV,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable683\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable683, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable684[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/2, -1,
    // (xor:i32 GPR:i32:$Rm, -1:i32)  =>  (MVNr:i32 GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::MVNr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable684\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable684, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable685[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Operand 2
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckConstantInt, /*MI*/0, /*Op*/2, -1,
    // (xor:i32 rGPR:i32:$Rm, -1:i32)  =>  (t2MVNr:i32 rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2MVNr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable685\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable685, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable686[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::GPRRegClassID,
    // (xor:i32 GPR:i32:$Rn, GPR:i32:$Rm)  =>  (EORrr:i32 GPR:i32:$Rn, GPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::EORrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable686\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable686, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable687[] = {
    GIM_CheckFeatures, GIFBS_IsThumb2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Rd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::rGPRRegClassID,
    // MIs[0] Rm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::rGPRRegClassID,
    // (xor:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)  =>  (t2EORrr:i32 rGPR:i32:$Rn, rGPR:i32:$Rm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2EORrr,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Rm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable687\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable687, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable688[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // (xor:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)  =>  (VEORd:v2i32 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VEORd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable688\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable688, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable689[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_XOR,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/2, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/2, /*RC*/ARM::QPRRegClassID,
    // (xor:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)  =>  (VEORq:v4i32 QPR:v4i32:$Vn, QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VEORq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/2, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable689\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable689, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable690[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ANYEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (anyext:v8i16 DPR:v8i8:$Vm)  =>  (VMOVLuv8i16:v8i16 DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVLuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable690\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable690, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable691[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ANYEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (anyext:v4i32 DPR:v4i16:$Vm)  =>  (VMOVLuv4i32:v4i32 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVLuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable691\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable691, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable692[] = {
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ANYEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (anyext:v2i64 DPR:v2i32:$Vm)  =>  (VMOVLuv2i64:v2i64 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVLuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable692\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable692, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable693[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Rt
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::GPRRegClassID,
    // MIs[0] Sn
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // (bitconvert:i32 SPR:f32:$Sn)  =>  (VMOVRS:i32 SPR:f32:$Sn)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVRS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Rt
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sn
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable693\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable693, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable694[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_UseVMOVSR,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Sn
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Rt
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::GPRRegClassID,
    // (bitconvert:f32 GPR:i32:$Rt)  =>  (VMOVSR:f32 GPR:i32:$Rt)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVSR,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Rt
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable694\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable694, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable695[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v1i64 DPR:v2i32:$src)  =>  (VREV64d32:v1i64 DPR:v2i32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable695\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable695, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable696[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v1i64 DPR:v4i16:$src)  =>  (VREV64d16:v1i64 DPR:v4i16:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable696\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable696, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable697[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v1i64 DPR:v8i8:$src)  =>  (VREV64d8:v1i64 DPR:v8i8:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable697\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable697, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable698[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v1i64 DPR:v2f32:$src)  =>  (VREV64d32:v1i64 DPR:v2f32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable698\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable698, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable699[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v2i32 DPR:v1i64:$src)  =>  (VREV64d32:v2i32 DPR:v1i64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable699\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable699, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable700[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v2i32 DPR:v4i16:$src)  =>  (VREV32d16:v2i32 DPR:v4i16:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32d16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable700\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable700, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable701[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v2i32 DPR:v8i8:$src)  =>  (VREV32d8:v2i32 DPR:v8i8:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32d8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable701\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable701, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable702[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v2i32 DPR:f64:$src)  =>  (VREV64d32:v2i32 DPR:f64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable702\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable702, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable703[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v4i16 DPR:v1i64:$src)  =>  (VREV64d16:v4i16 DPR:v1i64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable703\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable703, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable704[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v4i16 DPR:v2i32:$src)  =>  (VREV32d16:v4i16 DPR:v2i32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32d16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable704\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable704, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable705[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v4i16 DPR:v8i8:$src)  =>  (VREV16d8:v4i16 DPR:v8i8:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV16d8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable705\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable705, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable706[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v4i16 DPR:f64:$src)  =>  (VREV64d16:v4i16 DPR:f64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable706\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable706, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable707[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v4i16 DPR:v2f32:$src)  =>  (VREV32d16:v4i16 DPR:v2f32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32d16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable707\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable707, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable708[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v8i8 DPR:v1i64:$src)  =>  (VREV64d8:v8i8 DPR:v1i64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable708\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable708, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable709[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v8i8 DPR:v2i32:$src)  =>  (VREV32d8:v8i8 DPR:v2i32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32d8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable709\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable709, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable710[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v8i8 DPR:v4i16:$src)  =>  (VREV16d8:v8i8 DPR:v4i16:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV16d8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable710\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable710, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable711[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v8i8 DPR:f64:$src)  =>  (VREV64d8:v8i8 DPR:f64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable711\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable711, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable712[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v8i8 DPR:v2f32:$src)  =>  (VREV32d8:v8i8 DPR:v2f32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32d8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable712\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable712, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable713[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:f64 DPR:v2i32:$src)  =>  (VREV64d32:f64 DPR:v2i32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable713\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable713, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable714[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:f64 DPR:v4i16:$src)  =>  (VREV64d16:f64 DPR:v4i16:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable714\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable714, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable715[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:f64 DPR:v8i8:$src)  =>  (VREV64d8:f64 DPR:v8i8:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable715\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable715, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable716[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:f64 DPR:v2f32:$src)  =>  (VREV64d32:f64 DPR:v2f32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable716\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable716, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable717[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v2f32 DPR:f64:$src)  =>  (VREV64d32:v2f32 DPR:f64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable717\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable717, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable718[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v2f32 DPR:v1i64:$src)  =>  (VREV64d32:v2f32 DPR:v1i64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64d32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable718\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable718, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable719[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v2f32 DPR:v4i16:$src)  =>  (VREV32d16:v2f32 DPR:v4i16:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32d16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable719\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable719, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable720[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (bitconvert:v2f32 DPR:v8i8:$src)  =>  (VREV32d8:v2f32 DPR:v8i8:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32d8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable720\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable720, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable721[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v2i64 QPR:v4i32:$src)  =>  (VREV64q32:v2i64 QPR:v4i32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable721\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable721, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable722[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v2i64 QPR:v8i16:$src)  =>  (VREV64q16:v2i64 QPR:v8i16:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable722\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable722, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable723[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v2i64 QPR:v16i8:$src)  =>  (VREV64q8:v2i64 QPR:v16i8:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable723\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable723, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable724[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v2i64 QPR:v4f32:$src)  =>  (VREV64q32:v2i64 QPR:v4f32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable724\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable724, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable725[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v4i32 QPR:v2i64:$src)  =>  (VREV64q32:v4i32 QPR:v2i64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable725\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable725, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable726[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v4i32 QPR:v8i16:$src)  =>  (VREV32q16:v4i32 QPR:v8i16:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32q16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable726\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable726, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable727[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v4i32 QPR:v16i8:$src)  =>  (VREV32q8:v4i32 QPR:v16i8:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32q8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable727\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable727, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable728[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v4i32 QPR:v2f64:$src)  =>  (VREV64q32:v4i32 QPR:v2f64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable728\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable728, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable729[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v8i16 QPR:v2i64:$src)  =>  (VREV64q16:v8i16 QPR:v2i64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable729\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable729, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable730[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v8i16 QPR:v4i32:$src)  =>  (VREV32q16:v8i16 QPR:v4i32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32q16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable730\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable730, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable731[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v8i16 QPR:v16i8:$src)  =>  (VREV16q8:v8i16 QPR:v16i8:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV16q8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable731\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable731, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable732[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v8i16 QPR:v2f64:$src)  =>  (VREV64q16:v8i16 QPR:v2f64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable732\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable732, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable733[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v8i16 QPR:v4f32:$src)  =>  (VREV32q16:v8i16 QPR:v4f32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32q16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable733\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable733, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable734[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v16i8 QPR:v2i64:$src)  =>  (VREV64q8:v16i8 QPR:v2i64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable734\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable734, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable735[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v16i8 QPR:v4i32:$src)  =>  (VREV32q8:v16i8 QPR:v4i32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32q8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable735\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable735, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable736[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v16i8 QPR:v8i16:$src)  =>  (VREV16q8:v16i8 QPR:v8i16:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV16q8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable736\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable736, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable737[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v16i8 QPR:v2f64:$src)  =>  (VREV64q8:v16i8 QPR:v2f64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable737\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable737, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable738[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v16i8 QPR:v4f32:$src)  =>  (VREV32q8:v16i8 QPR:v4f32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32q8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable738\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable738, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable739[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v4f32 QPR:v2i64:$src)  =>  (VREV64q32:v4f32 QPR:v2i64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable739\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable739, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable740[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v4f32 QPR:v8i16:$src)  =>  (VREV32q16:v4f32 QPR:v8i16:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32q16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable740\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable740, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable741[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v4f32 QPR:v16i8:$src)  =>  (VREV32q8:v4f32 QPR:v16i8:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV32q8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable741\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable741, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable742[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v4f32 QPR:v2f64:$src)  =>  (VREV64q32:v4f32 QPR:v2f64:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable742\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable742, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable743[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v2f64 QPR:v4i32:$src)  =>  (VREV64q32:v2f64 QPR:v4i32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable743\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable743, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable744[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v2f64 QPR:v8i16:$src)  =>  (VREV64q16:v2f64 QPR:v8i16:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable744\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable744, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable745[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v16s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v2f64 QPR:v16i8:$src)  =>  (VREV64q8:v2f64 QPR:v16i8:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable745\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable745, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable746[] = {
    GIM_CheckFeatures, GIFBS_IsBE,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BITCAST,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] src
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (bitconvert:v2f64 QPR:v4f32:$src)  =>  (VREV64q32:v2f64 QPR:v4f32:$src)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VREV64q32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // src
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable746\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable746, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable747[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Dn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Dm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fneg:f64 (fmul:f64 DPR:f64:$Dn, DPR:f64:$Dm))  =>  (VNMULD:f64 DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNMULD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable747\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable747, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable748[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/3,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMUL,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Sn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[1] Sm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fneg:f32 (fmul:f32 SPR:f32:$Sn, SPR:f32:$Sm))  =>  (VNMULS:f32 SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNMULS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable748\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable748, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable749[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMA,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Dn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Dm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Ddin
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fneg:f64 (fma:f64 DPR:f64:$Dn, DPR:f64:$Dm, DPR:f64:$Ddin))  =>  (VFNMAD:f64 DPR:f64:$Ddin, DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFNMAD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Ddin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable749\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable749, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable750[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMA,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Sn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[1] Sm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // MIs[1] Sdin
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::SPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (fneg:f32 (fma:f32 SPR:f32:$Sn, SPR:f32:$Sm, SPR:f32:$Sdin))  =>  (VFNMAS:f32 SPR:f32:$Sdin, SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFNMAS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Sdin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable750\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable750, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable751[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMA,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_FNEG,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Dn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Dm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Ddin
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (fneg:f64 (fma:f64 (fneg:f64 DPR:f64:$Dn), DPR:f64:$Dm, DPR:f64:$Ddin))  =>  (VFNMSD:f64 DPR:f64:$Ddin, DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFNMSD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Ddin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable751\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable751, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable752[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/1, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMA,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Operand 1
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_FNEG,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Sn
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[1] Sm
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::SPRRegClassID,
    // MIs[1] Sdin
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::SPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (fneg:f32 (fma:f32 (fneg:f32 SPR:f32:$Sn), SPR:f32:$Sm, SPR:f32:$Sdin))  =>  (VFNMSS:f32 SPR:f32:$Sdin, SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFNMSS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Sdin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable752\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable752, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable753[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMA,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[1] Dn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s64, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_FNEG,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s64, 
    // MIs[2] Dm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Ddin
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (fneg:f64 (fma:f64 DPR:f64:$Dn, (fneg:f64 DPR:f64:$Dm), DPR:f64:$Ddin))  =>  (VFNMSD:f64 DPR:f64:$Ddin, DPR:f64:$Dn, DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFNMSD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Ddin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Dn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable753\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable753, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable754[] = {
    GIM_CheckFeatures, GIFBS_HasVFP4,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_RecordInsn, /*DefineMI*/2, /*MI*/1, /*OpIdx*/2, // MIs[2]
    GIM_CheckNumOperands, /*MI*/2, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_FMA,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[1] Sn
    GIM_CheckType, /*MI*/1, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[1] Operand 2
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_s32, 
    GIM_CheckOpcode, /*MI*/2, TargetOpcode::G_FNEG,
    // MIs[2] Operand 0
    GIM_CheckType, /*MI*/2, /*Op*/0, /*Type*/GILLT_s32, 
    // MIs[2] Sm
    GIM_CheckType, /*MI*/2, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/2, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // MIs[1] Sdin
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::SPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    GIM_CheckIsSafeToFold, /*InsnID*/2,
    // (fneg:f32 (fma:f32 SPR:f32:$Sn, (fneg:f32 SPR:f32:$Sm), SPR:f32:$Sdin))  =>  (VFNMSS:f32 SPR:f32:$Sdin, SPR:f32:$Sn, SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VFNMSS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Sdin
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/1, // Sn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/2, /*OpIdx*/1, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable754\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable754, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable755[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (fneg:f64 DPR:f64:$Dm)  =>  (VNEGD:f64 DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNEGD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable755\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable755, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable756[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_DontUseNEONForFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // (fneg:f32 SPR:f32:$Sm)  =>  (VNEGS:f32 SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNEGS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable756\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable756, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable757[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (fneg:v2f32 DPR:v2f32:$Vm)  =>  (VNEGfd:v2f32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNEGfd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable757\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable757, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable758[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (fneg:v4f32 QPR:v4f32:$Vm)  =>  (VNEGf32q:v4f32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNEGf32q,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable758\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable758, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable759[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (fneg:v4f16 DPR:v4f16:$Vm)  =>  (VNEGhd:v4f16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNEGhd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable759\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable759, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable760[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FNEG,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (fneg:v8f16 QPR:v8f16:$Vm)  =>  (VNEGhq:v8f16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VNEGhq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable760\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable760, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable761[] = {
    GIM_CheckFeatures, GIFBS_HasVFP2_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPEXT,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // (fpextend:f64 SPR:f32:$Sm)  =>  (VCVTDS:f64 SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTDS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable761\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable761, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable762[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (fp_to_sint:v2i32 DPR:v2f32:$Vm)  =>  (VCVTf2sd:v2i32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTf2sd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable762\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable762, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable763[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (fp_to_sint:v4i32 QPR:v4f32:$Vm)  =>  (VCVTf2sq:v4i32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTf2sq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable763\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable763, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable764[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (fp_to_sint:v4i16 DPR:v4f16:$Vm)  =>  (VCVTh2sd:v4i16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTh2sd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable764\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable764, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable765[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOSI,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (fp_to_sint:v8i16 QPR:v8f16:$Vm)  =>  (VCVTh2sq:v8i16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTh2sq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable765\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable765, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable766[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (fp_to_uint:v2i32 DPR:v2f32:$Vm)  =>  (VCVTf2ud:v2i32 DPR:v2f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTf2ud,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable766\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable766, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable767[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (fp_to_uint:v4i32 QPR:v4f32:$Vm)  =>  (VCVTf2uq:v4i32 QPR:v4f32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTf2uq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable767\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable767, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable768[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (fp_to_uint:v4i16 DPR:v4f16:$Vm)  =>  (VCVTh2ud:v4i16 DPR:v4f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTh2ud,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable768\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable768, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable769[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTOUI,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (fp_to_uint:v8i16 QPR:v8f16:$Vm)  =>  (VCVTh2uq:v8i16 QPR:v8f16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTh2uq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable769\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable769, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable770[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTRUNC,
    // MIs[0] Sd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::SPRRegClassID,
    // MIs[0] Sm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::SPRRegClassID,
    // (ftrunc:f32 SPR:f32:$Sm)  =>  (VRINTZS:f32 SPR:f32:$Sm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTZS,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Sd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Sm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable770\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable770, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable771[] = {
    GIM_CheckFeatures, GIFBS_HasFPARMv8_HasDPVFP,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_FPTRUNC,
    // MIs[0] Dd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Dm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (ftrunc:f64 DPR:f64:$Dm)  =>  (VRINTZD:f64 DPR:f64:$Dm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VRINTZD,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Dd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Dm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable771\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable771, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable772[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (sext:v8i16 DPR:v8i8:$Vm)  =>  (VMOVLsv8i16:v8i16 DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVLsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable772\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable772, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable773[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (sext:v4i32 DPR:v4i16:$Vm)  =>  (VMOVLsv4i32:v4i32 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVLsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable773\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable773, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable774[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (sext:v2i64 DPR:v2i32:$Vm)  =>  (VMOVLsv2i64:v2i64 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVLsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable774\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable774, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable775[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (sint_to_fp:v2f32 DPR:v2i32:$Vm)  =>  (VCVTs2fd:v2f32 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTs2fd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable775\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable775, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable776[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (sint_to_fp:v4f32 QPR:v4i32:$Vm)  =>  (VCVTs2fq:v4f32 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTs2fq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable776\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable776, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable777[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (sint_to_fp:v4f16 DPR:v4i16:$Vm)  =>  (VCVTs2hd:v4f16 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTs2hd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable777\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable777, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable778[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_SITOFP,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (sint_to_fp:v8f16 QPR:v8i16:$Vm)  =>  (VCVTs2hq:v8f16 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTs2hq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable778\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable778, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable779[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_TRUNC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (trunc:v8i8 QPR:v8i16:$Vm)  =>  (VMOVNv8i8:v8i8 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVNv8i8,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable779\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable779, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable780[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_TRUNC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (trunc:v4i16 QPR:v4i32:$Vm)  =>  (VMOVNv4i16:v4i16 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVNv4i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable780\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable780, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable781[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_TRUNC,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (trunc:v2i32 QPR:v2i64:$Vm)  =>  (VMOVNv2i32:v2i32 QPR:v2i64:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVNv2i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable781\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable781, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable782[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (uint_to_fp:v2f32 DPR:v2i32:$Vm)  =>  (VCVTu2fd:v2f32 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTu2fd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable782\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable782, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable783[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (uint_to_fp:v4f32 QPR:v4i32:$Vm)  =>  (VCVTu2fq:v4f32 QPR:v4i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTu2fq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable783\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable783, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable784[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::DPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (uint_to_fp:v4f16 DPR:v4i16:$Vm)  =>  (VCVTu2hd:v4f16 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTu2hd,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable784\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable784, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable785[] = {
    GIM_CheckFeatures, GIFBS_HasNEON_HasFullFP16,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_UITOFP,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::QPRRegClassID,
    // (uint_to_fp:v8f16 QPR:v8i16:$Vm)  =>  (VCVTu2hq:v8f16 QPR:v8i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VCVTu2hq,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable785\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable785, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable786[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v8i16 (intrinsic_wo_chain:v8i8 603:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm))  =>  (VABDLsv8i16:v8i16 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDLsv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable786\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable786, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable787[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v4i32 (intrinsic_wo_chain:v4i16 603:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm))  =>  (VABDLsv4i32:v4i32 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDLsv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable787\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable787, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable788[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabds,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v2i64 (intrinsic_wo_chain:v2i32 603:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm))  =>  (VABDLsv2i64:v2i64 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDLsv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable788\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable788, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable789[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v8s8, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v8i16 (intrinsic_wo_chain:v8i8 604:iPTR, DPR:v8i8:$Vn, DPR:v8i8:$Vm))  =>  (VABDLuv8i16:v8i16 DPR:v8i8:$Vn, DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDLuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable789\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable789, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable790[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v4s16, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v4i32 (intrinsic_wo_chain:v4i16 604:iPTR, DPR:v4i16:$Vn, DPR:v4i16:$Vm))  =>  (VABDLuv4i32:v4i32 DPR:v4i16:$Vn, DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDLuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable790\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable790, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable791[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_RecordInsn, /*DefineMI*/1, /*MI*/0, /*OpIdx*/1, // MIs[1]
    GIM_CheckNumOperands, /*MI*/1, /*Expected*/4,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Operand 1
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckOpcode, /*MI*/1, TargetOpcode::G_INTRINSIC,
    // MIs[1] Operand 0
    GIM_CheckType, /*MI*/1, /*Op*/0, /*Type*/GILLT_v2s32, 
    // MIs[1] Operand 1
    GIM_CheckIntrinsicID, /*MI*/1, /*Op*/1, Intrinsic::arm_neon_vabdu,
    // MIs[1] Vn
    GIM_CheckType, /*MI*/1, /*Op*/2, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/2, /*RC*/ARM::DPRRegClassID,
    // MIs[1] Vm
    GIM_CheckType, /*MI*/1, /*Op*/3, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/1, /*Op*/3, /*RC*/ARM::DPRRegClassID,
    GIM_CheckIsSafeToFold, /*InsnID*/1,
    // (zext:v2i64 (intrinsic_wo_chain:v2i32 604:iPTR, DPR:v2i32:$Vn, DPR:v2i32:$Vm))  =>  (VABDLuv2i64:v2i64 DPR:v2i32:$Vn, DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VABDLuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/2, // Vn
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/1, /*OpIdx*/3, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable791\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable791, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable792[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v8s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v8s8, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (zext:v8i16 DPR:v8i8:$Vm)  =>  (VMOVLuv8i16:v8i16 DPR:v8i8:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVLuv8i16,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable792\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable792, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable793[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v4s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v4s16, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (zext:v4i32 DPR:v4i16:$Vm)  =>  (VMOVLuv4i32:v4i32 DPR:v4i16:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVLuv4i32,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable793\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable793, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable794[] = {
    GIM_CheckFeatures, GIFBS_HasNEON,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/2,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_ZEXT,
    // MIs[0] Vd
    GIM_CheckType, /*MI*/0, /*Op*/0, /*Type*/GILLT_v2s64, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/0, /*RC*/ARM::QPRRegClassID,
    // MIs[0] Vm
    GIM_CheckType, /*MI*/0, /*Op*/1, /*Type*/GILLT_v2s32, 
    GIM_CheckRegBankForClass, /*MI*/0, /*Op*/1, /*RC*/ARM::DPRRegClassID,
    // (zext:v2i64 DPR:v2i32:$Vm)  =>  (VMOVLuv2i64:v2i64 DPR:v2i32:$Vm)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::VMOVLuv2i64,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // Vd
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/1, // Vm
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable794\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable794, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable795[] = {
    GIM_CheckFeatures, GIFBS_IsARM,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/1,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BR,
    // MIs[0] target
    GIM_CheckIsMBB, /*MI*/0, /*Op*/0,
    // (br (bb:Other):$target)  =>  (B (bb:Other):$target)
    GIR_MutateOpcode, /*InsnID*/0, /*RecycleInsnID*/ 0, /*Opcode*/ARM::B,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable795\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable795, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable796[] = {
    GIM_CheckFeatures, GIFBS_IsThumb_IsThumb1Only,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/1,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BR,
    // MIs[0] target
    GIM_CheckIsMBB, /*MI*/0, /*Op*/0,
    // (br (bb:Other):$target)  =>  (tB (bb:Other):$target)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::tB,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // target
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable796\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable796, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  const static int64_t MatchTable797[] = {
    GIM_CheckFeatures, GIFBS_IsThumb_HasV8MBaseline,
    GIM_CheckNumOperands, /*MI*/0, /*Expected*/1,
    GIM_CheckOpcode, /*MI*/0, TargetOpcode::G_BR,
    // MIs[0] target
    GIM_CheckIsMBB, /*MI*/0, /*Op*/0,
    // (br (bb:Other):$target)  =>  (t2B (bb:Other):$target)
    GIR_BuildMI, /*InsnID*/0, /*Opcode*/ARM::t2B,
    GIR_Copy, /*NewInsnID*/0, /*OldInsnID*/0, /*OpIdx*/0, // target
      GIR_AddImm, /*InsnID*/0, /*Imm*/14,
      GIR_AddRegister, /*InsnID*/0, ::zero_reg,
    GIR_MergeMemOperands, /*InsnID*/0,
    GIR_EraseFromParent, /*InsnID*/0,
    GIR_ConstrainSelectedInstOperands, /*InsnID*/0,
    GIR_Done,
  };
  State.MIs.resize(1);
  DEBUG(dbgs() << "Processing MatchTable797\n");
  if (executeMatchTable(*this, OutMIs, State, MatcherInfo, MatchTable797, TII, MRI, TRI, RBI, AvailableFeatures)) {
    return true;
  }

  return false;
}
#endif // ifdef GET_GLOBALISEL_IMPL
#ifdef GET_GLOBALISEL_PREDICATES_DECL
PredicateBitset AvailableModuleFeatures;
mutable PredicateBitset AvailableFunctionFeatures;
PredicateBitset getAvailableFeatures() const {
  return AvailableModuleFeatures | AvailableFunctionFeatures;
}
PredicateBitset
computeAvailableModuleFeatures(const ARMSubtarget *Subtarget) const;
PredicateBitset
computeAvailableFunctionFeatures(const ARMSubtarget *Subtarget,
                                 const MachineFunction *MF) const;
#endif // ifdef GET_GLOBALISEL_PREDICATES_DECL
#ifdef GET_GLOBALISEL_PREDICATES_INIT
AvailableModuleFeatures(computeAvailableModuleFeatures(&STI)),
AvailableFunctionFeatures()
#endif // ifdef GET_GLOBALISEL_PREDICATES_INIT
