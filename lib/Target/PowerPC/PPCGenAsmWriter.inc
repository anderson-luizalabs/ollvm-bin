/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 'd', 'p', 32, 32, 0,
  /* 28 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 's', 'p', 32, 32, 0,
  /* 40 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 57 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 64 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 72 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 79 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 87 */ 'b', 'd', 'z', '+', 32, 0,
  /* 93 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 100 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 113 */ 'b', 'c', 't', 'r', 'l', 10, 9, 'l', 'd', 32, '2', ',', 32, 0,
  /* 127 */ 'b', 'c', 32, '1', '2', ',', 32, 0,
  /* 135 */ 'b', 'c', 'l', 32, '1', '2', ',', 32, 0,
  /* 144 */ 'b', 'c', 'l', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 155 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 167 */ 'b', 'c', 'l', 'r', 32, '1', '2', ',', 32, 0,
  /* 177 */ 'b', 'c', 'c', 't', 'r', 32, '1', '2', ',', 32, 0,
  /* 188 */ 'b', 'c', 32, '4', ',', 32, 0,
  /* 195 */ 'b', 'c', 'l', 32, '4', ',', 32, 0,
  /* 203 */ 'b', 'c', 'l', 'r', 'l', 32, '4', ',', 32, 0,
  /* 213 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '4', ',', 32, 0,
  /* 224 */ 'b', 'c', 'l', 'r', 32, '4', ',', 32, 0,
  /* 233 */ 'b', 'c', 'c', 't', 'r', 32, '4', ',', 32, 0,
  /* 243 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 255 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 263 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 272 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 279 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 287 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 294 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 302 */ 'b', 'd', 'z', '-', 32, 0,
  /* 308 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 315 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', '.', 32, 0,
  /* 325 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 336 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 344 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 355 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 362 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 370 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 379 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 390 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', '.', 32, 0,
  /* 401 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 408 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 415 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', '.', 32, 0,
  /* 426 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 434 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 442 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 450 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 458 */ 'b', 'c', 'd', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 469 */ 'b', 'c', 'd', 'u', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 481 */ 'o', 'r', 'c', '.', 32, 0,
  /* 487 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', '.', 32, 0,
  /* 498 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 505 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 512 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 520 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 529 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 537 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 545 */ 'f', 'c', 't', 'i', 'd', '.', 32, 0,
  /* 553 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 561 */ 's', 'l', 'd', '.', 32, 0,
  /* 567 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 574 */ 't', 'e', 'n', 'd', '.', 32, 0,
  /* 581 */ 's', 'r', 'd', '.', 32, 0,
  /* 587 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', '.', 32, 0,
  /* 598 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', '.', 32, 0,
  /* 609 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', '.', 32, 0,
  /* 620 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 627 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 636 */ 'c', 'n', 't', 't', 'z', 'd', '.', 32, 0,
  /* 645 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 652 */ 'd', 'i', 'v', 'd', 'e', '.', 32, 0,
  /* 660 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 668 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 676 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 685 */ 'f', 'r', 'e', '.', 32, 0,
  /* 691 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 701 */ 'p', 'a', 's', 't', 'e', '.', 32, 0,
  /* 709 */ 'd', 'i', 'v', 'w', 'e', '.', 32, 0,
  /* 717 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 725 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 734 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 741 */ 'm', 't', 'f', 's', 'f', '.', 32, 0,
  /* 749 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 756 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', '.', 32, 0,
  /* 766 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 777 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 785 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 796 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 807 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', '.', 32, 0,
  /* 818 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', 'i', '.', 32, 0,
  /* 830 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', 'i', '.', 32, 0,
  /* 842 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 850 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 861 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 870 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 877 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 886 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 895 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 904 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 913 */ 'm', 't', 'f', 's', 'f', 'i', '.', 32, 0,
  /* 922 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 931 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 940 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 948 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 959 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 968 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 977 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 986 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 995 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1004 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1013 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 1021 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 1030 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 1037 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 1044 */ 't', 'r', 'e', 'c', 'l', 'a', 'i', 'm', '.', 32, 0,
  /* 1055 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 1062 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 1071 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 1079 */ 'b', 'c', 'd', 'c', 'f', 'n', '.', 32, 0,
  /* 1088 */ 'b', 'c', 'd', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1099 */ 'f', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1108 */ 'b', 'c', 'd', 's', 'e', 't', 's', 'g', 'n', '.', 32, 0,
  /* 1120 */ 't', 'b', 'e', 'g', 'i', 'n', '.', 32, 0,
  /* 1129 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 1136 */ 'b', 'c', 'd', 'c', 't', 'n', '.', 32, 0,
  /* 1145 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', '.', 32, 0,
  /* 1157 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 'd', 'p', '.', 32, 0,
  /* 1169 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', '.', 32, 0,
  /* 1181 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', '.', 32, 0,
  /* 1193 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 1203 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 1214 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 1225 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 1236 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 1243 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', '.', 32, 0,
  /* 1255 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 's', 'p', '.', 32, 0,
  /* 1267 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', '.', 32, 0,
  /* 1279 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 1286 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', '.', 32, 0,
  /* 1298 */ 'i', 'c', 'b', 'l', 'q', '.', 32, 0,
  /* 1306 */ 'b', 'c', 'd', 'c', 'f', 's', 'q', '.', 32, 0,
  /* 1316 */ 'b', 'c', 'd', 'c', 't', 's', 'q', '.', 32, 0,
  /* 1326 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 1334 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 1343 */ 'f', 'm', 'r', '.', 32, 0,
  /* 1349 */ 'n', 'o', 'r', '.', 32, 0,
  /* 1355 */ 'x', 'o', 'r', '.', 32, 0,
  /* 1361 */ 'b', 'c', 'd', 's', 'r', '.', 32, 0,
  /* 1369 */ 't', 's', 'r', '.', 32, 0,
  /* 1375 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 1382 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 1390 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1398 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1407 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1417 */ 'b', 'c', 'd', 's', '.', 32, 0,
  /* 1424 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1432 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1441 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1451 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 1460 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 1467 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 1478 */ 'm', 'f', 'f', 's', '.', 32, 0,
  /* 1485 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 1493 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 1501 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 1510 */ 'b', 'c', 'd', 'u', 's', '.', 32, 0,
  /* 1518 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 1528 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 1536 */ 't', 'a', 'b', 'o', 'r', 't', '.', 32, 0,
  /* 1545 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 1553 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 1562 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 1571 */ 'f', 'c', 't', 'i', 'd', 'u', '.', 32, 0,
  /* 1580 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 1588 */ 'd', 'i', 'v', 'd', 'e', 'u', '.', 32, 0,
  /* 1597 */ 'd', 'i', 'v', 'w', 'e', 'u', '.', 32, 0,
  /* 1606 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 1615 */ 'f', 'c', 't', 'i', 'w', 'u', '.', 32, 0,
  /* 1624 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1632 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1639 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1645 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1652 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', '.', 32, 0,
  /* 1662 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1670 */ 'f', 'c', 't', 'i', 'w', '.', 32, 0,
  /* 1678 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1686 */ 's', 'l', 'w', '.', 32, 0,
  /* 1692 */ 's', 'r', 'w', '.', 32, 0,
  /* 1698 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1709 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1717 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1728 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1739 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1746 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', '.', 32, 0,
  /* 1757 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1766 */ 'c', 'n', 't', 't', 'z', 'w', '.', 32, 0,
  /* 1775 */ 's', 't', 'b', 'c', 'x', '.', 32, 0,
  /* 1783 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 1791 */ 's', 't', 'h', 'c', 'x', '.', 32, 0,
  /* 1799 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 1807 */ 't', 'l', 'b', 's', 'x', '.', 32, 0,
  /* 1815 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 1824 */ 'b', 'c', 'd', 'c', 'f', 'z', '.', 32, 0,
  /* 1833 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 1840 */ 'b', 'c', 'd', 'c', 't', 'z', '.', 32, 0,
  /* 1849 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 1859 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 1869 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 1878 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 1886 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 1894 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 1916 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 1938 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 1952 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 1966 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 1980 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 1995 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 2014 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 2031 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 2044 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2057 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2070 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2081 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'a', 32, 0,
  /* 2092 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2105 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2118 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2129 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2142 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2155 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2166 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 2172 */ 'b', 'c', 'a', 32, 0,
  /* 2177 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 32, 0,
  /* 2188 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 'a', 32, 0,
  /* 2199 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 32, 0,
  /* 2210 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 32, 0,
  /* 2220 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 32, 0,
  /* 2231 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 'a', 32, 0,
  /* 2242 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 32, 0,
  /* 2253 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 32, 0,
  /* 2263 */ 'l', 'h', 'a', 32, 0,
  /* 2268 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 32, 0,
  /* 2279 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 'a', 32, 0,
  /* 2290 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 32, 0,
  /* 2301 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 32, 0,
  /* 2311 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 32, 0,
  /* 2322 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 'a', 32, 0,
  /* 2333 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 32, 0,
  /* 2344 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 32, 0,
  /* 2355 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 32, 0,
  /* 2365 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 'a', 32, 0,
  /* 2377 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 'a', 32, 0,
  /* 2388 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 'a', 32, 0,
  /* 2400 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 'a', 32, 0,
  /* 2411 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2424 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2436 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2449 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2461 */ 'b', 'l', 'a', 32, 0,
  /* 2466 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 2472 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 2479 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 2487 */ 'e', 'v', 'm', 'r', 'a', 32, 0,
  /* 2494 */ 'l', 'w', 'a', 32, 0,
  /* 2499 */ 'm', 't', 'v', 's', 'r', 'w', 'a', 32, 0,
  /* 2508 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 'a', 32, 0,
  /* 2519 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2529 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2540 */ 'q', 'v', 'l', 'f', 'd', 'x', 'a', 32, 0,
  /* 2549 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'a', 32, 0,
  /* 2559 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2569 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2580 */ 'q', 'v', 'l', 'f', 's', 'x', 'a', 32, 0,
  /* 2589 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'a', 32, 0,
  /* 2599 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2610 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2622 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2632 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2643 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2654 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2666 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2676 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2687 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 'a', 32, 0,
  /* 2698 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 'a', 32, 0,
  /* 2709 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 2715 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 2722 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 2729 */ 'r', 'f', 'e', 'b', 'b', 32, 0,
  /* 2736 */ 'v', 'c', 'l', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 2746 */ 'v', 'c', 't', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 2756 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', 32, 0,
  /* 2765 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 2773 */ 'x', 'x', 's', 'p', 'l', 't', 'i', 'b', 32, 0,
  /* 2783 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 2791 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 2797 */ 'v', 's', 'l', 'b', 32, 0,
  /* 2803 */ 'v', 'p', 'm', 's', 'u', 'm', 'b', 32, 0,
  /* 2812 */ 'c', 'm', 'p', 'b', 32, 0,
  /* 2818 */ 'c', 'm', 'p', 'e', 'q', 'b', 32, 0,
  /* 2826 */ 'c', 'm', 'p', 'r', 'b', 32, 0,
  /* 2833 */ 'v', 's', 'r', 'b', 32, 0,
  /* 2839 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 2848 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 2856 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 2865 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 2875 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 2884 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 2892 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 2901 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 2911 */ 'e', 'v', 'e', 'x', 't', 's', 'b', 32, 0,
  /* 2920 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 2928 */ 'm', 'f', 't', 'b', 32, 0,
  /* 2934 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 2942 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'b', 32, 0,
  /* 2952 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'b', 32, 0,
  /* 2962 */ 's', 't', 'b', 32, 0,
  /* 2967 */ 'v', 'a', 'b', 's', 'd', 'u', 'b', 32, 0,
  /* 2976 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 2985 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 2993 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 3001 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 3010 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 3020 */ 'q', 'v', 'f', 's', 'u', 'b', 32, 0,
  /* 3028 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 3037 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 3047 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'b', 32, 0,
  /* 3059 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 3069 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 3077 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', 32, 0,
  /* 3087 */ 'v', 'c', 'l', 'z', 'b', 32, 0,
  /* 3094 */ 'v', 'c', 't', 'z', 'b', 32, 0,
  /* 3101 */ 'b', 'c', 32, 0,
  /* 3105 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 3111 */ 'x', 'x', 'l', 'a', 'n', 'd', 'c', 32, 0,
  /* 3120 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 3128 */ 'e', 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 3136 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 3143 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 3150 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 3157 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 3164 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 3172 */ 'x', 's', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3181 */ 'x', 'v', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3190 */ 'x', 'v', 'r', 's', 'p', 'i', 'c', 32, 0,
  /* 3199 */ 'i', 'c', 'b', 'l', 'c', 32, 0,
  /* 3206 */ 'b', 'r', 'i', 'n', 'c', 32, 0,
  /* 3213 */ 's', 'y', 'n', 'c', 32, 0,
  /* 3219 */ 'x', 'x', 'l', 'o', 'r', 'c', 32, 0,
  /* 3227 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 3234 */ 'e', 'v', 'o', 'r', 'c', 32, 0,
  /* 3241 */ 's', 'c', 32, 0,
  /* 3245 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'd', 32, 0,
  /* 3255 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'd', 32, 0,
  /* 3265 */ 'v', 'e', 'x', 't', 's', 'w', '2', 'd', 32, 0,
  /* 3275 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 3288 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'd', 32, 0,
  /* 3300 */ 'v', 's', 'r', 'a', 'd', 32, 0,
  /* 3307 */ 'v', 'g', 'b', 'b', 'd', 32, 0,
  /* 3314 */ 'v', 'p', 'r', 't', 'y', 'b', 'd', 32, 0,
  /* 3323 */ 'q', 'v', 'f', 'a', 'd', 'd', 32, 0,
  /* 3331 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 3340 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3350 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3364 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 32, 0,
  /* 3377 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3387 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3398 */ 'e', 'v', 'l', 'd', 'd', 32, 0,
  /* 3405 */ 'm', 't', 'v', 's', 'r', 'd', 'd', 32, 0,
  /* 3414 */ 'e', 'v', 's', 't', 'd', 'd', 32, 0,
  /* 3422 */ 'l', 'f', 'd', 32, 0,
  /* 3427 */ 's', 't', 'f', 'd', 32, 0,
  /* 3433 */ 'v', 'n', 'e', 'g', 'd', 32, 0,
  /* 3440 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 3447 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 3456 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 32, 0,
  /* 3465 */ 't', 'l', 'b', 'l', 'd', 32, 0,
  /* 3472 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 3479 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 3486 */ 'm', 'f', 'v', 's', 'r', 'l', 'd', 32, 0,
  /* 3495 */ 'v', 'r', 'l', 'd', 32, 0,
  /* 3501 */ 'v', 's', 'l', 'd', 32, 0,
  /* 3507 */ 'v', 'b', 'p', 'e', 'r', 'm', 'd', 32, 0,
  /* 3516 */ 'v', 'p', 'm', 's', 'u', 'm', 'd', 32, 0,
  /* 3525 */ 'x', 'x', 'l', 'a', 'n', 'd', 32, 0,
  /* 3533 */ 'x', 'x', 'l', 'n', 'a', 'n', 'd', 32, 0,
  /* 3542 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 3550 */ 'e', 'v', 'n', 'a', 'n', 'd', 32, 0,
  /* 3558 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 3565 */ 'e', 'v', 'a', 'n', 'd', 32, 0,
  /* 3572 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 3578 */ 'x', 'x', 'b', 'r', 'd', 32, 0,
  /* 3585 */ 'm', 't', 'm', 's', 'r', 'd', 32, 0,
  /* 3593 */ 'm', 'f', 'v', 's', 'r', 'd', 32, 0,
  /* 3601 */ 'm', 't', 'v', 's', 'r', 'd', 32, 0,
  /* 3609 */ 'm', 'o', 'd', 's', 'd', 32, 0,
  /* 3616 */ 'v', 'm', 'i', 'n', 's', 'd', 32, 0,
  /* 3624 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', 32, 0,
  /* 3634 */ 'v', 'm', 'a', 'x', 's', 'd', 32, 0,
  /* 3642 */ 'l', 'x', 's', 'd', 32, 0,
  /* 3648 */ 's', 't', 'x', 's', 'd', 32, 0,
  /* 3655 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'd', 32, 0,
  /* 3666 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 3676 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'd', 32, 0,
  /* 3686 */ 's', 't', 'd', 32, 0,
  /* 3691 */ 'm', 'o', 'd', 'u', 'd', 32, 0,
  /* 3698 */ 'v', 'm', 'i', 'n', 'u', 'd', 32, 0,
  /* 3706 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', 32, 0,
  /* 3716 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', 32, 0,
  /* 3726 */ 'v', 'm', 'a', 'x', 'u', 'd', 32, 0,
  /* 3734 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 3740 */ 'v', 'c', 'l', 'z', 'd', 32, 0,
  /* 3747 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 3755 */ 'v', 'c', 't', 'z', 'd', 32, 0,
  /* 3762 */ 'c', 'n', 't', 't', 'z', 'd', 32, 0,
  /* 3770 */ 'm', 'f', 'b', 'h', 'r', 'b', 'e', 32, 0,
  /* 3779 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 3785 */ 'd', 'i', 'v', 'd', 'e', 32, 0,
  /* 3792 */ 's', 'l', 'b', 'm', 'f', 'e', 'e', 32, 0,
  /* 3801 */ 'w', 'r', 't', 'e', 'e', 32, 0,
  /* 3808 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 3815 */ 'e', 'v', 'l', 'w', 'h', 'e', 32, 0,
  /* 3823 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 32, 0,
  /* 3832 */ 's', 'l', 'b', 'i', 'e', 32, 0,
  /* 3839 */ 't', 'l', 'b', 'i', 'e', 32, 0,
  /* 3846 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 3853 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 3861 */ 't', 'l', 'b', 'r', 'e', 32, 0,
  /* 3868 */ 'q', 'v', 'f', 'r', 'e', 32, 0,
  /* 3875 */ 's', 'l', 'b', 'm', 't', 'e', 32, 0,
  /* 3883 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 3894 */ 'p', 'a', 's', 't', 'e', 32, 0,
  /* 3901 */ 't', 'l', 'b', 'w', 'e', 32, 0,
  /* 3908 */ 'd', 'i', 'v', 'w', 'e', 32, 0,
  /* 3915 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 32, 0,
  /* 3924 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 3931 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 3939 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 3945 */ 's', 'u', 'b', 'f', 32, 0,
  /* 3951 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 32, 0,
  /* 3961 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 32, 0,
  /* 3971 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 32, 0,
  /* 3981 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 32, 0,
  /* 3990 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 3996 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 4004 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 4012 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 4019 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 4026 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 32, 0,
  /* 4036 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 32, 0,
  /* 4046 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 32, 0,
  /* 4056 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 32, 0,
  /* 4065 */ 's', 'l', 'b', 'i', 'e', 'g', 32, 0,
  /* 4073 */ 'q', 'v', 'f', 'n', 'e', 'g', 32, 0,
  /* 4081 */ 'e', 'v', 'n', 'e', 'g', 32, 0,
  /* 4088 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 4095 */ 'e', 'v', 'l', 'd', 'h', 32, 0,
  /* 4102 */ 'e', 'v', 's', 't', 'd', 'h', 32, 0,
  /* 4110 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', 32, 0,
  /* 4119 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 4127 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 4135 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 4141 */ 'v', 's', 'l', 'h', 32, 0,
  /* 4147 */ 'v', 'p', 'm', 's', 'u', 'm', 'h', 32, 0,
  /* 4156 */ 'x', 'x', 'b', 'r', 'h', 32, 0,
  /* 4163 */ 'v', 's', 'r', 'h', 32, 0,
  /* 4169 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 4178 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 4186 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 4195 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 4205 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 4214 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 4222 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 4231 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 4241 */ 'e', 'v', 'e', 'x', 't', 's', 'h', 32, 0,
  /* 4250 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 4258 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 4266 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'h', 32, 0,
  /* 4276 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'h', 32, 0,
  /* 4286 */ 's', 't', 'h', 32, 0,
  /* 4291 */ 'v', 'a', 'b', 's', 'd', 'u', 'h', 32, 0,
  /* 4300 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 4309 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 4317 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 4325 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 4334 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 4344 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'h', 32, 0,
  /* 4356 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 4366 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 4374 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', 32, 0,
  /* 4384 */ 'v', 'c', 'l', 'z', 'h', 32, 0,
  /* 4391 */ 'v', 'c', 't', 'z', 'h', 32, 0,
  /* 4398 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 4404 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 4410 */ 's', 'u', 'b', 'i', 32, 0,
  /* 4416 */ 'd', 'c', 'c', 'c', 'i', 32, 0,
  /* 4423 */ 'i', 'c', 'c', 'c', 'i', 32, 0,
  /* 4430 */ 'q', 'v', 'g', 'p', 'c', 'i', 32, 0,
  /* 4438 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 4445 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 4451 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 4459 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 4469 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 4477 */ 'x', 'x', 'p', 'e', 'r', 'm', 'd', 'i', 32, 0,
  /* 4487 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 4494 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 4502 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 4510 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 4518 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 4526 */ 't', 'd', 'i', 32, 0,
  /* 4531 */ 'w', 'r', 't', 'e', 'e', 'i', 32, 0,
  /* 4539 */ 'm', 't', 'f', 's', 'f', 'i', 32, 0,
  /* 4547 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'f', 'i', 32, 0,
  /* 4558 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 32, 0,
  /* 4569 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 'h', 'i', 32, 0,
  /* 4582 */ 't', 'l', 'b', 'l', 'i', 32, 0,
  /* 4589 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 4596 */ 'v', 'r', 'l', 'd', 'm', 'i', 32, 0,
  /* 4604 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 4612 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 4620 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 32, 0,
  /* 4630 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 32, 0,
  /* 4640 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 32, 0,
  /* 4650 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 32, 0,
  /* 4659 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 32, 0,
  /* 4669 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 32, 0,
  /* 4679 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 32, 0,
  /* 4689 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 32, 0,
  /* 4699 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 32, 0,
  /* 4708 */ 'v', 'r', 'l', 'w', 'm', 'i', 32, 0,
  /* 4716 */ 'q', 'v', 'a', 'l', 'i', 'g', 'n', 'i', 32, 0,
  /* 4726 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 4734 */ 'x', 's', 'r', 'd', 'p', 'i', 32, 0,
  /* 4742 */ 'x', 'v', 'r', 'd', 'p', 'i', 32, 0,
  /* 4750 */ 'x', 's', 'r', 'q', 'p', 'i', 32, 0,
  /* 4758 */ 'x', 'v', 'r', 's', 'p', 'i', 32, 0,
  /* 4766 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 4772 */ 'q', 'v', 'e', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 4783 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 4793 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 4800 */ 'x', 'x', 's', 'l', 'd', 'w', 'i', 32, 0,
  /* 4809 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 4817 */ 'e', 'v', 'r', 'l', 'w', 'i', 32, 0,
  /* 4825 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 4835 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 4843 */ 'e', 'v', 's', 'l', 'w', 'i', 32, 0,
  /* 4851 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 4859 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 4866 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 4874 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 4882 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 4890 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 4898 */ 'l', 's', 'w', 'i', 32, 0,
  /* 4904 */ 's', 't', 's', 'w', 'i', 32, 0,
  /* 4911 */ 't', 'w', 'i', 32, 0,
  /* 4916 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 32, 0,
  /* 4927 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 32, 0,
  /* 4937 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 32, 0,
  /* 4948 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 32, 0,
  /* 4958 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 32, 0,
  /* 4970 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 32, 0,
  /* 4981 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 32, 0,
  /* 4993 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 32, 0,
  /* 5004 */ 't', 'c', 'h', 'e', 'c', 'k', 32, 0,
  /* 5012 */ 'q', 'v', 'f', 'l', 'o', 'g', 'i', 'c', 'a', 'l', 32, 0,
  /* 5024 */ 'b', 'l', 32, 0,
  /* 5028 */ 'b', 'c', 'l', 32, 0,
  /* 5033 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 5040 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 5048 */ 't', 'l', 'b', 'i', 'e', 'l', 32, 0,
  /* 5056 */ 'q', 'v', 'f', 's', 'e', 'l', 32, 0,
  /* 5064 */ 'i', 's', 'e', 'l', 32, 0,
  /* 5070 */ 'v', 's', 'e', 'l', 32, 0,
  /* 5076 */ 'x', 'x', 's', 'e', 'l', 32, 0,
  /* 5083 */ 'd', 'c', 'b', 'f', 'l', 32, 0,
  /* 5090 */ 'l', 'x', 'v', 'l', 'l', 32, 0,
  /* 5097 */ 's', 't', 'x', 'v', 'l', 'l', 32, 0,
  /* 5105 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 5112 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 5120 */ 'l', 'v', 's', 'l', 32, 0,
  /* 5126 */ 'q', 'v', 'f', 'm', 'u', 'l', 32, 0,
  /* 5134 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 32, 0,
  /* 5143 */ 'l', 'x', 'v', 'l', 32, 0,
  /* 5149 */ 's', 't', 'x', 'v', 'l', 32, 0,
  /* 5156 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 5162 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 5169 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 5176 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 5182 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 5189 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 5199 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 5208 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 5217 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 5227 */ 'v', 's', 'u', 'b', 'u', 'd', 'm', 32, 0,
  /* 5236 */ 'v', 'a', 'd', 'd', 'u', 'd', 'm', 32, 0,
  /* 5245 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 5255 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 5264 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 5275 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 5284 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 5294 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 5301 */ 'x', 's', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 5310 */ 'x', 'v', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 5319 */ 'x', 'v', 'r', 's', 'p', 'i', 'm', 32, 0,
  /* 5328 */ 'q', 'v', 'f', 'r', 'i', 'm', 32, 0,
  /* 5336 */ 'v', 'r', 'l', 'd', 'n', 'm', 32, 0,
  /* 5344 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 5352 */ 'v', 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 5360 */ 'v', 's', 'u', 'b', 'u', 'q', 'm', 32, 0,
  /* 5369 */ 'v', 'a', 'd', 'd', 'u', 'q', 'm', 32, 0,
  /* 5378 */ 'v', 's', 'u', 'b', 'e', 'u', 'q', 'm', 32, 0,
  /* 5388 */ 'v', 'a', 'd', 'd', 'e', 'u', 'q', 'm', 32, 0,
  /* 5398 */ 'q', 'v', 'f', 'p', 'e', 'r', 'm', 32, 0,
  /* 5407 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 5414 */ 'x', 'x', 'p', 'e', 'r', 'm', 32, 0,
  /* 5422 */ 'v', 'p', 'k', 'u', 'd', 'u', 'm', 32, 0,
  /* 5431 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 5440 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 5449 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 5458 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 5467 */ 'v', 'm', 'u', 'l', 'u', 'w', 'm', 32, 0,
  /* 5476 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5489 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5502 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5513 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'n', 32, 0,
  /* 5524 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5537 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5550 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5561 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5574 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5587 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5598 */ 'q', 'v', 'f', 't', 's', 't', 'n', 'a', 'n', 32, 0,
  /* 5609 */ 'q', 'v', 'f', 'c', 'p', 's', 'g', 'n', 32, 0,
  /* 5619 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 5626 */ 'q', 'v', 'f', 'r', 'i', 'n', 32, 0,
  /* 5634 */ 'm', 'f', 's', 'r', 'i', 'n', 32, 0,
  /* 5642 */ 'm', 't', 's', 'r', 'i', 'n', 32, 0,
  /* 5650 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 'n', 32, 0,
  /* 5661 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 'n', 32, 0,
  /* 5672 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 32, 0,
  /* 5681 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 32, 0,
  /* 5692 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 'l', 'o', 32, 0,
  /* 5705 */ 'v', 's', 'l', 'o', 32, 0,
  /* 5711 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 'o', 32, 0,
  /* 5722 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 5734 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 5745 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 5755 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 5767 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 5778 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 5788 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 'o', 32, 0,
  /* 5798 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 'o', 32, 0,
  /* 5809 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 'o', 32, 0,
  /* 5819 */ 'v', 's', 'r', 'o', 32, 0,
  /* 5825 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 32, 0,
  /* 5834 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5846 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5858 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5869 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5880 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5892 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5904 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5915 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5926 */ 'x', 's', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 5935 */ 'x', 'v', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 5944 */ 'x', 's', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 5955 */ 'x', 'v', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 5966 */ 'x', 's', 'm', 'i', 'n', 'c', 'd', 'p', 32, 0,
  /* 5976 */ 'x', 's', 'm', 'a', 'x', 'c', 'd', 'p', 32, 0,
  /* 5986 */ 'x', 's', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 5995 */ 'x', 'v', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 6004 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 6015 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 6026 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6037 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6048 */ 'x', 's', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6059 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6070 */ 'x', 's', 'c', 'm', 'p', 'n', 'e', 'd', 'p', 32, 0,
  /* 6081 */ 'x', 's', 'r', 'e', 'd', 'p', 32, 0,
  /* 6089 */ 'x', 'v', 'r', 'e', 'd', 'p', 32, 0,
  /* 6097 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 6109 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 6121 */ 'x', 's', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 6130 */ 'x', 'v', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 6139 */ 'x', 's', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 6149 */ 'x', 'v', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 6159 */ 'x', 's', 'm', 'i', 'n', 'j', 'd', 'p', 32, 0,
  /* 6169 */ 'x', 's', 'm', 'a', 'x', 'j', 'd', 'p', 32, 0,
  /* 6179 */ 'x', 's', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 6188 */ 'x', 'v', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 6197 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6209 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6221 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6232 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6243 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6255 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6267 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6278 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6289 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 6300 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 6311 */ 'x', 's', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 6320 */ 'x', 'v', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 6329 */ 'x', 's', 'c', 'm', 'p', 'o', 'd', 'p', 32, 0,
  /* 6339 */ 'x', 's', 'c', 'v', 'h', 'p', 'd', 'p', 32, 0,
  /* 6349 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 32, 0,
  /* 6359 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 6369 */ 'x', 'v', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 6379 */ 'x', 's', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6389 */ 'x', 'v', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6399 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6411 */ 'x', 's', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6421 */ 'x', 'v', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6431 */ 'x', 's', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 6442 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 6453 */ 'x', 's', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6463 */ 'x', 'v', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6473 */ 'x', 's', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6482 */ 'x', 'v', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6491 */ 'x', 's', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 6502 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 6513 */ 'x', 's', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6523 */ 'x', 's', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6534 */ 'x', 'v', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6545 */ 'x', 'v', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6555 */ 'x', 's', 'c', 'm', 'p', 'u', 'd', 'p', 32, 0,
  /* 6565 */ 'x', 's', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6574 */ 'x', 's', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6584 */ 'x', 'v', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6594 */ 'x', 'v', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6603 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 'd', 'p', 32, 0,
  /* 6614 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 'd', 'p', 32, 0,
  /* 6625 */ 'x', 's', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 6634 */ 'x', 'v', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 6643 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 6652 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 6662 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 6670 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 6679 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 6687 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 6696 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 6706 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 6713 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 6723 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 6734 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 6742 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 6752 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 6762 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 6770 */ 'x', 's', 'c', 'v', 'd', 'p', 'h', 'p', 32, 0,
  /* 6780 */ 'x', 'v', 'c', 'v', 's', 'p', 'h', 'p', 32, 0,
  /* 6790 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 6797 */ 'x', 's', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 6806 */ 'x', 'v', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 6815 */ 'x', 'v', 'r', 's', 'p', 'i', 'p', 32, 0,
  /* 6824 */ 'q', 'v', 'f', 'r', 'i', 'p', 32, 0,
  /* 6832 */ 'd', 'c', 'b', 'f', 'l', 'p', 32, 0,
  /* 6840 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 6851 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 6861 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 6870 */ 'x', 's', 't', 's', 't', 'd', 'c', 'q', 'p', 32, 0,
  /* 6881 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 6892 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 6902 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 6911 */ 'x', 's', 'c', 'v', 's', 'd', 'q', 'p', 32, 0,
  /* 6921 */ 'x', 's', 'c', 'v', 'u', 'd', 'q', 'p', 32, 0,
  /* 6931 */ 'x', 's', 'n', 'e', 'g', 'q', 'p', 32, 0,
  /* 6940 */ 'x', 's', 'x', 's', 'i', 'g', 'q', 'p', 32, 0,
  /* 6950 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 32, 0,
  /* 6959 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'q', 'p', 32, 0,
  /* 6970 */ 'x', 's', 'c', 'm', 'p', 'o', 'q', 'p', 32, 0,
  /* 6980 */ 'x', 's', 'c', 'v', 'd', 'p', 'q', 'p', 32, 0,
  /* 6990 */ 'x', 's', 'i', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7000 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7012 */ 'x', 's', 'x', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7022 */ 'x', 's', 'n', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 7032 */ 'x', 's', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 7041 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 32, 0,
  /* 7051 */ 'x', 's', 'c', 'm', 'p', 'u', 'q', 'p', 32, 0,
  /* 7061 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 32, 0,
  /* 7070 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7082 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7094 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7105 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7116 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7128 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7140 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7151 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7162 */ 'x', 's', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 7171 */ 'x', 'v', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 7180 */ 'x', 's', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 7191 */ 'x', 'v', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 7202 */ 'x', 's', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 7211 */ 'x', 'v', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 7220 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 7231 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 7242 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 7253 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 7264 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', 32, 0,
  /* 7275 */ 'x', 's', 'r', 'e', 's', 'p', 32, 0,
  /* 7283 */ 'x', 'v', 'r', 'e', 's', 'p', 32, 0,
  /* 7291 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 7303 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 7315 */ 'x', 'v', 'n', 'e', 'g', 's', 'p', 32, 0,
  /* 7324 */ 'x', 'v', 'x', 's', 'i', 'g', 's', 'p', 32, 0,
  /* 7334 */ 'x', 's', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 7343 */ 'x', 'v', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 7352 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7364 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7376 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7387 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7398 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7410 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7422 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7433 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7444 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 's', 'p', 32, 0,
  /* 7455 */ 'x', 'v', 'm', 'i', 'n', 's', 'p', 32, 0,
  /* 7464 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 7474 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 7484 */ 'x', 'v', 'c', 'v', 'h', 'p', 's', 'p', 32, 0,
  /* 7494 */ 'x', 'v', 'i', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 7504 */ 'x', 'v', 'x', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 7514 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', 32, 0,
  /* 7525 */ 'q', 'v', 'f', 'r', 's', 'p', 32, 0,
  /* 7533 */ 'x', 'v', 'n', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 7543 */ 'x', 'v', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 7552 */ 'l', 'x', 's', 's', 'p', 32, 0,
  /* 7559 */ 's', 't', 'x', 's', 's', 'p', 32, 0,
  /* 7567 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', 32, 0,
  /* 7578 */ 'x', 's', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 7588 */ 'x', 'v', 't', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 7599 */ 'x', 'v', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 7609 */ 'x', 's', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 7618 */ 'x', 'v', 't', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 7628 */ 'x', 'v', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 7637 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 's', 'p', 32, 0,
  /* 7648 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 's', 'p', 32, 0,
  /* 7659 */ 'x', 'v', 'm', 'a', 'x', 's', 'p', 32, 0,
  /* 7668 */ 'x', 's', 'r', 'q', 'p', 'x', 'p', 32, 0,
  /* 7677 */ 'v', 'p', 'r', 't', 'y', 'b', 'q', 32, 0,
  /* 7686 */ 'q', 'v', 'f', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 7696 */ 'e', 'v', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 7705 */ 'v', 'b', 'p', 'e', 'r', 'm', 'q', 32, 0,
  /* 7714 */ 'x', 'x', 'b', 'r', 'q', 32, 0,
  /* 7721 */ 'v', 'm', 'u', 'l', '1', '0', 'u', 'q', 32, 0,
  /* 7731 */ 'v', 'm', 'u', 'l', '1', '0', 'c', 'u', 'q', 32, 0,
  /* 7742 */ 'v', 's', 'u', 'b', 'c', 'u', 'q', 32, 0,
  /* 7751 */ 'v', 'a', 'd', 'd', 'c', 'u', 'q', 32, 0,
  /* 7760 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'c', 'u', 'q', 32, 0,
  /* 7772 */ 'v', 's', 'u', 'b', 'e', 'c', 'u', 'q', 32, 0,
  /* 7782 */ 'v', 'a', 'd', 'd', 'e', 'c', 'u', 'q', 32, 0,
  /* 7792 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'u', 'q', 32, 0,
  /* 7803 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 7816 */ 'm', 'b', 'a', 'r', 32, 0,
  /* 7822 */ 'm', 'f', 'd', 'c', 'r', 32, 0,
  /* 7829 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 7836 */ 'm', 't', 'd', 'c', 'r', 32, 0,
  /* 7843 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 7849 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 7857 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 7865 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 7873 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 7883 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 7892 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 7898 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 7904 */ 'm', 't', 'l', 'r', 32, 0,
  /* 7910 */ 'q', 'v', 'f', 'm', 'r', 32, 0,
  /* 7917 */ 'm', 'f', 'p', 'm', 'r', 32, 0,
  /* 7924 */ 'm', 't', 'p', 'm', 'r', 32, 0,
  /* 7931 */ 'v', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 7939 */ 'x', 'x', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 7948 */ 'x', 'x', 'l', 'o', 'r', 32, 0,
  /* 7955 */ 'x', 'x', 'l', 'n', 'o', 'r', 32, 0,
  /* 7963 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 7970 */ 'e', 'v', 'n', 'o', 'r', 32, 0,
  /* 7977 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 7983 */ 'e', 'v', 'o', 'r', 32, 0,
  /* 7989 */ 'x', 'x', 'l', 'x', 'o', 'r', 32, 0,
  /* 7997 */ 'v', 'p', 'e', 'r', 'm', 'x', 'o', 'r', 32, 0,
  /* 8007 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 8014 */ 'e', 'v', 'x', 'o', 'r', 32, 0,
  /* 8021 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 8028 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 8035 */ 'm', 'f', 's', 'r', 32, 0,
  /* 8041 */ 'm', 'f', 'm', 's', 'r', 32, 0,
  /* 8048 */ 'm', 't', 'm', 's', 'r', 32, 0,
  /* 8055 */ 'm', 't', 's', 'r', 32, 0,
  /* 8061 */ 'l', 'v', 's', 'r', 32, 0,
  /* 8067 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 8074 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 8081 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 8088 */ 'q', 'v', 'f', 'a', 'b', 's', 32, 0,
  /* 8096 */ 'q', 'v', 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 8105 */ 'e', 'v', 'a', 'b', 's', 32, 0,
  /* 8112 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 8122 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 8131 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 8140 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 8150 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 8159 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 8168 */ 'q', 'v', 'f', 's', 'u', 'b', 's', 32, 0,
  /* 8177 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 8187 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 8198 */ 'q', 'v', 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 8207 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8217 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8228 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8243 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8257 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8268 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8280 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 8290 */ 'd', 'c', 'b', 't', 'd', 's', 32, 0,
  /* 8298 */ 'd', 'c', 'b', 't', 's', 't', 'd', 's', 32, 0,
  /* 8308 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8320 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8332 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8344 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8356 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8368 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8380 */ 'q', 'v', 'f', 'r', 'e', 's', 32, 0,
  /* 8388 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 8400 */ 'm', 'f', 'f', 's', 32, 0,
  /* 8406 */ 'l', 'f', 's', 32, 0,
  /* 8411 */ 'm', 'c', 'r', 'f', 's', 32, 0,
  /* 8418 */ 's', 't', 'f', 's', 32, 0,
  /* 8424 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 8434 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 8443 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 8454 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 8466 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 8475 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 8485 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 8494 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 8503 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 8513 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 8520 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 8527 */ 'l', 'i', 's', 32, 0,
  /* 8532 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 8539 */ 'e', 'v', 's', 'r', 'w', 'i', 's', 32, 0,
  /* 8548 */ 'i', 'c', 'b', 't', 'l', 's', 32, 0,
  /* 8556 */ 'q', 'v', 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 8565 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 's', 32, 0,
  /* 8575 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 32, 0,
  /* 8584 */ 'v', 'p', 'k', 's', 'd', 's', 's', 32, 0,
  /* 8593 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 8602 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 8611 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 's', 32, 0,
  /* 8621 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 's', 32, 0,
  /* 8631 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 8639 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 8650 */ 'v', 'p', 'k', 's', 'd', 'u', 's', 32, 0,
  /* 8659 */ 'v', 'p', 'k', 'u', 'd', 'u', 's', 32, 0,
  /* 8668 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 8677 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 8686 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 8695 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 8704 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 8711 */ 'e', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 8719 */ 'm', 't', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 8728 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 8738 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 8747 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 8756 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 8765 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 8774 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 8783 */ 'e', 'v', 'd', 'i', 'v', 'w', 's', 32, 0,
  /* 8792 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 8804 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 8816 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 8828 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 8840 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 8852 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 8864 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 8872 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 8880 */ 'l', 'd', 'a', 't', 32, 0,
  /* 8886 */ 's', 't', 'd', 'a', 't', 32, 0,
  /* 8893 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8906 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8918 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8932 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8946 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8958 */ 'l', 'w', 'a', 't', 32, 0,
  /* 8964 */ 's', 't', 'w', 'a', 't', 32, 0,
  /* 8971 */ 'd', 'c', 'b', 't', 32, 0,
  /* 8977 */ 'i', 'c', 'b', 't', 32, 0,
  /* 8983 */ 'd', 'c', 'b', 't', 'c', 't', 32, 0,
  /* 8991 */ 'd', 'c', 'b', 't', 's', 't', 'c', 't', 32, 0,
  /* 9001 */ 'q', 'v', 'f', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 9011 */ 'w', 'a', 'i', 't', 32, 0,
  /* 9017 */ 'q', 'v', 'f', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 9027 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 9034 */ 'f', 't', 's', 'q', 'r', 't', 32, 0,
  /* 9042 */ 'p', 'a', 's', 't', 'e', '_', 'l', 'a', 's', 't', 32, 0,
  /* 9054 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 9068 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 9081 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 9088 */ 'd', 's', 't', 32, 0,
  /* 9093 */ 'c', 'o', 'p', 'y', '_', 'f', 'i', 'r', 's', 't', 32, 0,
  /* 9105 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 9113 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 9120 */ 'd', 'c', 'b', 't', 't', 32, 0,
  /* 9127 */ 'd', 's', 't', 't', 32, 0,
  /* 9133 */ 'd', 'c', 'b', 't', 's', 't', 't', 32, 0,
  /* 9142 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 9150 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 9156 */ 's', 't', 'b', 'u', 32, 0,
  /* 9162 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 9168 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 9175 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 9183 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 9193 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 32, 0,
  /* 9203 */ 'l', 'd', 'u', 32, 0,
  /* 9208 */ 's', 't', 'd', 'u', 32, 0,
  /* 9214 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 9221 */ 'd', 'i', 'v', 'd', 'e', 'u', 32, 0,
  /* 9229 */ 'd', 'i', 'v', 'w', 'e', 'u', 32, 0,
  /* 9237 */ 's', 't', 'h', 'u', 32, 0,
  /* 9243 */ 'e', 'v', 's', 'r', 'w', 'i', 'u', 32, 0,
  /* 9252 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 32, 0,
  /* 9261 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 9268 */ 'l', 'f', 's', 'u', 32, 0,
  /* 9274 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 9281 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 'u', 32, 0,
  /* 9291 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 'u', 32, 0,
  /* 9301 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 9309 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 32, 0,
  /* 9319 */ 'e', 'v', 's', 'r', 'w', 'u', 32, 0,
  /* 9327 */ 's', 't', 'w', 'u', 32, 0,
  /* 9333 */ 'e', 'v', 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 9342 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 9348 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 9354 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 9360 */ 's', 'l', 'b', 'm', 'f', 'e', 'v', 32, 0,
  /* 9369 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 9375 */ 'f', 't', 'd', 'i', 'v', 32, 0,
  /* 9382 */ 'v', 's', 'l', 'v', 32, 0,
  /* 9388 */ 'x', 'x', 'l', 'e', 'q', 'v', 32, 0,
  /* 9396 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 9403 */ 'e', 'v', 'e', 'q', 'v', 32, 0,
  /* 9410 */ 'v', 's', 'r', 'v', 32, 0,
  /* 9416 */ 'l', 'x', 'v', 32, 0,
  /* 9421 */ 's', 't', 'x', 'v', 32, 0,
  /* 9427 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'w', 32, 0,
  /* 9437 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'w', 32, 0,
  /* 9447 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 9460 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 9473 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 9486 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 9499 */ 'e', 'v', 'a', 'd', 'd', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9512 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9525 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9539 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9552 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9565 */ 'e', 'v', 'a', 'd', 'd', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9578 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9591 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9605 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9618 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9631 */ 'e', 'v', 'a', 'd', 'd', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9644 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9657 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9671 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9684 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9697 */ 'e', 'v', 'a', 'd', 'd', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9710 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9723 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9737 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9750 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9763 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'w', 32, 0,
  /* 9775 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 9782 */ 'v', 'p', 'r', 't', 'y', 'b', 'w', 32, 0,
  /* 9791 */ 'e', 'v', 'a', 'd', 'd', 'w', 32, 0,
  /* 9799 */ 'e', 'v', 'l', 'd', 'w', 32, 0,
  /* 9806 */ 'e', 'v', 'r', 'n', 'd', 'w', 32, 0,
  /* 9814 */ 'e', 'v', 's', 't', 'd', 'w', 32, 0,
  /* 9822 */ 'v', 'm', 'r', 'g', 'e', 'w', 32, 0,
  /* 9830 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', 32, 0,
  /* 9839 */ 'e', 'v', 's', 'u', 'b', 'f', 'w', 32, 0,
  /* 9848 */ 'e', 'v', 's', 'u', 'b', 'i', 'f', 'w', 32, 0,
  /* 9858 */ 'v', 'n', 'e', 'g', 'w', 32, 0,
  /* 9865 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 9873 */ 'x', 'x', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 9882 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 9889 */ 'e', 'v', 'a', 'd', 'd', 'i', 'w', 32, 0,
  /* 9898 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 32, 0,
  /* 9907 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 9915 */ 'x', 'x', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 9924 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 9931 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 9938 */ 'e', 'v', 'r', 'l', 'w', 32, 0,
  /* 9945 */ 'e', 'v', 's', 'l', 'w', 32, 0,
  /* 9952 */ 'l', 'm', 'w', 32, 0,
  /* 9957 */ 's', 't', 'm', 'w', 32, 0,
  /* 9963 */ 'v', 'p', 'm', 's', 'u', 'm', 'w', 32, 0,
  /* 9972 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 9985 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 9998 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 10011 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 10024 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10037 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10050 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10063 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10076 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10089 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10102 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10115 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10128 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10141 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10154 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10167 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10180 */ 'v', 'm', 'r', 'g', 'o', 'w', 32, 0,
  /* 10188 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 10194 */ 'x', 'x', 'b', 'r', 'w', 32, 0,
  /* 10201 */ 'v', 's', 'r', 'w', 32, 0,
  /* 10207 */ 'm', 'o', 'd', 's', 'w', 32, 0,
  /* 10214 */ 'v', 'm', 'u', 'l', 'e', 's', 'w', 32, 0,
  /* 10223 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 10231 */ 'v', 'u', 'p', 'k', 'h', 's', 'w', 32, 0,
  /* 10240 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 10250 */ 'v', 'u', 'p', 'k', 'l', 's', 'w', 32, 0,
  /* 10259 */ 'e', 'v', 'c', 'n', 't', 'l', 's', 'w', 32, 0,
  /* 10269 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 10277 */ 'v', 'm', 'u', 'l', 'o', 's', 'w', 32, 0,
  /* 10286 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 10296 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 10303 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 10311 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 10319 */ 'x', 'x', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 10328 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 10338 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 10348 */ 'x', 'x', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 10359 */ 's', 't', 'w', 32, 0,
  /* 10364 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 10373 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 10382 */ 'm', 'o', 'd', 'u', 'w', 32, 0,
  /* 10389 */ 'v', 'a', 'b', 's', 'd', 'u', 'w', 32, 0,
  /* 10398 */ 'v', 'm', 'u', 'l', 'e', 'u', 'w', 32, 0,
  /* 10407 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 10415 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 10423 */ 'v', 'm', 'u', 'l', 'o', 'u', 'w', 32, 0,
  /* 10432 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 10442 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 10454 */ 'x', 'x', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 10467 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 10477 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 10485 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 10491 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', 32, 0,
  /* 10501 */ 'v', 'c', 'l', 'z', 'w', 32, 0,
  /* 10508 */ 'e', 'v', 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 10518 */ 'v', 'c', 't', 'z', 'w', 32, 0,
  /* 10525 */ 'c', 'n', 't', 't', 'z', 'w', 32, 0,
  /* 10533 */ 'l', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 10541 */ 's', 't', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 10550 */ 'l', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 10558 */ 's', 't', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 10567 */ 'l', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 10576 */ 's', 't', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 10586 */ 'l', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 10594 */ 's', 't', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 10603 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 10609 */ 't', 'l', 'b', 'i', 'v', 'a', 'x', 32, 0,
  /* 10618 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 10628 */ 'l', 'x', 's', 'i', 'w', 'a', 'x', 32, 0,
  /* 10637 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 10643 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 10650 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 10658 */ 's', 't', 'x', 's', 'i', 'b', 'x', 32, 0,
  /* 10667 */ 's', 't', 'b', 'x', 32, 0,
  /* 10673 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 32, 0,
  /* 10682 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 32, 0,
  /* 10692 */ 'e', 'v', 'l', 'd', 'd', 'x', 32, 0,
  /* 10700 */ 'e', 'v', 's', 't', 'd', 'd', 'x', 32, 0,
  /* 10709 */ 'q', 'v', 'l', 'f', 'd', 'x', 32, 0,
  /* 10717 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 32, 0,
  /* 10726 */ 'q', 'v', 'l', 'p', 'c', 'l', 'd', 'x', 32, 0,
  /* 10736 */ 'q', 'v', 'l', 'p', 'c', 'r', 'd', 'x', 32, 0,
  /* 10746 */ 'l', 'x', 's', 'd', 'x', 32, 0,
  /* 10753 */ 's', 't', 'x', 's', 'd', 'x', 32, 0,
  /* 10761 */ 's', 't', 'd', 'x', 32, 0,
  /* 10767 */ 'e', 'v', 'l', 'w', 'h', 'e', 'x', 32, 0,
  /* 10776 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 'x', 32, 0,
  /* 10786 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 'x', 32, 0,
  /* 10796 */ 'e', 'v', 'l', 'd', 'h', 'x', 32, 0,
  /* 10804 */ 'e', 'v', 's', 't', 'd', 'h', 'x', 32, 0,
  /* 10813 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 10820 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 10828 */ 's', 't', 'x', 's', 'i', 'h', 'x', 32, 0,
  /* 10837 */ 's', 't', 'h', 'x', 32, 0,
  /* 10843 */ 's', 't', 'b', 'c', 'i', 'x', 32, 0,
  /* 10851 */ 'l', 'd', 'c', 'i', 'x', 32, 0,
  /* 10858 */ 's', 't', 'd', 'c', 'i', 'x', 32, 0,
  /* 10866 */ 's', 't', 'h', 'c', 'i', 'x', 32, 0,
  /* 10874 */ 's', 't', 'w', 'c', 'i', 'x', 32, 0,
  /* 10882 */ 'l', 'b', 'z', 'c', 'i', 'x', 32, 0,
  /* 10890 */ 'l', 'h', 'z', 'c', 'i', 'x', 32, 0,
  /* 10898 */ 'l', 'w', 'z', 'c', 'i', 'x', 32, 0,
  /* 10906 */ 'x', 's', 'r', 'q', 'p', 'i', 'x', 32, 0,
  /* 10915 */ 'v', 'e', 'x', 't', 'u', 'b', 'l', 'x', 32, 0,
  /* 10925 */ 'v', 'e', 'x', 't', 'u', 'h', 'l', 'x', 32, 0,
  /* 10935 */ 'v', 'e', 'x', 't', 'u', 'w', 'l', 'x', 32, 0,
  /* 10945 */ 'l', 'd', 'm', 'x', 32, 0,
  /* 10951 */ 'v', 's', 'b', 'o', 'x', 32, 0,
  /* 10958 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 'x', 32, 0,
  /* 10968 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 'x', 32, 0,
  /* 10978 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 10987 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 10994 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 11003 */ 'l', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 11011 */ 's', 't', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 11020 */ 'l', 'b', 'a', 'r', 'x', 32, 0,
  /* 11027 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 11034 */ 'l', 'h', 'a', 'r', 'x', 32, 0,
  /* 11041 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 11048 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 11055 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 11063 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 11070 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 11078 */ 'v', 'e', 'x', 't', 'u', 'b', 'r', 'x', 32, 0,
  /* 11088 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 11095 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 11103 */ 'v', 'e', 'x', 't', 'u', 'h', 'r', 'x', 32, 0,
  /* 11113 */ 'v', 'e', 'x', 't', 'u', 'w', 'r', 'x', 32, 0,
  /* 11123 */ 'm', 'c', 'r', 'x', 'r', 'x', 32, 0,
  /* 11131 */ 't', 'l', 'b', 's', 'x', 32, 0,
  /* 11138 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 32, 0,
  /* 11147 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 32, 0,
  /* 11157 */ 'l', 'x', 'v', 'd', 's', 'x', 32, 0,
  /* 11165 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 11172 */ 'q', 'v', 'l', 'f', 's', 'x', 32, 0,
  /* 11180 */ 'q', 'v', 's', 't', 'f', 's', 'x', 32, 0,
  /* 11189 */ 'q', 'v', 'l', 'p', 'c', 'l', 's', 'x', 32, 0,
  /* 11199 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 'x', 32, 0,
  /* 11209 */ 'q', 'v', 'l', 'p', 'c', 'r', 's', 'x', 32, 0,
  /* 11219 */ 'l', 'x', 'v', 'w', 's', 'x', 32, 0,
  /* 11227 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11241 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11254 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11269 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11284 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11297 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 11304 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 11311 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 11318 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 11328 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 11339 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 11348 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 11358 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 11364 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 11371 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 11378 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 11385 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 'x', 32, 0,
  /* 11395 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 11405 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 11416 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 11425 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 11435 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 11442 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 11449 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 11456 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 11463 */ 'l', 'v', 'x', 32, 0,
  /* 11468 */ 's', 't', 'v', 'x', 32, 0,
  /* 11474 */ 'l', 'x', 'v', 'x', 32, 0,
  /* 11480 */ 's', 't', 'x', 'v', 'x', 32, 0,
  /* 11487 */ 'e', 'v', 'l', 'd', 'w', 'x', 32, 0,
  /* 11495 */ 'e', 'v', 's', 't', 'd', 'w', 'x', 32, 0,
  /* 11504 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 11511 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 11519 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 11529 */ 's', 't', 'x', 's', 'i', 'w', 'x', 32, 0,
  /* 11538 */ 's', 't', 'w', 'x', 32, 0,
  /* 11544 */ 'l', 'x', 's', 'i', 'b', 'z', 'x', 32, 0,
  /* 11553 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 11559 */ 'l', 'x', 's', 'i', 'h', 'z', 'x', 32, 0,
  /* 11568 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 11574 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 11584 */ 'l', 'x', 's', 'i', 'w', 'z', 'x', 32, 0,
  /* 11593 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 11599 */ 'c', 'o', 'p', 'y', 32, 0,
  /* 11605 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 11611 */ 'l', 'b', 'z', 32, 0,
  /* 11616 */ 'b', 'd', 'z', 32, 0,
  /* 11621 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 11631 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'd', 'z', 32, 0,
  /* 11642 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'd', 'z', 32, 0,
  /* 11653 */ 'l', 'h', 'z', 32, 0,
  /* 11658 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 11665 */ 'x', 's', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 11674 */ 'x', 'v', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 11683 */ 'x', 'v', 'r', 's', 'p', 'i', 'z', 32, 0,
  /* 11692 */ 'q', 'v', 'f', 'r', 'i', 'z', 32, 0,
  /* 11700 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 11706 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 11717 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 11728 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 11738 */ 'l', 'w', 'z', 32, 0,
  /* 11743 */ 'm', 'f', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 11752 */ 'm', 't', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 11761 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'w', 'z', 32, 0,
  /* 11772 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'w', 'z', 32, 0,
  /* 11783 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 11791 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 11800 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 11807 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 11815 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 11823 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 11832 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 11839 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 11847 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 11878 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 11903 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 11926 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 11949 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 11971 */ 't', 'r', 'e', 'c', 'h', 'k', 'p', 't', '.', 0,
  /* 11981 */ 'o', 'r', 'i', 32, '1', ',', 32, '1', ',', 32, '0', 0,
  /* 11993 */ 'o', 'r', 'i', 32, '2', ',', 32, '2', ',', 32, '0', 0,
  /* 12005 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 12022 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 12043 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 12064 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 12086 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 12107 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 12129 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 12150 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 12167 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 12188 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 12208 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 12230 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 12251 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 12265 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 12279 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 12294 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 12309 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 12328 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 12346 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12364 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12382 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12397 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12410 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 12421 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 12433 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 12454 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 12475 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 12497 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 12519 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 12540 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 12557 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 12578 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 12599 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 12619 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 12641 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 12662 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 12681 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 12699 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 12710 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 12722 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 12743 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 12757 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 12768 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 12782 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 12793 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 12807 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 12821 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 12842 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 12863 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 12885 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 12906 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 12928 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 12949 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 12966 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 12987 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 13007 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 13029 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 13050 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 13061 */ '#', 'C', 'F', 'E', 'N', 'C', 'E', '8', 0,
  /* 13070 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 13084 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 13095 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 13115 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 13129 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 13149 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 13170 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 13190 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 13211 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 13231 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 13251 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 13270 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 13289 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 13300 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 13321 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 13341 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 13354 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', '8', 0,
  /* 13370 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 13387 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 13404 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 13420 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 13432 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 13446 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 13460 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 13477 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 13492 */ '#', 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 13500 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 13510 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'B', 'R', 'C', 0,
  /* 13526 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'B', 'R', 'C', 0,
  /* 13539 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'R', 'C', 0,
  /* 13555 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'F', 'R', 'C', 0,
  /* 13568 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 13585 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 13599 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 13615 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 13628 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'S', 'R', 'C', 0,
  /* 13644 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'S', 'R', 'C', 0,
  /* 13657 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 13674 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 13688 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 13704 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 13717 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 13730 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 13737 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 13747 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 13763 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 13777 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 13787 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 13795 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 13805 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 13817 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 13829 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 13842 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 13855 */ '#', 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 13866 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 13878 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 13888 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 13904 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 13920 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 13934 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 13946 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 13958 */ '#', 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 13971 */ '#', 'T', 'C', 'H', 'E', 'C', 'K', '_', 'R', 'E', 'T', 0,
  /* 13983 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', 0,
  /* 13998 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 14013 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 14026 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 14042 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 14058 */ '#', 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 14068 */ '#', 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 14081 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 14091 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 14106 */ 'b', 'c', 'a', 0,
  /* 14110 */ 's', 'l', 'b', 'i', 'a', 0,
  /* 14116 */ 't', 'l', 'b', 'i', 'a', 0,
  /* 14122 */ 'b', 'c', 'l', 'a', 0,
  /* 14127 */ 'c', 'l', 'r', 'b', 'h', 'r', 'b', 0,
  /* 14135 */ 'b', 'c', 0,
  /* 14138 */ 's', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 14146 */ 't', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 14154 */ 'm', 's', 'g', 's', 'y', 'n', 'c', 0,
  /* 14162 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 14168 */ 'm', 's', 'y', 'n', 'c', 0,
  /* 14174 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 14181 */ '#', 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 14189 */ 'h', 'r', 'f', 'i', 'd', 0,
  /* 14195 */ 't', 'l', 'b', 'r', 'e', 0,
  /* 14201 */ 't', 'l', 'b', 'w', 'e', 0,
  /* 14207 */ 'r', 'f', 'c', 'i', 0,
  /* 14212 */ 'r', 'f', 'm', 'c', 'i', 0,
  /* 14218 */ 'r', 'f', 'd', 'i', 0,
  /* 14223 */ 'r', 'f', 'i', 0,
  /* 14227 */ 'b', 'c', 'l', 0,
  /* 14231 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 14245 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 14252 */ 'b', 'l', 'r', 'l', 0,
  /* 14257 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 14264 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 14272 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 14278 */ 'a', 't', 't', 'n', 0,
  /* 14283 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 14289 */ 'n', 'a', 'p', 0,
  /* 14293 */ 't', 'r', 'a', 'p', 0,
  /* 14298 */ 'n', 'o', 'p', 0,
  /* 14302 */ 's', 't', 'o', 'p', 0,
  /* 14307 */ 'b', 'l', 'r', 0,
  /* 14311 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 14317 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 14324 */ 'b', 'c', 't', 'r', 0,
  /* 14329 */ 'c', 'p', '_', 'a', 'b', 'o', 'r', 't', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    13738U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    13731U,	// BUNDLE
    14092U,	// LIFETIME_START
    13718U,	// LIFETIME_END
    0U,	// STACKMAP
    14232U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    11904U,	// PATCHABLE_FUNCTION_ENTER
    11848U,	// PATCHABLE_RET
    11950U,	// PATCHABLE_FUNCTION_EXIT
    11927U,	// PATCHABLE_TAIL_CALL
    11879U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    19711U,	// ADD4
    19711U,	// ADD4TLS
    16891U,	// ADD4o
    19711U,	// ADD8
    19711U,	// ADD8TLS
    19711U,	// ADD8TLS_
    16891U,	// ADD8o
    19490U,	// ADDC
    19490U,	// ADDC8
    16786U,	// ADDC8o
    16786U,	// ADDCo
    20164U,	// ADDE
    20164U,	// ADDE8
    17030U,	// ADDE8o
    17030U,	// ADDEo
    20830U,	// ADDI
    20830U,	// ADDI8
    19535U,	// ADDIC
    19535U,	// ADDIC8
    16827U,	// ADDICo
    24905U,	// ADDIS
    24905U,	// ADDIS8
    13478U,	// ADDISdtprelHA
    12006U,	// ADDISdtprelHA32
    13461U,	// ADDISgotTprelHA
    13433U,	// ADDIStlsgdHA
    13447U,	// ADDIStlsldHA
    13421U,	// ADDIStocHA
    13843U,	// ADDIdtprelL
    12295U,	// ADDIdtprelL32
    13806U,	// ADDItlsgdL
    12252U,	// ADDItlsgdL32
    13889U,	// ADDItlsgdLADDR
    12347U,	// ADDItlsgdLADDR32
    13818U,	// ADDItlsldL
    12266U,	// ADDItlsldL32
    13905U,	// ADDItlsldLADDR
    12365U,	// ADDItlsldLADDR32
    13796U,	// ADDItocL
    536891143U,	// ADDME
    536891143U,	// ADDME8
    536887965U,	// ADDME8o
    536887965U,	// ADDMEo
    536891221U,	// ADDZE
    536891221U,	// ADDZE8
    536888014U,	// ADDZE8o
    536888014U,	// ADDZEo
    34764U,	// ADJCALLSTACKDOWN
    34783U,	// ADJCALLSTACKUP
    19913U,	// AND
    19913U,	// AND8
    16953U,	// AND8o
    19499U,	// ANDC
    19499U,	// ANDC8
    16793U,	// ANDC8o
    16793U,	// ANDCo
    17870U,	// ANDISo
    17870U,	// ANDISo8
    17255U,	// ANDIo
    17255U,	// ANDIo8
    14027U,	// ANDIo_1_EQ_BIT
    13371U,	// ANDIo_1_EQ_BIT8
    14043U,	// ANDIo_1_GT_BIT
    13388U,	// ANDIo_1_GT_BIT8
    16953U,	// ANDo
    1091061629U,	// ATOMIC_CMP_SWAP_I16
    1091061607U,	// ATOMIC_CMP_SWAP_I32
    12558U,	// ATOMIC_CMP_SWAP_I64
    13232U,	// ATOMIC_CMP_SWAP_I8
    12843U,	// ATOMIC_LOAD_ADD_I16
    12044U,	// ATOMIC_LOAD_ADD_I32
    12455U,	// ATOMIC_LOAD_ADD_I64
    13130U,	// ATOMIC_LOAD_ADD_I8
    12886U,	// ATOMIC_LOAD_AND_I16
    12087U,	// ATOMIC_LOAD_AND_I32
    12723U,	// ATOMIC_LOAD_AND_I64
    13171U,	// ATOMIC_LOAD_AND_I8
    13030U,	// ATOMIC_LOAD_MAX_I16
    12231U,	// ATOMIC_LOAD_MAX_I32
    12642U,	// ATOMIC_LOAD_MAX_I64
    13322U,	// ATOMIC_LOAD_MAX_I8
    12929U,	// ATOMIC_LOAD_MIN_I16
    12130U,	// ATOMIC_LOAD_MIN_I32
    12520U,	// ATOMIC_LOAD_MIN_I64
    13212U,	// ATOMIC_LOAD_MIN_I8
    12864U,	// ATOMIC_LOAD_NAND_I16
    12065U,	// ATOMIC_LOAD_NAND_I32
    12476U,	// ATOMIC_LOAD_NAND_I64
    13150U,	// ATOMIC_LOAD_NAND_I8
    12988U,	// ATOMIC_LOAD_OR_I16
    12189U,	// ATOMIC_LOAD_OR_I32
    12600U,	// ATOMIC_LOAD_OR_I64
    13271U,	// ATOMIC_LOAD_OR_I8
    12822U,	// ATOMIC_LOAD_SUB_I16
    12023U,	// ATOMIC_LOAD_SUB_I32
    12434U,	// ATOMIC_LOAD_SUB_I64
    13096U,	// ATOMIC_LOAD_SUB_I8
    13008U,	// ATOMIC_LOAD_UMAX_I16
    12209U,	// ATOMIC_LOAD_UMAX_I32
    12620U,	// ATOMIC_LOAD_UMAX_I64
    13301U,	// ATOMIC_LOAD_UMAX_I8
    12907U,	// ATOMIC_LOAD_UMIN_I16
    12108U,	// ATOMIC_LOAD_UMIN_I32
    12498U,	// ATOMIC_LOAD_UMIN_I64
    13191U,	// ATOMIC_LOAD_UMIN_I8
    12967U,	// ATOMIC_LOAD_XOR_I16
    12168U,	// ATOMIC_LOAD_XOR_I32
    12579U,	// ATOMIC_LOAD_XOR_I64
    13252U,	// ATOMIC_LOAD_XOR_I8
    12950U,	// ATOMIC_SWAP_I16
    12151U,	// ATOMIC_SWAP_I32
    12541U,	// ATOMIC_SWAP_I64
    13405U,	// ATOMIC_SWAP_I8
    14279U,	// ATTN
    1100455U,	// B
    1116281U,	// BA
    33570944U,	// BC
    1668918U,	// BCC
    2193206U,	// BCCA
    2717494U,	// BCCCTR
    2717494U,	// BCCCTR8
    3241782U,	// BCCCTRL
    3241782U,	// BCCCTRL8
    3766070U,	// BCCL
    4290358U,	// BCCLA
    4814646U,	// BCCLR
    5338934U,	// BCCLRL
    5783730U,	// BCCTR
    5783730U,	// BCCTR8
    5783786U,	// BCCTR8n
    5783708U,	// BCCTRL
    5783708U,	// BCCTRL8
    5783766U,	// BCCTRL8n
    5783766U,	// BCCTRLn
    5783786U,	// BCCTRn
    17464U,	// BCDCFNo
    17691U,	// BCDCFSQo
    18209U,	// BCDCFZo
    17473U,	// BCDCPSGNo
    536888433U,	// BCDCTNo
    536888613U,	// BCDCTSQo
    18225U,	// BCDCTZo
    17493U,	// BCDSETSGNo
    17746U,	// BCDSRo
    17802U,	// BCDSo
    16843U,	// BCDTRUNCo
    17895U,	// BCDUSo
    16854U,	// BCDUTRUNCo
    33570952U,	// BCL
    5783720U,	// BCLR
    5783697U,	// BCLRL
    5783756U,	// BCLRLn
    5783777U,	// BCLRn
    1097829U,	// BCLalways
    33571012U,	// BCLn
    14325U,	// BCTR
    14325U,	// BCTR8
    14273U,	// BCTRL
    14273U,	// BCTRL8
    98418U,	// BCTRL8_LDinto_toc
    33571005U,	// BCn
    1109429U,	// BDNZ
    1109429U,	// BDNZ8
    1116828U,	// BDNZA
    1114392U,	// BDNZAm
    1114177U,	// BDNZAp
    1102911U,	// BDNZL
    1116592U,	// BDNZLA
    1114376U,	// BDNZLAm
    1114161U,	// BDNZLAp
    14318U,	// BDNZLR
    14318U,	// BDNZLR8
    14265U,	// BDNZLRL
    11824U,	// BDNZLRLm
    11792U,	// BDNZLRLp
    11840U,	// BDNZLRm
    11808U,	// BDNZLRp
    1098023U,	// BDNZLm
    1097808U,	// BDNZLp
    1098037U,	// BDNZm
    1097822U,	// BDNZp
    1109345U,	// BDZ
    1109345U,	// BDZ8
    1116822U,	// BDZA
    1114385U,	// BDZAm
    1114170U,	// BDZAp
    1102905U,	// BDZL
    1116585U,	// BDZLA
    1114368U,	// BDZLAm
    1114153U,	// BDZLAp
    14312U,	// BDZLR
    14312U,	// BDZLR8
    14258U,	// BDZLRL
    11816U,	// BDZLRLm
    11784U,	// BDZLRLp
    11833U,	// BDZLRm
    11801U,	// BDZLRp
    1098016U,	// BDZLm
    1097801U,	// BDZLp
    1098031U,	// BDZm
    1097816U,	// BDZp
    1102753U,	// BL
    1102753U,	// BL8
    6345633U,	// BL8_NOP
    6411169U,	// BL8_NOP_TLS
    1168289U,	// BL8_TLS
    1168289U,	// BL8_TLS_
    1116574U,	// BLA
    1116574U,	// BLA8
    6359454U,	// BLA8_NOP
    14308U,	// BLR
    14308U,	// BLR8
    14253U,	// BLRL
    1168289U,	// BL_TLS
    19893U,	// BPERMD
    19591U,	// BRINC
    13062U,	// CFENCE8
    14128U,	// CLRBHRB
    20844U,	// CLRLSLDI
    17235U,	// CLRLSLDIo
    21210U,	// CLRLSLWI
    17333U,	// CLRLSLWIo
    20879U,	// CLRRDI
    17262U,	// CLRRDIo
    21251U,	// CLRRWI
    17362U,	// CLRRWIo
    19197U,	// CMPB
    19197U,	// CMPB8
    19957U,	// CMPD
    20872U,	// CMPDI
    19203U,	// CMPEQB
    19864U,	// CMPLD
    20836U,	// CMPLDI
    26316U,	// CMPLW
    21194U,	// CMPLWI
    50350859U,	// CMPRB
    50350859U,	// CMPRB8
    26573U,	// CMPW
    21244U,	// CMPWI
    536891044U,	// CNTLZD
    536887924U,	// CNTLZDo
    536897807U,	// CNTLZW
    536897807U,	// CNTLZW8
    536889054U,	// CNTLZW8o
    536889054U,	// CNTLZWo
    536891059U,	// CNTTZD
    536887933U,	// CNTTZDo
    536897822U,	// CNTTZW
    536897822U,	// CNTTZW8
    536889063U,	// CNTTZW8o
    536889063U,	// CNTTZWo
    14330U,	// CP_ABORT
    27984U,	// CP_COPY
    27984U,	// CP_COPY8
    536896390U,	// CP_COPY_FIRST
    536898896U,	// CP_COPYx
    20279U,	// CP_PASTE
    20279U,	// CP_PASTE8
    17086U,	// CP_PASTE8o
    536896339U,	// CP_PASTE_LAST
    17086U,	// CP_PASTEo
    536891191U,	// CP_PASTEx
    12808U,	// CR6SET
    12794U,	// CR6UNSET
    19943U,	// CRAND
    19505U,	// CRANDC
    25781U,	// CREQV
    19927U,	// CRNAND
    24348U,	// CRNOR
    24362U,	// CROR
    19612U,	// CRORC
    67134645U,	// CRSET
    67133256U,	// CRUNSET
    24392U,	// CRXOR
    1668918U,	// CTRL_DEP
    1181815U,	// DCBA
    151396U,	// DCBF
    1184732U,	// DCBFL
    1186481U,	// DCBFLP
    1183588U,	// DCBFx
    1184047U,	// DCBI
    1188730U,	// DCBST
    156428U,	// DCBT
    620897048U,	// DCBTCT
    620896355U,	// DCBTDS
    156562U,	// DCBTST
    620897056U,	// DCBTSTCT
    620896363U,	// DCBTSTDS
    1188782U,	// DCBTSTT
    1188754U,	// DCBTSTx
    1188769U,	// DCBTT
    1188620U,	// DCBTx
    1191254U,	// DCBZ
    1184818U,	// DCBZL
    536891713U,	// DCCCI
    12411U,	// DFLOADf32
    12700U,	// DFLOADf64
    12422U,	// DFSTOREf32
    12711U,	// DFSTOREf64
    20119U,	// DIVD
    20170U,	// DIVDE
    25606U,	// DIVDEU
    17973U,	// DIVDEUo
    17037U,	// DIVDEo
    25599U,	// DIVDU
    17965U,	// DIVDUo
    17005U,	// DIVDo
    26870U,	// DIVW
    20293U,	// DIVWE
    25614U,	// DIVWEU
    17982U,	// DIVWEUo
    17094U,	// DIVWEo
    25720U,	// DIVWU
    18009U,	// DIVWUo
    18124U,	// DIVWo
    1221005U,	// DSS
    14246U,	// DSSALL
    1711465345U,	// DST
    1711465345U,	// DST64
    1711465370U,	// DSTST
    1711465370U,	// DSTST64
    1711465399U,	// DSTSTT
    1711465399U,	// DSTSTT64
    1711465384U,	// DSTT
    1711465384U,	// DSTT64
    13501U,	// DYNALLOC
    13051U,	// DYNALLOC8
    13984U,	// DYNAREAOFFSET
    13355U,	// DYNAREAOFFSET8
    12310U,	// EH_SjLj_LongJmp32
    12663U,	// EH_SjLj_LongJmp64
    12329U,	// EH_SjLj_SetJmp32
    12682U,	// EH_SjLj_SetJmp64
    1097729U,	// EH_SjLj_Setup
    25776U,	// EQV
    25776U,	// EQV8
    18024U,	// EQV8o
    18024U,	// EQVo
    536895402U,	// EVABS
    83912354U,	// EVADDIW
    536896796U,	// EVADDSMIAAW
    536896928U,	// EVADDSSIAAW
    536896862U,	// EVADDUMIAAW
    536896994U,	// EVADDUSIAAW
    26176U,	// EVADDW
    19950U,	// EVAND
    19513U,	// EVANDC
    24081U,	// EVCMPEQ
    24996U,	// EVCMPGTS
    25666U,	// EVCMPGTU
    25006U,	// EVCMPLTS
    25676U,	// EVCMPLTU
    536897556U,	// EVCNTLSW
    536897805U,	// EVCNTLZW
    25168U,	// EVDIVWS
    25718U,	// EVDIVWU
    25788U,	// EVEQV
    536890208U,	// EVEXTSB
    536891538U,	// EVEXTSH
    117460295U,	// EVLDD
    27077U,	// EVLDDX
    117460992U,	// EVLDH
    27181U,	// EVLDHX
    117466696U,	// EVLDW
    27872U,	// EVLDWX
    117465790U,	// EVLHHESPLAT
    27612U,	// EVLHHESPLATX
    117465815U,	// EVLHHOSSPLAT
    27639U,	// EVLHHOSSPLATX
    117465829U,	// EVLHHOUSPLAT
    27654U,	// EVLHHOUSPLATX
    117460712U,	// EVLWHE
    27152U,	// EVLWHEX
    117465472U,	// EVLWHOS
    27584U,	// EVLWHOSX
    117466149U,	// EVLWHOU
    27770U,	// EVLWHOUX
    117465803U,	// EVLWHSPLAT
    27626U,	// EVLWHSPLATX
    117465843U,	// EVLWWSPLAT
    27669U,	// EVLWWSPLATX
    20943U,	// EVMERGEHI
    22077U,	// EVMERGEHILO
    22066U,	// EVMERGELO
    20954U,	// EVMERGELOHI
    18429U,	// EVMHEGSMFAA
    21861U,	// EVMHEGSMFAN
    18477U,	// EVMHEGSMIAA
    21909U,	// EVMHEGSMIAN
    18514U,	// EVMHEGUMIAA
    21946U,	// EVMHEGUMIAN
    20336U,	// EVMHESMF
    18562U,	// EVMHESMFA
    25832U,	// EVMHESMFAAW
    26357U,	// EVMHESMFANW
    21005U,	// EVMHESMI
    18653U,	// EVMHESMIA
    25897U,	// EVMHESMIAAW
    26409U,	// EVMHESMIANW
    20411U,	// EVMHESSF
    18605U,	// EVMHESSFA
    25858U,	// EVMHESSFAAW
    26383U,	// EVMHESSFANW
    26029U,	// EVMHESSIAAW
    26487U,	// EVMHESSIANW
    21044U,	// EVMHEUMI
    18696U,	// EVMHEUMIA
    25963U,	// EVMHEUMIAAW
    26448U,	// EVMHEUMIANW
    26095U,	// EVMHEUSIAAW
    26526U,	// EVMHEUSIANW
    18442U,	// EVMHOGSMFAA
    21874U,	// EVMHOGSMFAN
    18490U,	// EVMHOGSMIAA
    21922U,	// EVMHOGSMIAN
    18527U,	// EVMHOGUMIAA
    21959U,	// EVMHOGUMIAN
    20356U,	// EVMHOSMF
    18584U,	// EVMHOSMFA
    25845U,	// EVMHOSMFAAW
    26370U,	// EVMHOSMFANW
    21025U,	// EVMHOSMI
    18675U,	// EVMHOSMIA
    25937U,	// EVMHOSMIAAW
    26435U,	// EVMHOSMIANW
    20431U,	// EVMHOSSF
    18627U,	// EVMHOSSFA
    25871U,	// EVMHOSSFAAW
    26396U,	// EVMHOSSFANW
    26069U,	// EVMHOSSIAAW
    26513U,	// EVMHOSSIANW
    21074U,	// EVMHOUMI
    18729U,	// EVMHOUMIA
    26003U,	// EVMHOUMIAAW
    26474U,	// EVMHOUMIANW
    26135U,	// EVMHOUSIAAW
    26552U,	// EVMHOUSIANW
    536889784U,	// EVMRA
    20346U,	// EVMWHSMF
    18573U,	// EVMWHSMFA
    21015U,	// EVMWHSMI
    18664U,	// EVMWHSMIA
    20421U,	// EVMWHSSF
    18616U,	// EVMWHSSFA
    21054U,	// EVMWHUMI
    18707U,	// EVMWHUMIA
    25924U,	// EVMWLSMIAAW
    26422U,	// EVMWLSMIANW
    26056U,	// EVMWLSSIAAW
    26500U,	// EVMWLSSIANW
    21064U,	// EVMWLUMI
    18718U,	// EVMWLUMIA
    25990U,	// EVMWLUMIAAW
    26461U,	// EVMWLUMIANW
    26122U,	// EVMWLUSIAAW
    26539U,	// EVMWLUSIANW
    20366U,	// EVMWSMF
    18595U,	// EVMWSMFA
    18455U,	// EVMWSMFAA
    21887U,	// EVMWSMFAN
    21035U,	// EVMWSMI
    18686U,	// EVMWSMIA
    18503U,	// EVMWSMIAA
    21935U,	// EVMWSMIAN
    20441U,	// EVMWSSF
    18638U,	// EVMWSSFA
    18466U,	// EVMWSSFAA
    21898U,	// EVMWSSFAN
    21084U,	// EVMWUMI
    18740U,	// EVMWUMIA
    18540U,	// EVMWUMIAA
    21972U,	// EVMWUMIAN
    19935U,	// EVNAND
    536891378U,	// EVNEG
    24355U,	// EVNOR
    24368U,	// EVOR
    19619U,	// EVORC
    26323U,	// EVRLW
    21202U,	// EVRLWI
    536897103U,	// EVRNDW
    26330U,	// EVSLW
    21228U,	// EVSLWI
    536891844U,	// EVSPLATFI
    536892080U,	// EVSPLATI
    24924U,	// EVSRWIS
    25628U,	// EVSRWIU
    25096U,	// EVSRWS
    25704U,	// EVSRWU
    117460311U,	// EVSTDD
    27085U,	// EVSTDDX
    117460999U,	// EVSTDH
    27189U,	// EVSTDHX
    117466711U,	// EVSTDW
    27880U,	// EVSTDWX
    117460720U,	// EVSTWHE
    27161U,	// EVSTWHEX
    117462569U,	// EVSTWHO
    27343U,	// EVSTWHOX
    117460812U,	// EVSTWWE
    27171U,	// EVSTWWEX
    117462722U,	// EVSTWWO
    27353U,	// EVSTWWOX
    536896822U,	// EVSUBFSMIAAW
    536896954U,	// EVSUBFSSIAAW
    536896888U,	// EVSUBFUMIAAW
    536897020U,	// EVSUBFUSIAAW
    26224U,	// EVSUBFW
    134243961U,	// EVSUBIFW
    24399U,	// EVXOR
    20854U,	// EXTLDI
    17246U,	// EXTLDIo
    21236U,	// EXTLWI
    17353U,	// EXTLWIo
    20903U,	// EXTRDI
    17289U,	// EXTRDIo
    21275U,	// EXTRWI
    17389U,	// EXTRWIo
    536890210U,	// EXTSB
    536890210U,	// EXTSB8
    536890210U,	// EXTSB8_32_64
    536887633U,	// EXTSB8o
    536887633U,	// EXTSBo
    536891540U,	// EXTSH
    536891540U,	// EXTSH8
    536891540U,	// EXTSH8_32_64
    536888074U,	// EXTSH8o
    536888074U,	// EXTSHo
    536897593U,	// EXTSW
    536897593U,	// EXTSW_32
    536897593U,	// EXTSW_32_64
    536889006U,	// EXTSW_32_64o
    536889006U,	// EXTSWo
    14284U,	// EnforceIEIO
    536895387U,	// FABSD
    536888672U,	// FABSDo
    536895387U,	// FABSS
    536888672U,	// FABSSo
    19710U,	// FADD
    24585U,	// FADDS
    17809U,	// FADDSo
    16890U,	// FADDo
    0U,	// FADDrtz
    536890746U,	// FCFID
    536895579U,	// FCFIDS
    536888748U,	// FCFIDSo
    536896482U,	// FCFIDU
    536895938U,	// FCFIDUS
    536888815U,	// FCFIDUSo
    536888859U,	// FCFIDUo
    536887834U,	// FCFIDo
    25646U,	// FCMPUD
    25646U,	// FCMPUS
    21996U,	// FCPSGND
    17484U,	// FCPSGNDo
    21996U,	// FCPSGNS
    17484U,	// FCPSGNSo
    536890755U,	// FCTID
    536896492U,	// FCTIDU
    536899005U,	// FCTIDUZ
    536889146U,	// FCTIDUZo
    536888868U,	// FCTIDUo
    536898920U,	// FCTIDZ
    536889112U,	// FCTIDZo
    536887842U,	// FCTIDo
    536897197U,	// FCTIW
    536896608U,	// FCTIWU
    536899016U,	// FCTIWUZ
    536889156U,	// FCTIWUZo
    536888912U,	// FCTIWUo
    536899027U,	// FCTIWZ
    536889166U,	// FCTIWZo
    536888967U,	// FCTIWo
    25754U,	// FDIV
    25089U,	// FDIVS
    17913U,	// FDIVSo
    18017U,	// FDIVo
    19718U,	// FMADD
    24594U,	// FMADDS
    17817U,	// FMADDSo
    16897U,	// FMADDo
    536895209U,	// FMR
    536888640U,	// FMRo
    19415U,	// FMSUB
    24564U,	// FMSUBS
    17783U,	// FMSUBSo
    16747U,	// FMSUBo
    21513U,	// FMUL
    24943U,	// FMULS
    17878U,	// FMULSo
    17422U,	// FMULo
    536895395U,	// FNABSD
    536888679U,	// FNABSDo
    536895395U,	// FNABSS
    536888679U,	// FNABSSo
    536891372U,	// FNEGD
    536888046U,	// FNEGDo
    536891372U,	// FNEGS
    536888046U,	// FNEGSo
    19727U,	// FNMADD
    24604U,	// FNMADDS
    17826U,	// FNMADDSo
    16905U,	// FNMADDo
    19424U,	// FNMSUB
    24574U,	// FNMSUBS
    17792U,	// FNMSUBSo
    16755U,	// FNMSUBo
    536891167U,	// FRE
    536895679U,	// FRES
    536888757U,	// FRESo
    536887982U,	// FREo
    536892627U,	// FRIMD
    536888352U,	// FRIMDo
    536892627U,	// FRIMS
    536888352U,	// FRIMSo
    536892925U,	// FRIND
    536888426U,	// FRINDo
    536892925U,	// FRINS
    536888426U,	// FRINSo
    536894123U,	// FRIPD
    536888533U,	// FRIPDo
    536894123U,	// FRIPS
    536888533U,	// FRIPSo
    536898991U,	// FRIZD
    536889130U,	// FRIZDo
    536898991U,	// FRIZS
    536889130U,	// FRIZSo
    536894824U,	// FRSP
    536888576U,	// FRSPo
    536891182U,	// FRSQRTE
    536895687U,	// FRSQRTES
    536888764U,	// FRSQRTESo
    536887988U,	// FRSQRTEo
    21443U,	// FSELD
    17415U,	// FSELDo
    21443U,	// FSELS
    17415U,	// FSELSo
    536896324U,	// FSQRT
    536895928U,	// FSQRTS
    536888798U,	// FSQRTSo
    536888842U,	// FSQRTo
    19407U,	// FSUB
    24555U,	// FSUBS
    17775U,	// FSUBSo
    16740U,	// FSUBo
    25760U,	// FTDIV
    536896331U,	// FTSQRT
    13935U,	// GETtlsADDR
    12398U,	// GETtlsADDR32
    13921U,	// GETtlsldADDR
    12383U,	// GETtlsldADDR32
    14190U,	// HRFID
    1184053U,	// ICBI
    199808U,	// ICBLC
    197907U,	// ICBLQ
    205586U,	// ICBT
    205157U,	// ICBTLS
    536891720U,	// ICCCI
    21220U,	// INSLWI
    17344U,	// INSLWIo
    20887U,	// INSRDI
    17271U,	// INSRDIo
    21259U,	// INSRWI
    17371U,	// INSRWIo
    21449U,	// ISEL
    21449U,	// ISEL8
    14163U,	// ISYNC
    151013791U,	// LA
    117459359U,	// LAx
    553675533U,	// LBARX
    2164288269U,	// LBARXL
    117468508U,	// LBZ
    117468508U,	// LBZ8
    27267U,	// LBZCIX
    167797887U,	// LBZU
    167797887U,	// LBZU8
    184577203U,	// LBZUX
    184577203U,	// LBZUX8
    553676066U,	// LBZX
    553676066U,	// LBZX8
    117460365U,	// LD
    553675540U,	// LDARX
    2164288276U,	// LDARXL
    25265U,	// LDAT
    553675561U,	// LDBRX
    27236U,	// LDCIX
    553675458U,	// LDMX
    167797748U,	// LDU
    184577119U,	// LDUX
    553675244U,	// LDX
    13830U,	// LDgotTprelL
    12280U,	// LDgotTprelL32
    14175U,	// LDtoc
    14082U,	// LDtocBA
    14082U,	// LDtocCPT
    13778U,	// LDtocJTI
    13788U,	// LDtocL
    117460319U,	// LFD
    167797707U,	// LFDU
    184577102U,	// LFDUX
    553675224U,	// LFDX
    553675133U,	// LFIWAX
    553676089U,	// LFIWZX
    117465303U,	// LFS
    167797813U,	// LFSU
    184577179U,	// LFSUX
    553675687U,	// LFSX
    117459160U,	// LHA
    117459160U,	// LHA8
    553675547U,	// LHARX
    2164288283U,	// LHARXL
    167797695U,	// LHAU
    167797695U,	// LHAU8
    184577058U,	// LHAUX
    184577058U,	// LHAUX8
    553675116U,	// LHAX
    553675116U,	// LHAX8
    553675576U,	// LHBRX
    553675576U,	// LHBRX8
    117468550U,	// LHZ
    117468550U,	// LHZ8
    27275U,	// LHZCIX
    167797893U,	// LHZU
    167797893U,	// LHZU8
    184577210U,	// LHZUX
    184577210U,	// LHZUX8
    553676081U,	// LHZX
    553676081U,	// LHZX8
    201347562U,	// LI
    201347562U,	// LI8
    201351504U,	// LIS
    201351504U,	// LIS8
    117466849U,	// LMW
    21283U,	// LSWI
    553675156U,	// LVEBX
    553675326U,	// LVEHX
    553676017U,	// LVEWX
    553669633U,	// LVSL
    553672574U,	// LVSR
    553675976U,	// LVX
    553669669U,	// LVXL
    117459391U,	// LWA
    553675554U,	// LWARX
    2164288290U,	// LWARXL
    25343U,	// LWAT
    184577065U,	// LWAUX
    553675150U,	// LWAX
    553675150U,	// LWAX_32
    117459391U,	// LWA_32
    553675601U,	// LWBRX
    553675601U,	// LWBRX8
    117468635U,	// LWZ
    117468635U,	// LWZ8
    27283U,	// LWZCIX
    167797899U,	// LWZU
    167797899U,	// LWZU8
    184577217U,	// LWZUX
    184577217U,	// LWZUX8
    553676106U,	// LWZX
    553676106U,	// LWZX8
    14182U,	// LWZtoc
    117460539U,	// LXSD
    553675259U,	// LXSDX
    553676057U,	// LXSIBZX
    553676072U,	// LXSIHZX
    553675141U,	// LXSIWAX
    553676097U,	// LXSIWZX
    117464449U,	// LXSSP
    553675516U,	// LXSSPX
    117466313U,	// LXV
    553675080U,	// LXVB16X
    553675046U,	// LXVD2X
    553675670U,	// LXVDSX
    553675099U,	// LXVH8X
    21528U,	// LXVL
    21475U,	// LXVLL
    553675063U,	// LXVW4X
    553675732U,	// LXVWSX
    553675987U,	// LXVX
    1220233U,	// MBAR
    536891287U,	// MCRF
    536895708U,	// MCRFS
    1076084U,	// MCRXRX
    218123963U,	// MFBHRBE
    1072804U,	// MFCR
    1072804U,	// MFCR8
    1073035U,	// MFCTR
    1073035U,	// MFCTR8
    536895119U,	// MFDCR
    1073361U,	// MFFS
    1066439U,	// MFFSo
    1072859U,	// MFLR
    1072859U,	// MFLR8
    1073002U,	// MFMSR
    234901405U,	// MFOCRF
    234901405U,	// MFOCRF8
    536895214U,	// MFPMR
    536895318U,	// MFSPR
    536895318U,	// MFSPR8
    251682660U,	// MFSR
    536892931U,	// MFSRIN
    536890225U,	// MFTB
    6840150U,	// MFTB8
    536890890U,	// MFVRD
    7364438U,	// MFVRSAVE
    7364438U,	// MFVRSAVEv
    1072818U,	// MFVSCR
    536890890U,	// MFVSRD
    536890783U,	// MFVSRLD
    536899040U,	// MFVSRWZ
    19994U,	// MODSD
    26592U,	// MODSW
    20076U,	// MODUD
    26767U,	// MODUW
    14155U,	// MSGSYNC
    14169U,	// MSYNC
    536891309U,	// MTCRF
    536891309U,	// MTCRF8
    1073042U,	// MTCTR
    1073042U,	// MTCTR8
    1073042U,	// MTCTR8loop
    1073042U,	// MTCTRloop
    604167837U,	// MTDCR
    1214295U,	// MTFSB0
    1214303U,	// MTFSB1
    20404U,	// MTFSF
    20924U,	// MTFSFI
    17298U,	// MTFSFIo
    536891316U,	// MTFSFb
    17126U,	// MTFSFo
    1072865U,	// MTLR
    1072865U,	// MTLR8
    536895345U,	// MTMSR
    536890882U,	// MTMSRD
    216997U,	// MTOCRF
    216997U,	// MTOCRF8
    536895221U,	// MTPMR
    536895325U,	// MTSPR
    536895325U,	// MTSPR8
    237432U,	// MTSR
    536892939U,	// MTSRIN
    1065204U,	// MTVRSAVE
    1229044U,	// MTVRSAVEv
    1072826U,	// MTVSCR
    536890898U,	// MTVSRD
    19790U,	// MTVSRDD
    536889796U,	// MTVSRWA
    536896016U,	// MTVSRWS
    536899049U,	// MTVSRWZ
    19825U,	// MULHD
    25560U,	// MULHDU
    17938U,	// MULHDUo
    16914U,	// MULHDo
    26267U,	// MULHW
    25686U,	// MULHWU
    17991U,	// MULHWUo
    18047U,	// MULHWo
    19857U,	// MULLD
    16938U,	// MULLDo
    20974U,	// MULLI
    20974U,	// MULLI8
    26309U,	// MULLW
    18063U,	// MULLWo
    13959U,	// MoveGOTtoLR
    13947U,	// MovePCtoLR
    13342U,	// MovePCtoLR8
    19921U,	// NAND
    19921U,	// NAND8
    16952U,	// NAND8o
    16952U,	// NANDo
    14290U,	// NAP
    536891373U,	// NEG
    536891373U,	// NEG8
    536888047U,	// NEG8o
    536888047U,	// NEGo
    14299U,	// NOP
    11982U,	// NOP_GT_PWR6
    11994U,	// NOP_GT_PWR7
    24343U,	// NOR
    24343U,	// NOR8
    17734U,	// NOR8o
    17734U,	// NORo
    24336U,	// OR
    24336U,	// OR8
    17735U,	// OR8o
    19607U,	// ORC
    19607U,	// ORC8
    16866U,	// ORC8o
    16866U,	// ORCo
    21152U,	// ORI
    21152U,	// ORI8
    24918U,	// ORIS
    24918U,	// ORIS8
    17735U,	// ORo
    536890964U,	// POPCNTD
    536897626U,	// POPCNTW
    14059U,	// PPC32GOT
    14069U,	// PPC32PICGOT
    21101U,	// QVALIGNI
    21101U,	// QVALIGNIb
    21101U,	// QVALIGNIs
    21157U,	// QVESPLATI
    21157U,	// QVESPLATIb
    21157U,	// QVESPLATIs
    536895385U,	// QVFABS
    536895385U,	// QVFABSs
    19708U,	// QVFADD
    24583U,	// QVFADDS
    24583U,	// QVFADDSs
    536890744U,	// QVFCFID
    536895577U,	// QVFCFIDS
    536896480U,	// QVFCFIDU
    536895936U,	// QVFCFIDUS
    536890744U,	// QVFCFIDb
    24071U,	// QVFCMPEQ
    24071U,	// QVFCMPEQb
    24071U,	// QVFCMPEQbs
    25386U,	// QVFCMPGT
    25386U,	// QVFCMPGTb
    25386U,	// QVFCMPGTbs
    25402U,	// QVFCMPLT
    25402U,	// QVFCMPLTb
    25402U,	// QVFCMPLTbs
    21994U,	// QVFCPSGN
    21994U,	// QVFCPSGNs
    536890753U,	// QVFCTID
    536896490U,	// QVFCTIDU
    536899003U,	// QVFCTIDUZ
    536898918U,	// QVFCTIDZ
    536890753U,	// QVFCTIDb
    536897195U,	// QVFCTIW
    536896606U,	// QVFCTIWU
    536899014U,	// QVFCTIWUZ
    536899025U,	// QVFCTIWZ
    21397U,	// QVFLOGICAL
    21397U,	// QVFLOGICALb
    21397U,	// QVFLOGICALs
    19716U,	// QVFMADD
    24592U,	// QVFMADDS
    24592U,	// QVFMADDSs
    536895207U,	// QVFMR
    536895207U,	// QVFMRb
    536895207U,	// QVFMRs
    19413U,	// QVFMSUB
    24562U,	// QVFMSUBS
    24562U,	// QVFMSUBSs
    21511U,	// QVFMUL
    24941U,	// QVFMULS
    24941U,	// QVFMULSs
    536895393U,	// QVFNABS
    536895393U,	// QVFNABSs
    536891370U,	// QVFNEG
    536891370U,	// QVFNEGs
    19725U,	// QVFNMADD
    24602U,	// QVFNMADDS
    24602U,	// QVFNMADDSs
    19422U,	// QVFNMSUB
    24572U,	// QVFNMSUBS
    24572U,	// QVFNMSUBSs
    21783U,	// QVFPERM
    21783U,	// QVFPERMs
    536891165U,	// QVFRE
    536895677U,	// QVFRES
    536895677U,	// QVFRESs
    536892625U,	// QVFRIM
    536892625U,	// QVFRIMs
    536892923U,	// QVFRIN
    536892923U,	// QVFRINs
    536894121U,	// QVFRIP
    536894121U,	// QVFRIPs
    536898989U,	// QVFRIZ
    536898989U,	// QVFRIZs
    536894822U,	// QVFRSP
    536894822U,	// QVFRSPs
    536891180U,	// QVFRSQRTE
    536895685U,	// QVFRSQRTES
    536895685U,	// QVFRSQRTESs
    21441U,	// QVFSEL
    21441U,	// QVFSELb
    21441U,	// QVFSELbb
    21441U,	// QVFSELbs
    19405U,	// QVFSUB
    24553U,	// QVFSUBS
    24553U,	// QVFSUBSs
    21983U,	// QVFTSTNAN
    21983U,	// QVFTSTNANb
    21983U,	// QVFTSTNANbs
    19762U,	// QVFXMADD
    24642U,	// QVFXMADDS
    21519U,	// QVFXMUL
    24950U,	// QVFXMULS
    19735U,	// QVFXXCPNMADD
    24613U,	// QVFXXCPNMADDS
    19772U,	// QVFXXMADD
    24653U,	// QVFXXMADDS
    19749U,	// QVFXXNPMADD
    24628U,	// QVFXXNPMADDS
    268456271U,	// QVGPCI
    553675831U,	// QVLFCDUX
    553667112U,	// QVLFCDUXA
    553675186U,	// QVLFCDX
    553667032U,	// QVLFCDXA
    553675908U,	// QVLFCSUX
    553667156U,	// QVLFCSUXA
    553675651U,	// QVLFCSX
    553667072U,	// QVLFCSXA
    553675651U,	// QVLFCSXs
    184577100U,	// QVLFDUX
    553667135U,	// QVLFDUXA
    553675222U,	// QVLFDX
    553667053U,	// QVLFDXA
    553675222U,	// QVLFDXb
    553675131U,	// QVLFIWAX
    553667021U,	// QVLFIWAXA
    553676087U,	// QVLFIWZX
    553667211U,	// QVLFIWZXA
    184577177U,	// QVLFSUX
    553667179U,	// QVLFSUXA
    553675685U,	// QVLFSX
    553667093U,	// QVLFSXA
    553675685U,	// QVLFSXb
    553675685U,	// QVLFSXs
    553675239U,	// QVLPCLDX
    553675702U,	// QVLPCLSX
    7891894U,	// QVLPCLSXint
    553675249U,	// QVLPCRDX
    553675722U,	// QVLPCRSX
    553675841U,	// QVSTFCDUX
    553667123U,	// QVSTFCDUXA
    553669471U,	// QVSTFCDUXI
    553666924U,	// QVSTFCDUXIA
    553675195U,	// QVSTFCDX
    553667042U,	// QVSTFCDXA
    553669429U,	// QVSTFCDXI
    553666878U,	// QVSTFCDXIA
    553675918U,	// QVSTFCSUX
    553667167U,	// QVSTFCSUXA
    553669494U,	// QVSTFCSUXI
    553666949U,	// QVSTFCSUXIA
    553675660U,	// QVSTFCSX
    553667082U,	// QVSTFCSXA
    553669450U,	// QVSTFCSXI
    553666901U,	// QVSTFCSXIA
    553675660U,	// QVSTFCSXs
    184740949U,	// QVSTFDUX
    553667145U,	// QVSTFDUXA
    553669483U,	// QVSTFDUXI
    553666937U,	// QVSTFDUXIA
    553675230U,	// QVSTFDX
    553667062U,	// QVSTFDXA
    553669440U,	// QVSTFDXI
    553666890U,	// QVSTFDXIA
    553675230U,	// QVSTFDXb
    553676032U,	// QVSTFIWX
    553667200U,	// QVSTFIWXA
    184741026U,	// QVSTFSUX
    553667189U,	// QVSTFSUXA
    553669506U,	// QVSTFSUXI
    553666962U,	// QVSTFSUXIA
    184741026U,	// QVSTFSUXs
    553675693U,	// QVSTFSX
    553667102U,	// QVSTFSXA
    553669461U,	// QVSTFSXI
    553666913U,	// QVSTFSXIA
    553675693U,	// QVSTFSXs
    13867U,	// RESTORE_CR
    13999U,	// RESTORE_CRBIT
    13748U,	// RESTORE_VRSAVE
    14208U,	// RFCI
    14219U,	// RFDI
    248490U,	// RFEBB
    14224U,	// RFI
    14191U,	// RFID
    14213U,	// RFMCI
    21418U,	// RLDCL
    17398U,	// RLDCLo
    24214U,	// RLDCR
    17711U,	// RLDCRo
    19542U,	// RLDIC
    21425U,	// RLDICL
    21425U,	// RLDICL_32
    21425U,	// RLDICL_32_64
    17406U,	// RLDICL_32o
    17406U,	// RLDICLo
    24234U,	// RLDICR
    24234U,	// RLDICR_32
    17719U,	// RLDICRo
    16835U,	// RLDICo
    2785038845U,	// RLDIMI
    2785035163U,	// RLDIMIo
    3321909765U,	// RLWIMI
    3321909765U,	// RLWIMI8
    3321906084U,	// RLWIMI8o
    20997U,	// RLWIMIbm
    3321906084U,	// RLWIMIo
    17316U,	// RLWIMIobm
    21729U,	// RLWINM
    21729U,	// RLWINM8
    17447U,	// RLWINM8o
    21729U,	// RLWINMbm
    17447U,	// RLWINMo
    17447U,	// RLWINMobm
    21738U,	// RLWNM
    21738U,	// RLWNM8
    17456U,	// RLWNM8o
    21738U,	// RLWNMbm
    17456U,	// RLWNMo
    17456U,	// RLWNMobm
    20895U,	// ROTRDI
    17280U,	// ROTRDIo
    21267U,	// ROTRWI
    17380U,	// ROTRWIo
    13493U,	// ReadTB
    1068202U,	// SC
    12744U,	// SELECT_CC_F4
    13071U,	// SELECT_CC_F8
    12769U,	// SELECT_CC_I4
    13116U,	// SELECT_CC_I8
    13511U,	// SELECT_CC_QBRC
    13540U,	// SELECT_CC_QFRC
    13629U,	// SELECT_CC_QSRC
    13600U,	// SELECT_CC_VRRC
    13569U,	// SELECT_CC_VSFRC
    13689U,	// SELECT_CC_VSRC
    13658U,	// SELECT_CC_VSSRC
    12758U,	// SELECT_F4
    13085U,	// SELECT_F8
    12783U,	// SELECT_I4
    13290U,	// SELECT_I8
    13527U,	// SELECT_QBRC
    13556U,	// SELECT_QFRC
    13645U,	// SELECT_QSRC
    13616U,	// SELECT_VRRC
    13586U,	// SELECT_VSFRC
    13705U,	// SELECT_VSRC
    13675U,	// SELECT_VSSRC
    14111U,	// SLBIA
    1068793U,	// SLBIE
    536891362U,	// SLBIEG
    536891089U,	// SLBMFEE
    536896657U,	// SLBMFEV
    536891172U,	// SLBMTE
    14139U,	// SLBSYNC
    19887U,	// SLD
    20848U,	// SLDI
    17239U,	// SLDIo
    16946U,	// SLDo
    26332U,	// SLW
    26332U,	// SLW8
    18071U,	// SLW8o
    21214U,	// SLWI
    17337U,	// SLWIo
    18071U,	// SLWo
    13879U,	// SPILL_CR
    14014U,	// SPILL_CRBIT
    13764U,	// SPILL_VRSAVE
    19686U,	// SRAD
    20823U,	// SRADI
    20823U,	// SRADI_32
    17227U,	// SRADIo
    16883U,	// SRADo
    26161U,	// SRAW
    21178U,	// SRAWI
    17325U,	// SRAWIo
    18030U,	// SRAWo
    19973U,	// SRD
    20889U,	// SRDI
    17273U,	// SRDIo
    16966U,	// SRDo
    26587U,	// SRW
    26587U,	// SRW8
    18077U,	// SRW8o
    21261U,	// SRWI
    17373U,	// SRWIo
    18077U,	// SRWo
    117459859U,	// STB
    117459859U,	// STB8
    27228U,	// STBCIX
    553666288U,	// STBCX
    167961541U,	// STBU
    167961541U,	// STBU8
    184740912U,	// STBUX
    184740912U,	// STBUX8
    553675180U,	// STBX
    553675180U,	// STBX8
    117460583U,	// STD
    25271U,	// STDAT
    553675568U,	// STDBRX
    27243U,	// STDCIX
    553666296U,	// STDCX
    167961593U,	// STDU
    184740965U,	// STDUX
    553675274U,	// STDX
    117460324U,	// STFD
    167961553U,	// STFDU
    184740951U,	// STFDUX
    553675232U,	// STFDX
    553676034U,	// STFIWX
    117465315U,	// STFS
    167961659U,	// STFSU
    184741028U,	// STFSUX
    553675695U,	// STFSX
    117461183U,	// STH
    117461183U,	// STH8
    553675583U,	// STHBRX
    27251U,	// STHCIX
    553666304U,	// STHCX
    167961622U,	// STHU
    167961622U,	// STHU8
    184740979U,	// STHUX
    184740979U,	// STHUX8
    553675350U,	// STHX
    553675350U,	// STHX8
    117466854U,	// STMW
    14303U,	// STOP
    21289U,	// STSWI
    553675163U,	// STVEBX
    553675333U,	// STVEHX
    553676024U,	// STVEWX
    553675981U,	// STVX
    553669675U,	// STVXL
    117467256U,	// STW
    117467256U,	// STW8
    25349U,	// STWAT
    553675608U,	// STWBRX
    27259U,	// STWCIX
    553666312U,	// STWCX
    167961712U,	// STWU
    167961712U,	// STWU8
    184741036U,	// STWUX
    184741036U,	// STWUX8
    553676051U,	// STWX
    553676051U,	// STWX8
    117460545U,	// STXSD
    553675266U,	// STXSDX
    553675171U,	// STXSIBX
    553675171U,	// STXSIBXv
    553675341U,	// STXSIHX
    553675341U,	// STXSIHXv
    553676042U,	// STXSIWX
    117464456U,	// STXSSP
    553675524U,	// STXSSPX
    117466318U,	// STXV
    553675089U,	// STXVB16X
    553675054U,	// STXVD2X
    553675107U,	// STXVH8X
    21534U,	// STXVL
    21482U,	// STXVLL
    553675071U,	// STXVW4X
    553675993U,	// STXVX
    20330U,	// SUBF
    20330U,	// SUBF8
    17119U,	// SUBF8o
    19521U,	// SUBFC
    19521U,	// SUBFC8
    16811U,	// SUBFC8o
    16811U,	// SUBFCo
    20193U,	// SUBFE
    20193U,	// SUBFE8
    17045U,	// SUBFE8o
    17045U,	// SUBFEo
    19549U,	// SUBFIC
    19549U,	// SUBFIC8
    536891150U,	// SUBFME
    536891150U,	// SUBFME8
    536887973U,	// SUBFME8o
    536887973U,	// SUBFMEo
    536891228U,	// SUBFZE
    536891228U,	// SUBFZE8
    536888022U,	// SUBFZE8o
    536888022U,	// SUBFZEo
    17119U,	// SUBFo
    20795U,	// SUBI
    19528U,	// SUBIC
    16819U,	// SUBICo
    24898U,	// SUBIS
    1068174U,	// SYNC
    1230337U,	// TABORT
    8651168U,	// TABORTDC
    9175859U,	// TABORTDCI
    8651240U,	// TABORTWC
    9175871U,	// TABORTWCI
    1100455U,	// TAILB
    1100455U,	// TAILB8
    1116281U,	// TAILBA
    1116281U,	// TAILBA8
    14325U,	// TAILBCTR
    14325U,	// TAILBCTR8
    1328225U,	// TBEGIN
    1069965U,	// TCHECK
    13972U,	// TCHECK_RET
    537462768U,	// TCRETURNai
    537462675U,	// TCRETURNai8
    537447628U,	// TCRETURNdi
    537446305U,	// TCRETURNdi8
    537419388U,	// TCRETURNri
    537413551U,	// TCRETURNri8
    167503U,	// TD
    168367U,	// TDI
    1327679U,	// TEND
    14117U,	// TLBIA
    9621248U,	// TLBIE
    1070009U,	// TLBIEL
    536897906U,	// TLBIVAX
    1068426U,	// TLBLD
    1069543U,	// TLBLI
    14196U,	// TLBRE
    20246U,	// TLBRE2
    536898428U,	// TLBSX
    27516U,	// TLBSX2
    18192U,	// TLBSX2D
    14147U,	// TLBSYNC
    14202U,	// TLBWE
    20286U,	// TLBWE2
    14294U,	// TRAP
    11972U,	// TRECHKPT
    1229845U,	// TRECLAIM
    1328474U,	// TSR
    174156U,	// TW
    168752U,	// TWI
    536889277U,	// UPDATE_VRSAVE
    13856U,	// UpdateGBR
    19352U,	// VABSDUB
    20676U,	// VABSDUH
    26774U,	// VABSDUW
    24136U,	// VADDCUQ
    26758U,	// VADDCUW
    24167U,	// VADDECUQ
    21773U,	// VADDEUQM
    23064U,	// VADDFP
    24516U,	// VADDSBS
    24851U,	// VADDSHS
    25132U,	// VADDSWS
    21593U,	// VADDUBM
    24544U,	// VADDUBS
    21621U,	// VADDUDM
    21660U,	// VADDUHM
    24879U,	// VADDUHS
    21754U,	// VADDUQM
    21843U,	// VADDUWM
    25159U,	// VADDUWS
    19951U,	// VAND
    19514U,	// VANDC
    19233U,	// VAVGSB
    20563U,	// VAVGSH
    26608U,	// VAVGSW
    19370U,	// VAVGUB
    20694U,	// VAVGUH
    26792U,	// VAVGUW
    19892U,	// VBPERMD
    24090U,	// VBPERMQ
    3858787230U,	// VCFSX
    27550U,	// VCFSX_0
    3858787436U,	// VCFUX
    27756U,	// VCFUX_0
    24268U,	// VCIPHER
    25453U,	// VCIPHERLAST
    536890384U,	// VCLZB
    536891037U,	// VCLZD
    536891681U,	// VCLZH
    536890033U,	// VCLZLSBB
    536897798U,	// VCLZW
    23028U,	// VCMPBFP
    17578U,	// VCMPBFPo
    23127U,	// VCMPEQFP
    17599U,	// VCMPEQFPo
    19395U,	// VCMPEQUB
    16729U,	// VCMPEQUBo
    20091U,	// VCMPEQUD
    16983U,	// VCMPEQUDo
    20719U,	// VCMPEQUH
    17170U,	// VCMPEQUHo
    26817U,	// VCMPEQUW
    18102U,	// VCMPEQUWo
    23081U,	// VCMPGEFP
    17588U,	// VCMPGEFPo
    23137U,	// VCMPGTFP
    17610U,	// VCMPGTFPo
    19286U,	// VCMPGTSB
    16710U,	// VCMPGTSBo
    20009U,	// VCMPGTSD
    16972U,	// VCMPGTSDo
    20616U,	// VCMPGTSH
    17151U,	// VCMPGTSHo
    26671U,	// VCMPGTSW
    18083U,	// VCMPGTSWo
    19444U,	// VCMPGTUB
    16764U,	// VCMPGTUBo
    20101U,	// VCMPGTUD
    16994U,	// VCMPGTUDo
    20741U,	// VCMPGTUH
    17181U,	// VCMPGTUHo
    26852U,	// VCMPGTUW
    18113U,	// VCMPGTUWo
    19141U,	// VCMPNEB
    16700U,	// VCMPNEBo
    20495U,	// VCMPNEH
    17141U,	// VCMPNEHo
    26215U,	// VCMPNEW
    18037U,	// VCMPNEWo
    19462U,	// VCMPNEZB
    16775U,	// VCMPNEZBo
    20759U,	// VCMPNEZH
    17192U,	// VCMPNEZHo
    26876U,	// VCMPNEZW
    18131U,	// VCMPNEZWo
    3858784929U,	// VCTSXS
    25249U,	// VCTSXS_0
    3858784937U,	// VCTUXS
    25257U,	// VCTUXS_0
    536890391U,	// VCTZB
    536891052U,	// VCTZD
    536891688U,	// VCTZH
    536890043U,	// VCTZLSBB
    536897815U,	// VCTZW
    25789U,	// VEQV
    536894010U,	// VEXPTEFP
    637554248U,	// VEXTRACTD
    637553640U,	// VEXTRACTUB
    637554937U,	// VEXTRACTUH
    637561035U,	// VEXTRACTUW
    536890542U,	// VEXTSB2D
    536890542U,	// VEXTSB2Ds
    536896724U,	// VEXTSB2W
    536896724U,	// VEXTSB2Ws
    536890552U,	// VEXTSH2D
    536890552U,	// VEXTSH2Ds
    536896734U,	// VEXTSH2W
    536896734U,	// VEXTSH2Ws
    536890562U,	// VEXTSW2D
    536890562U,	// VEXTSW2Ds
    27300U,	// VEXTUBLX
    27463U,	// VEXTUBRX
    27310U,	// VEXTUHLX
    27488U,	// VEXTUHRX
    27320U,	// VEXTUWLX
    27498U,	// VEXTUWRX
    536890604U,	// VGBBD
    637553545U,	// VINSERTB
    637554269U,	// VINSERTD
    637554869U,	// VINSERTH
    637560931U,	// VINSERTW
    536893984U,	// VLOGEFP
    23055U,	// VMADDFP
    23147U,	// VMAXFP
    19305U,	// VMAXSB
    20019U,	// VMAXSD
    20635U,	// VMAXSH
    26688U,	// VMAXSW
    19454U,	// VMAXUB
    20111U,	// VMAXUD
    20751U,	// VMAXUH
    26862U,	// VMAXUW
    24828U,	// VMHADDSHS
    24839U,	// VMHRADDSHS
    23119U,	// VMINFP
    19269U,	// VMINSB
    20001U,	// VMINSD
    20599U,	// VMINSH
    26654U,	// VMINSW
    19378U,	// VMINUB
    20083U,	// VMINUD
    20702U,	// VMINUH
    26800U,	// VMINUW
    21649U,	// VMLADDUHM
    26207U,	// VMRGEW
    19150U,	// VMRGHB
    20504U,	// VMRGHH
    26250U,	// VMRGHW
    19168U,	// VMRGLB
    20512U,	// VMRGLH
    26292U,	// VMRGLW
    26565U,	// VMRGOW
    21574U,	// VMSUMMBM
    21630U,	// VMSUMSHM
    24860U,	// VMSUMSHS
    21602U,	// VMSUMUBM
    21669U,	// VMSUMUHM
    24888U,	// VMSUMUHS
    536895028U,	// VMUL10CUQ
    24145U,	// VMUL10ECUQ
    24177U,	// VMUL10EUQ
    536895018U,	// VMUL10UQ
    19224U,	// VMULESB
    20554U,	// VMULESH
    26599U,	// VMULESW
    19361U,	// VMULEUB
    20685U,	// VMULEUH
    26783U,	// VMULEUW
    19277U,	// VMULOSB
    20607U,	// VMULOSH
    26662U,	// VMULOSW
    19386U,	// VMULOUB
    20710U,	// VMULOUH
    26808U,	// VMULOUW
    21852U,	// VMULUWM
    19936U,	// VNAND
    24258U,	// VNCIPHER
    25439U,	// VNCIPHERLAST
    536890730U,	// VNEGD
    536897155U,	// VNEGW
    23037U,	// VNMSUBFP
    24356U,	// VNOR
    24369U,	// VOR
    19620U,	// VORC
    21792U,	// VPERM
    24316U,	// VPERMR
    24382U,	// VPERMXOR
    27372U,	// VPKPX
    24969U,	// VPKSDSS
    25035U,	// VPKSDUS
    24978U,	// VPKSHSS
    25053U,	// VPKSHUS
    24987U,	// VPKSWSS
    25071U,	// VPKSWUS
    21807U,	// VPKUDUM
    25044U,	// VPKUDUS
    21816U,	// VPKUHUM
    25062U,	// VPKUHUS
    21825U,	// VPKUWUM
    25080U,	// VPKUWUS
    19188U,	// VPMSUMB
    19901U,	// VPMSUMD
    20532U,	// VPMSUMH
    26348U,	// VPMSUMW
    536890239U,	// VPOPCNTB
    536890963U,	// VPOPCNTD
    536891563U,	// VPOPCNTH
    536897625U,	// VPOPCNTW
    536890611U,	// VPRTYBD
    536894974U,	// VPRTYBQ
    536897079U,	// VPRTYBW
    536894003U,	// VREFP
    536892591U,	// VRFIM
    536892916U,	// VRFIN
    536894087U,	// VRFIP
    536898955U,	// VRFIZ
    19176U,	// VRLB
    19880U,	// VRLD
    20981U,	// VRLDMI
    21721U,	// VRLDNM
    20520U,	// VRLH
    26324U,	// VRLW
    21093U,	// VRLWMI
    21737U,	// VRLWNM
    536894020U,	// VRSQRTEFP
    536898248U,	// VSBOX
    21455U,	// VSEL
    19673U,	// VSHASIGMAD
    26148U,	// VSHASIGMAW
    21506U,	// VSL
    19182U,	// VSLB
    19886U,	// VSLD
    21111U,	// VSLDOI
    20526U,	// VSLH
    22090U,	// VSLO
    25767U,	// VSLV
    26331U,	// VSLW
    3858778999U,	// VSPLTB
    3858778999U,	// VSPLTBs
    3858780323U,	// VSPLTH
    3858780323U,	// VSPLTHs
    285231922U,	// VSPLTISB
    285233252U,	// VSPLTISH
    285239297U,	// VSPLTISW
    3858786376U,	// VSPLTW
    24447U,	// VSR
    19107U,	// VSRAB
    19685U,	// VSRAD
    20473U,	// VSRAH
    26160U,	// VSRAW
    19218U,	// VSRB
    19980U,	// VSRD
    20548U,	// VSRH
    22204U,	// VSRO
    25795U,	// VSRV
    26586U,	// VSRW
    24127U,	// VSUBCUQ
    26749U,	// VSUBCUW
    24157U,	// VSUBECUQ
    21763U,	// VSUBEUQM
    23047U,	// VSUBFP
    24507U,	// VSUBSBS
    24819U,	// VSUBSHS
    25123U,	// VSUBSWS
    21584U,	// VSUBUBM
    24535U,	// VSUBUBS
    21612U,	// VSUBUDM
    21640U,	// VSUBUHM
    24870U,	// VSUBUHS
    21745U,	// VSUBUQM
    21834U,	// VSUBUWM
    25150U,	// VSUBUWS
    25113U,	// VSUM2SWS
    24497U,	// VSUM4SBS
    24809U,	// VSUM4SHS
    24525U,	// VSUM4UBS
    25141U,	// VSUMSWS
    536898275U,	// VUPKHPX
    536890153U,	// VUPKHSB
    536891483U,	// VUPKHSH
    536897528U,	// VUPKHSW
    536898291U,	// VUPKLPX
    536890172U,	// VUPKLSB
    536891502U,	// VUPKLSH
    536897547U,	// VUPKLSW
    24400U,	// VXOR
    67133264U,	// V_SET0
    67133264U,	// V_SET0B
    67133264U,	// V_SET0H
    9988097U,	// V_SETALLONES
    9988097U,	// V_SETALLONESB
    9988097U,	// V_SETALLONESH
    1073972U,	// WAIT
    1068762U,	// WRTEE
    1069492U,	// WRTEEI
    24377U,	// XOR
    24377U,	// XOR8
    17740U,	// XOR8o
    21151U,	// XORI
    21151U,	// XORI8
    24917U,	// XORIS
    24917U,	// XORIS8
    17740U,	// XORo
    536893770U,	// XSABSDP
    536894329U,	// XSABSQP
    22371U,	// XSADDDP
    23287U,	// XSADDQP
    22163U,	// XSADDQPO
    23587U,	// XSADDSP
    22816U,	// XSCMPEQDP
    22784U,	// XSCMPEXPDP
    23385U,	// XSCMPEXPQP
    22433U,	// XSCMPGEDP
    22876U,	// XSCMPGTDP
    22455U,	// XSCMPNEDP
    22714U,	// XSCMPODP
    23355U,	// XSCMPOQP
    22940U,	// XSCMPUDP
    23436U,	// XSCMPUQP
    22674U,	// XSCPSGNDP
    23344U,	// XSCPSGNQP
    536894067U,	// XSCVDPHP
    536894277U,	// XSCVDPQP
    536894761U,	// XSCVDPSP
    536892958U,	// XSCVDPSPN
    536895605U,	// XSCVDPSXDS
    536895605U,	// XSCVDPSXDSs
    536896089U,	// XSCVDPSXWS
    536896089U,	// XSCVDPSXWSs
    536895641U,	// XSCVDPUXDS
    536895641U,	// XSCVDPUXDSs
    536896125U,	// XSCVDPUXWS
    536896125U,	// XSCVDPUXWSs
    536893636U,	// XSCVHPDP
    536893646U,	// XSCVQPDP
    536893008U,	// XSCVQPDPO
    536898928U,	// XSCVQPSDZ
    536899058U,	// XSCVQPSWZ
    536898939U,	// XSCVQPUDZ
    536899069U,	// XSCVQPUWZ
    536894208U,	// XSCVSDQP
    536893656U,	// XSCVSPDP
    536892947U,	// XSCVSPDPN
    536893301U,	// XSCVSXDDP
    536894517U,	// XSCVSXDSP
    536894218U,	// XSCVUDQP
    536893323U,	// XSCVUXDDP
    536894539U,	// XSCVUXDSP
    22950U,	// XSDIVDP
    23446U,	// XSDIVQP
    22194U,	// XSDIVQPO
    23994U,	// XSDIVSP
    22764U,	// XSIEXPDP
    23375U,	// XSIEXPQP
    1174427409U,	// XSMADDADP
    1174428645U,	// XSMADDASP
    1174427772U,	// XSMADDMDP
    1174428927U,	// XSMADDMSP
    23277U,	// XSMADDQP
    22152U,	// XSMADDQPO
    22361U,	// XSMAXCDP
    23010U,	// XSMAXDP
    22554U,	// XSMAXJDP
    22351U,	// XSMINCDP
    22696U,	// XSMINDP
    22544U,	// XSMINJDP
    1174427363U,	// XSMSUBADP
    1174428599U,	// XSMSUBASP
    1174427726U,	// XSMSUBMDP
    1174428881U,	// XSMSUBMSP
    23236U,	// XSMSUBQP
    22119U,	// XSMSUBQPO
    22564U,	// XSMULDP
    23335U,	// XSMULQP
    22173U,	// XSMULQPO
    23719U,	// XSMULSP
    536893750U,	// XSNABSDP
    536894319U,	// XSNABSQP
    536893418U,	// XSNEGDP
    536894228U,	// XSNEGQP
    1174427385U,	// XSNMADDADP
    1174428621U,	// XSNMADDASP
    1174427748U,	// XSNMADDMDP
    1174428903U,	// XSNMADDMSP
    23266U,	// XSNMADDQP
    22140U,	// XSNMADDQPO
    1174427339U,	// XSNMSUBADP
    1174428575U,	// XSNMSUBASP
    1174427702U,	// XSNMSUBMDP
    1174428857U,	// XSNMSUBMSP
    23225U,	// XSNMSUBQP
    22107U,	// XSNMSUBQPO
    536892031U,	// XSRDPI
    536890469U,	// XSRDPIC
    536892598U,	// XSRDPIM
    536894094U,	// XSRDPIP
    536898962U,	// XSRDPIZ
    536893378U,	// XSREDP
    536894572U,	// XSRESP
    67392143U,	// XSRQPI
    67398299U,	// XSRQPIX
    67395061U,	// XSRQPXP
    536893394U,	// XSRSQRTEDP
    536894588U,	// XSRSQRTESP
    536893810U,	// XSSQRTDP
    536894338U,	// XSSQRTQP
    536893095U,	// XSSQRTQPO
    536894875U,	// XSSQRTSP
    22311U,	// XSSUBDP
    23246U,	// XSSUBQP
    22130U,	// XSSUBQPO
    23547U,	// XSSUBSP
    22959U,	// XSTDIVDP
    536893820U,	// XSTSQRTDP
    1711298361U,	// XSTSTDCDP
    1711299287U,	// XSTSTDCQP
    1711299597U,	// XSTSTDCSP
    536893708U,	// XSXEXPDP
    536894309U,	// XSXEXPQP
    536893436U,	// XSXSIGDP
    536894237U,	// XSXSIGQP
    536893779U,	// XVABSDP
    536894840U,	// XVABSSP
    22380U,	// XVADDDP
    23596U,	// XVADDSP
    22827U,	// XVCMPEQDP
    17554U,	// XVCMPEQDPo
    23899U,	// XVCMPEQSP
    17652U,	// XVCMPEQSPo
    22444U,	// XVCMPGEDP
    17530U,	// XVCMPGEDPo
    23649U,	// XVCMPGESP
    17628U,	// XVCMPGESPo
    22887U,	// XVCMPGTDP
    17566U,	// XVCMPGTDPo
    23952U,	// XVCMPGTSP
    17671U,	// XVCMPGTSPo
    16401U,	// XVCMPNEDP
    17542U,	// XVCMPNEDPo
    16413U,	// XVCMPNESP
    17640U,	// XVCMPNESPo
    22685U,	// XVCPSGNDP
    23829U,	// XVCPSGNSP
    536894771U,	// XVCVDPSP
    536895617U,	// XVCVDPSXDS
    536896101U,	// XVCVDPSXWS
    536895653U,	// XVCVDPUXDS
    536896137U,	// XVCVDPUXWS
    536894781U,	// XVCVHPSP
    536893666U,	// XVCVSPDP
    536894077U,	// XVCVSPHP
    536895629U,	// XVCVSPSXDS
    536896113U,	// XVCVSPSXWS
    536895665U,	// XVCVSPUXDS
    536896149U,	// XVCVSPUXWS
    536893312U,	// XVCVSXDDP
    536894528U,	// XVCVSXDSP
    536893900U,	// XVCVSXWDP
    536894934U,	// XVCVSXWSP
    536893334U,	// XVCVUXDDP
    536894550U,	// XVCVUXDSP
    536893911U,	// XVCVUXWDP
    536894945U,	// XVCVUXWSP
    22979U,	// XVDIVDP
    24013U,	// XVDIVSP
    22774U,	// XVIEXPDP
    23879U,	// XVIEXPSP
    1174427420U,	// XVMADDADP
    1174428656U,	// XVMADDASP
    1174427783U,	// XVMADDMDP
    1174428938U,	// XVMADDMSP
    23019U,	// XVMAXDP
    24044U,	// XVMAXSP
    22705U,	// XVMINDP
    23840U,	// XVMINSP
    1174427374U,	// XVMSUBADP
    1174428610U,	// XVMSUBASP
    1174427737U,	// XVMSUBMDP
    1174428892U,	// XVMSUBMSP
    22573U,	// XVMULDP
    23728U,	// XVMULSP
    536893760U,	// XVNABSDP
    536894830U,	// XVNABSSP
    536893427U,	// XVNEGDP
    536894612U,	// XVNEGSP
    1174427397U,	// XVNMADDADP
    1174428633U,	// XVNMADDASP
    1174427760U,	// XVNMADDMDP
    1174428915U,	// XVNMADDMSP
    1174427351U,	// XVNMSUBADP
    1174428587U,	// XVNMSUBASP
    1174427714U,	// XVNMSUBMDP
    1174428869U,	// XVNMSUBMSP
    536892039U,	// XVRDPI
    536890478U,	// XVRDPIC
    536892607U,	// XVRDPIM
    536894103U,	// XVRDPIP
    536898971U,	// XVRDPIZ
    536893386U,	// XVREDP
    536894580U,	// XVRESP
    536892055U,	// XVRSPI
    536890487U,	// XVRSPIC
    536892616U,	// XVRSPIM
    536894112U,	// XVRSPIP
    536898980U,	// XVRSPIZ
    536893406U,	// XVRSQRTEDP
    536894600U,	// XVRSQRTESP
    536893842U,	// XVSQRTDP
    536894896U,	// XVSQRTSP
    22320U,	// XVSUBDP
    23556U,	// XVSUBSP
    22969U,	// XVTDIVDP
    24003U,	// XVTDIVSP
    536893831U,	// XVTSQRTDP
    536894885U,	// XVTSQRTSP
    1711298372U,	// XVTSTDCDP
    1711299608U,	// XVTSTDCSP
    536893718U,	// XVXEXPDP
    536894801U,	// XVXEXPSP
    536893446U,	// XVXSIGDP
    536894621U,	// XVXSIGSP
    536890875U,	// XXBRD
    536891453U,	// XXBRH
    536895011U,	// XXBRQ
    536897491U,	// XXBRW
    26839U,	// XXEXTRACTUW
    2248173677U,	// XXINSERTW
    19910U,	// XXLAND
    19496U,	// XXLANDC
    25773U,	// XXLEQV
    19918U,	// XXLNAND
    24340U,	// XXLNOR
    24333U,	// XXLOR
    19604U,	// XXLORC
    24333U,	// XXLORf
    24374U,	// XXLXOR
    67133238U,	// XXLXORdpz
    67133238U,	// XXLXORspz
    67133238U,	// XXLXORz
    26258U,	// XXMRGHW
    26300U,	// XXMRGLW
    21799U,	// XXPERM
    20862U,	// XXPERMDI
    20862U,	// XXPERMDIs
    24324U,	// XXPERMR
    21461U,	// XXSEL
    21185U,	// XXSLDWI
    302009046U,	// XXSPLTIB
    26704U,	// XXSPLTW
    26704U,	// XXSPLTWs
    166942U,	// gBC
    166013U,	// gBCA
    10794779U,	// gBCAat
    171908U,	// gBCCTR
    168953U,	// gBCCTRL
    168869U,	// gBCL
    166307U,	// gBCLA
    10794795U,	// gBCLAat
    171733U,	// gBCLR
    168946U,	// gBCLRL
    11319188U,	// gBCLat
    11319096U,	// gBCat
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// ADD4
    0U,	// ADD4TLS
    0U,	// ADD4o
    0U,	// ADD8
    0U,	// ADD8TLS
    0U,	// ADD8TLS_
    0U,	// ADD8o
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDC8o
    0U,	// ADDCo
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDE8o
    0U,	// ADDEo
    2U,	// ADDI
    2U,	// ADDI8
    2U,	// ADDIC
    2U,	// ADDIC8
    2U,	// ADDICo
    2U,	// ADDIS
    2U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8o
    0U,	// ADDMEo
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8o
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// AND8o
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDC8o
    0U,	// ANDCo
    4U,	// ANDISo
    4U,	// ANDISo8
    4U,	// ANDIo
    4U,	// ANDIo8
    0U,	// ANDIo_1_EQ_BIT
    0U,	// ANDIo_1_EQ_BIT8
    0U,	// ANDIo_1_GT_BIT
    0U,	// ANDIo_1_GT_BIT8
    0U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    6U,	// BCDCFNo
    6U,	// BCDCFSQo
    6U,	// BCDCFZo
    0U,	// BCDCPSGNo
    0U,	// BCDCTNo
    0U,	// BCDCTSQo
    6U,	// BCDCTZo
    6U,	// BCDSETSGNo
    32U,	// BCDSRo
    32U,	// BCDSo
    32U,	// BCDTRUNCo
    0U,	// BCDUSo
    0U,	// BCDUTRUNCo
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_TLS
    0U,	// BPERMD
    0U,	// BRINC
    0U,	// CFENCE8
    0U,	// CLRBHRB
    104U,	// CLRLSLDI
    104U,	// CLRLSLDIo
    170U,	// CLRLSLWI
    170U,	// CLRLSLWIo
    8U,	// CLRRDI
    8U,	// CLRRDIo
    10U,	// CLRRWI
    10U,	// CLRRWIo
    0U,	// CMPB
    0U,	// CMPB8
    0U,	// CMPD
    2U,	// CMPDI
    0U,	// CMPEQB
    0U,	// CMPLD
    4U,	// CMPLDI
    0U,	// CMPLW
    4U,	// CMPLWI
    0U,	// CMPRB
    0U,	// CMPRB8
    0U,	// CMPW
    2U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8o
    0U,	// CNTLZWo
    0U,	// CNTTZD
    0U,	// CNTTZDo
    0U,	// CNTTZW
    0U,	// CNTTZW8
    0U,	// CNTTZW8o
    0U,	// CNTTZWo
    0U,	// CP_ABORT
    6U,	// CP_COPY
    6U,	// CP_COPY8
    0U,	// CP_COPY_FIRST
    0U,	// CP_COPYx
    6U,	// CP_PASTE
    6U,	// CP_PASTE8
    6U,	// CP_PASTE8o
    0U,	// CP_PASTE_LAST
    6U,	// CP_PASTEo
    0U,	// CP_PASTEx
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CRAND
    0U,	// CRANDC
    0U,	// CREQV
    0U,	// CRNAND
    0U,	// CRNOR
    0U,	// CROR
    0U,	// CRORC
    12U,	// CRSET
    12U,	// CRUNSET
    0U,	// CRXOR
    0U,	// CTRL_DEP
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBFL
    0U,	// DCBFLP
    0U,	// DCBFx
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBT
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTST
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DCBZ
    0U,	// DCBZL
    0U,	// DCCCI
    0U,	// DFLOADf32
    0U,	// DFLOADf64
    0U,	// DFSTOREf32
    0U,	// DFSTOREf64
    0U,	// DIVD
    0U,	// DIVDE
    0U,	// DIVDEU
    0U,	// DIVDEUo
    0U,	// DIVDEo
    0U,	// DIVDU
    0U,	// DIVDUo
    0U,	// DIVDo
    0U,	// DIVW
    0U,	// DIVWE
    0U,	// DIVWEU
    0U,	// DIVWEUo
    0U,	// DIVWEo
    0U,	// DIVWU
    0U,	// DIVWUo
    0U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    0U,	// EQV
    0U,	// EQV8
    0U,	// EQV8o
    0U,	// EQVo
    0U,	// EVABS
    14U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    0U,	// EVADDW
    0U,	// EVAND
    0U,	// EVANDC
    0U,	// EVCMPEQ
    0U,	// EVCMPGTS
    0U,	// EVCMPGTU
    0U,	// EVCMPLTS
    0U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    0U,	// EVDIVWS
    0U,	// EVDIVWU
    0U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    0U,	// EVMERGEHI
    0U,	// EVMERGEHILO
    0U,	// EVMERGELO
    0U,	// EVMERGELOHI
    0U,	// EVMHEGSMFAA
    0U,	// EVMHEGSMFAN
    0U,	// EVMHEGSMIAA
    0U,	// EVMHEGSMIAN
    0U,	// EVMHEGUMIAA
    0U,	// EVMHEGUMIAN
    0U,	// EVMHESMF
    0U,	// EVMHESMFA
    0U,	// EVMHESMFAAW
    0U,	// EVMHESMFANW
    0U,	// EVMHESMI
    0U,	// EVMHESMIA
    0U,	// EVMHESMIAAW
    0U,	// EVMHESMIANW
    0U,	// EVMHESSF
    0U,	// EVMHESSFA
    0U,	// EVMHESSFAAW
    0U,	// EVMHESSFANW
    0U,	// EVMHESSIAAW
    0U,	// EVMHESSIANW
    0U,	// EVMHEUMI
    0U,	// EVMHEUMIA
    0U,	// EVMHEUMIAAW
    0U,	// EVMHEUMIANW
    0U,	// EVMHEUSIAAW
    0U,	// EVMHEUSIANW
    0U,	// EVMHOGSMFAA
    0U,	// EVMHOGSMFAN
    0U,	// EVMHOGSMIAA
    0U,	// EVMHOGSMIAN
    0U,	// EVMHOGUMIAA
    0U,	// EVMHOGUMIAN
    0U,	// EVMHOSMF
    0U,	// EVMHOSMFA
    0U,	// EVMHOSMFAAW
    0U,	// EVMHOSMFANW
    0U,	// EVMHOSMI
    0U,	// EVMHOSMIA
    0U,	// EVMHOSMIAAW
    0U,	// EVMHOSMIANW
    0U,	// EVMHOSSF
    0U,	// EVMHOSSFA
    0U,	// EVMHOSSFAAW
    0U,	// EVMHOSSFANW
    0U,	// EVMHOSSIAAW
    0U,	// EVMHOSSIANW
    0U,	// EVMHOUMI
    0U,	// EVMHOUMIA
    0U,	// EVMHOUMIAAW
    0U,	// EVMHOUMIANW
    0U,	// EVMHOUSIAAW
    0U,	// EVMHOUSIANW
    0U,	// EVMRA
    0U,	// EVMWHSMF
    0U,	// EVMWHSMFA
    0U,	// EVMWHSMI
    0U,	// EVMWHSMIA
    0U,	// EVMWHSSF
    0U,	// EVMWHSSFA
    0U,	// EVMWHUMI
    0U,	// EVMWHUMIA
    0U,	// EVMWLSMIAAW
    0U,	// EVMWLSMIANW
    0U,	// EVMWLSSIAAW
    0U,	// EVMWLSSIANW
    0U,	// EVMWLUMI
    0U,	// EVMWLUMIA
    0U,	// EVMWLUMIAAW
    0U,	// EVMWLUMIANW
    0U,	// EVMWLUSIAAW
    0U,	// EVMWLUSIANW
    0U,	// EVMWSMF
    0U,	// EVMWSMFA
    0U,	// EVMWSMFAA
    0U,	// EVMWSMFAN
    0U,	// EVMWSMI
    0U,	// EVMWSMIA
    0U,	// EVMWSMIAA
    0U,	// EVMWSMIAN
    0U,	// EVMWSSF
    0U,	// EVMWSSFA
    0U,	// EVMWSSFAA
    0U,	// EVMWSSFAN
    0U,	// EVMWUMI
    0U,	// EVMWUMIA
    0U,	// EVMWUMIAA
    0U,	// EVMWUMIAN
    0U,	// EVNAND
    0U,	// EVNEG
    0U,	// EVNOR
    0U,	// EVOR
    0U,	// EVORC
    0U,	// EVRLW
    10U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSLW
    10U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    10U,	// EVSRWIS
    10U,	// EVSRWIU
    0U,	// EVSRWS
    0U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    0U,	// EVSUBFW
    0U,	// EVSUBIFW
    0U,	// EVXOR
    104U,	// EXTLDI
    104U,	// EXTLDIo
    170U,	// EXTLWI
    170U,	// EXTLWIo
    104U,	// EXTRDI
    104U,	// EXTRDIo
    170U,	// EXTRWI
    170U,	// EXTRWIo
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    0U,	// EXTSW_32
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDSo
    0U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCPSGND
    0U,	// FCPSGNDo
    0U,	// FCPSGNS
    0U,	// FCPSGNSo
    0U,	// FCTID
    0U,	// FCTIDU
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDUo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIDo
    0U,	// FCTIW
    0U,	// FCTIWU
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWUo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FCTIWo
    0U,	// FDIV
    0U,	// FDIVS
    0U,	// FDIVSo
    0U,	// FDIVo
    224U,	// FMADD
    224U,	// FMADDS
    224U,	// FMADDSo
    224U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    224U,	// FMSUB
    224U,	// FMSUBS
    224U,	// FMSUBSo
    224U,	// FMSUBo
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FMULSo
    0U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    224U,	// FNMADD
    224U,	// FNMADDS
    224U,	// FNMADDSo
    224U,	// FNMADDo
    224U,	// FNMSUB
    224U,	// FNMSUBS
    224U,	// FNMSUBSo
    224U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    224U,	// FSELD
    224U,	// FSELDo
    224U,	// FSELS
    224U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// FSUBSo
    0U,	// FSUBo
    0U,	// FTDIV
    0U,	// FTSQRT
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// HRFID
    0U,	// ICBI
    0U,	// ICBLC
    0U,	// ICBLQ
    0U,	// ICBT
    0U,	// ICBTLS
    0U,	// ICCCI
    170U,	// INSLWI
    170U,	// INSLWIo
    104U,	// INSRDI
    104U,	// INSRDIo
    170U,	// INSRWI
    170U,	// INSRWIo
    224U,	// ISEL
    224U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LAx
    0U,	// LBARX
    0U,	// LBARXL
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LD
    0U,	// LDARX
    0U,	// LDARXL
    10U,	// LDAT
    0U,	// LDBRX
    0U,	// LDCIX
    0U,	// LDMX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    0U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    10U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWARXL
    10U,	// LWAT
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// LWZtoc
    0U,	// LXSD
    0U,	// LXSDX
    0U,	// LXSIBZX
    0U,	// LXSIHZX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSP
    0U,	// LXSSPX
    0U,	// LXV
    0U,	// LXVB16X
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVH8X
    0U,	// LXVL
    0U,	// LXVLL
    0U,	// LXVW4X
    0U,	// LXVWSX
    0U,	// LXVX
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MCRXRX
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSo
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFPMR
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRD
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRLD
    0U,	// MFVSRWZ
    0U,	// MODSD
    0U,	// MODSW
    0U,	// MODUD
    0U,	// MODUW
    0U,	// MSGSYNC
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    224U,	// MTFSF
    0U,	// MTFSFI
    0U,	// MTFSFIo
    0U,	// MTFSFb
    224U,	// MTFSFo
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTPMR
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MTVSRD
    0U,	// MTVSRDD
    0U,	// MTVSRWA
    0U,	// MTVSRWS
    0U,	// MTVSRWZ
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHDUo
    0U,	// MULHDo
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULHWUo
    0U,	// MULHWo
    0U,	// MULLD
    0U,	// MULLDo
    2U,	// MULLI
    2U,	// MULLI8
    0U,	// MULLW
    0U,	// MULLWo
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NAND8o
    0U,	// NANDo
    0U,	// NAP
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8o
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    0U,	// NOR
    0U,	// NOR8
    0U,	// NOR8o
    0U,	// NORo
    0U,	// OR
    0U,	// OR8
    0U,	// OR8o
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORC8o
    0U,	// ORCo
    4U,	// ORI
    4U,	// ORI8
    4U,	// ORIS
    4U,	// ORIS8
    0U,	// ORo
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    288U,	// QVALIGNI
    288U,	// QVALIGNIb
    288U,	// QVALIGNIs
    16U,	// QVESPLATI
    16U,	// QVESPLATIb
    16U,	// QVESPLATIs
    0U,	// QVFABS
    0U,	// QVFABSs
    0U,	// QVFADD
    0U,	// QVFADDS
    0U,	// QVFADDSs
    0U,	// QVFCFID
    0U,	// QVFCFIDS
    0U,	// QVFCFIDU
    0U,	// QVFCFIDUS
    0U,	// QVFCFIDb
    0U,	// QVFCMPEQ
    0U,	// QVFCMPEQb
    0U,	// QVFCMPEQbs
    0U,	// QVFCMPGT
    0U,	// QVFCMPGTb
    0U,	// QVFCMPGTbs
    0U,	// QVFCMPLT
    0U,	// QVFCMPLTb
    0U,	// QVFCMPLTbs
    0U,	// QVFCPSGN
    0U,	// QVFCPSGNs
    0U,	// QVFCTID
    0U,	// QVFCTIDU
    0U,	// QVFCTIDUZ
    0U,	// QVFCTIDZ
    0U,	// QVFCTIDb
    0U,	// QVFCTIW
    0U,	// QVFCTIWU
    0U,	// QVFCTIWUZ
    0U,	// QVFCTIWZ
    352U,	// QVFLOGICAL
    352U,	// QVFLOGICALb
    352U,	// QVFLOGICALs
    18U,	// QVFMADD
    18U,	// QVFMADDS
    18U,	// QVFMADDSs
    0U,	// QVFMR
    0U,	// QVFMRb
    0U,	// QVFMRs
    18U,	// QVFMSUB
    18U,	// QVFMSUBS
    18U,	// QVFMSUBSs
    0U,	// QVFMUL
    0U,	// QVFMULS
    0U,	// QVFMULSs
    0U,	// QVFNABS
    0U,	// QVFNABSs
    0U,	// QVFNEG
    0U,	// QVFNEGs
    18U,	// QVFNMADD
    18U,	// QVFNMADDS
    18U,	// QVFNMADDSs
    18U,	// QVFNMSUB
    18U,	// QVFNMSUBS
    18U,	// QVFNMSUBSs
    224U,	// QVFPERM
    224U,	// QVFPERMs
    0U,	// QVFRE
    0U,	// QVFRES
    0U,	// QVFRESs
    0U,	// QVFRIM
    0U,	// QVFRIMs
    0U,	// QVFRIN
    0U,	// QVFRINs
    0U,	// QVFRIP
    0U,	// QVFRIPs
    0U,	// QVFRIZ
    0U,	// QVFRIZs
    0U,	// QVFRSP
    0U,	// QVFRSPs
    0U,	// QVFRSQRTE
    0U,	// QVFRSQRTES
    0U,	// QVFRSQRTESs
    18U,	// QVFSEL
    18U,	// QVFSELb
    18U,	// QVFSELbb
    18U,	// QVFSELbs
    0U,	// QVFSUB
    0U,	// QVFSUBS
    0U,	// QVFSUBSs
    0U,	// QVFTSTNAN
    0U,	// QVFTSTNANb
    0U,	// QVFTSTNANbs
    18U,	// QVFXMADD
    18U,	// QVFXMADDS
    0U,	// QVFXMUL
    0U,	// QVFXMULS
    18U,	// QVFXXCPNMADD
    18U,	// QVFXXCPNMADDS
    18U,	// QVFXXMADD
    18U,	// QVFXXMADDS
    18U,	// QVFXXNPMADD
    18U,	// QVFXXNPMADDS
    0U,	// QVGPCI
    0U,	// QVLFCDUX
    0U,	// QVLFCDUXA
    0U,	// QVLFCDX
    0U,	// QVLFCDXA
    0U,	// QVLFCSUX
    0U,	// QVLFCSUXA
    0U,	// QVLFCSX
    0U,	// QVLFCSXA
    0U,	// QVLFCSXs
    0U,	// QVLFDUX
    0U,	// QVLFDUXA
    0U,	// QVLFDX
    0U,	// QVLFDXA
    0U,	// QVLFDXb
    0U,	// QVLFIWAX
    0U,	// QVLFIWAXA
    0U,	// QVLFIWZX
    0U,	// QVLFIWZXA
    0U,	// QVLFSUX
    0U,	// QVLFSUXA
    0U,	// QVLFSX
    0U,	// QVLFSXA
    0U,	// QVLFSXb
    0U,	// QVLFSXs
    0U,	// QVLPCLDX
    0U,	// QVLPCLSX
    0U,	// QVLPCLSXint
    0U,	// QVLPCRDX
    0U,	// QVLPCRSX
    0U,	// QVSTFCDUX
    0U,	// QVSTFCDUXA
    0U,	// QVSTFCDUXI
    0U,	// QVSTFCDUXIA
    0U,	// QVSTFCDX
    0U,	// QVSTFCDXA
    0U,	// QVSTFCDXI
    0U,	// QVSTFCDXIA
    0U,	// QVSTFCSUX
    0U,	// QVSTFCSUXA
    0U,	// QVSTFCSUXI
    0U,	// QVSTFCSUXIA
    0U,	// QVSTFCSX
    0U,	// QVSTFCSXA
    0U,	// QVSTFCSXI
    0U,	// QVSTFCSXIA
    0U,	// QVSTFCSXs
    0U,	// QVSTFDUX
    0U,	// QVSTFDUXA
    0U,	// QVSTFDUXI
    0U,	// QVSTFDUXIA
    0U,	// QVSTFDX
    0U,	// QVSTFDXA
    0U,	// QVSTFDXI
    0U,	// QVSTFDXIA
    0U,	// QVSTFDXb
    0U,	// QVSTFIWX
    0U,	// QVSTFIWXA
    0U,	// QVSTFSUX
    0U,	// QVSTFSUXA
    0U,	// QVSTFSUXI
    0U,	// QVSTFSUXIA
    0U,	// QVSTFSUXs
    0U,	// QVSTFSX
    0U,	// QVSTFSXA
    0U,	// QVSTFSXI
    0U,	// QVSTFSXIA
    0U,	// QVSTFSXs
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_VRSAVE
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    96U,	// RLDCL
    96U,	// RLDCLo
    96U,	// RLDCR
    96U,	// RLDCRo
    104U,	// RLDIC
    104U,	// RLDICL
    104U,	// RLDICL_32
    104U,	// RLDICL_32_64
    104U,	// RLDICL_32o
    104U,	// RLDICLo
    104U,	// RLDICR
    104U,	// RLDICR_32
    104U,	// RLDICRo
    104U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8o
    234U,	// RLWIMIbm
    0U,	// RLWIMIo
    234U,	// RLWIMIobm
    682U,	// RLWINM
    682U,	// RLWINM8
    682U,	// RLWINM8o
    234U,	// RLWINMbm
    682U,	// RLWINMo
    234U,	// RLWINMobm
    672U,	// RLWNM
    672U,	// RLWNM8
    672U,	// RLWNM8o
    234U,	// RLWNMbm
    672U,	// RLWNMo
    234U,	// RLWNMobm
    8U,	// ROTRDI
    8U,	// ROTRDIo
    10U,	// ROTRWI
    10U,	// ROTRWIo
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_QBRC
    0U,	// SELECT_CC_QFRC
    0U,	// SELECT_CC_QSRC
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_QBRC
    0U,	// SELECT_QFRC
    0U,	// SELECT_QSRC
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBIEG
    0U,	// SLBMFEE
    0U,	// SLBMFEV
    0U,	// SLBMTE
    0U,	// SLBSYNC
    0U,	// SLD
    8U,	// SLDI
    8U,	// SLDIo
    0U,	// SLDo
    0U,	// SLW
    0U,	// SLW8
    0U,	// SLW8o
    10U,	// SLWI
    10U,	// SLWIo
    0U,	// SLWo
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_VRSAVE
    0U,	// SRAD
    8U,	// SRADI
    8U,	// SRADI_32
    8U,	// SRADIo
    0U,	// SRADo
    0U,	// SRAW
    10U,	// SRAWI
    10U,	// SRAWIo
    0U,	// SRAWo
    0U,	// SRD
    8U,	// SRDI
    8U,	// SRDIo
    0U,	// SRDo
    0U,	// SRW
    0U,	// SRW8
    0U,	// SRW8o
    10U,	// SRWI
    10U,	// SRWIo
    0U,	// SRWo
    0U,	// STB
    0U,	// STB8
    0U,	// STBCIX
    0U,	// STBCX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STD
    10U,	// STDAT
    0U,	// STDBRX
    0U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STFD
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHCIX
    0U,	// STHCX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STMW
    0U,	// STOP
    10U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    10U,	// STWAT
    0U,	// STWBRX
    0U,	// STWCIX
    0U,	// STWCX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// STXSD
    0U,	// STXSDX
    0U,	// STXSIBX
    0U,	// STXSIBXv
    0U,	// STXSIHX
    0U,	// STXSIHXv
    0U,	// STXSIWX
    0U,	// STXSSP
    0U,	// STXSSPX
    0U,	// STXV
    0U,	// STXVB16X
    0U,	// STXVD2X
    0U,	// STXVH8X
    0U,	// STXVL
    0U,	// STXVLL
    0U,	// STXVW4X
    0U,	// STXVX
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBF8o
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFC8o
    0U,	// SUBFCo
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFE8o
    0U,	// SUBFEo
    2U,	// SUBFIC
    2U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8o
    0U,	// SUBFMEo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8o
    0U,	// SUBFZEo
    0U,	// SUBFo
    2U,	// SUBI
    2U,	// SUBIC
    2U,	// SUBICo
    2U,	// SUBIS
    0U,	// SYNC
    0U,	// TABORT
    0U,	// TABORTDC
    0U,	// TABORTDCI
    0U,	// TABORTWC
    0U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TD
    2U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    0U,	// TLBRE2
    0U,	// TLBSX
    0U,	// TLBSX2
    0U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    0U,	// TLBWE2
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    0U,	// TW
    2U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// UpdateGBR
    0U,	// VABSDUB
    0U,	// VABSDUH
    0U,	// VABSDUW
    0U,	// VADDCUQ
    0U,	// VADDCUW
    224U,	// VADDECUQ
    224U,	// VADDEUQM
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUDM
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUQM
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VBPERMD
    0U,	// VBPERMQ
    0U,	// VCFSX
    1U,	// VCFSX_0
    0U,	// VCFUX
    1U,	// VCFUX_0
    0U,	// VCIPHER
    0U,	// VCIPHERLAST
    0U,	// VCLZB
    0U,	// VCLZD
    0U,	// VCLZH
    0U,	// VCLZLSBB
    0U,	// VCLZW
    0U,	// VCMPBFP
    0U,	// VCMPBFPo
    0U,	// VCMPEQFP
    0U,	// VCMPEQFPo
    0U,	// VCMPEQUB
    0U,	// VCMPEQUBo
    0U,	// VCMPEQUD
    0U,	// VCMPEQUDo
    0U,	// VCMPEQUH
    0U,	// VCMPEQUHo
    0U,	// VCMPEQUW
    0U,	// VCMPEQUWo
    0U,	// VCMPGEFP
    0U,	// VCMPGEFPo
    0U,	// VCMPGTFP
    0U,	// VCMPGTFPo
    0U,	// VCMPGTSB
    0U,	// VCMPGTSBo
    0U,	// VCMPGTSD
    0U,	// VCMPGTSDo
    0U,	// VCMPGTSH
    0U,	// VCMPGTSHo
    0U,	// VCMPGTSW
    0U,	// VCMPGTSWo
    0U,	// VCMPGTUB
    0U,	// VCMPGTUBo
    0U,	// VCMPGTUD
    0U,	// VCMPGTUDo
    0U,	// VCMPGTUH
    0U,	// VCMPGTUHo
    0U,	// VCMPGTUW
    0U,	// VCMPGTUWo
    0U,	// VCMPNEB
    0U,	// VCMPNEBo
    0U,	// VCMPNEH
    0U,	// VCMPNEHo
    0U,	// VCMPNEW
    0U,	// VCMPNEWo
    0U,	// VCMPNEZB
    0U,	// VCMPNEZBo
    0U,	// VCMPNEZH
    0U,	// VCMPNEZHo
    0U,	// VCMPNEZW
    0U,	// VCMPNEZWo
    0U,	// VCTSXS
    1U,	// VCTSXS_0
    0U,	// VCTUXS
    1U,	// VCTUXS_0
    0U,	// VCTZB
    0U,	// VCTZD
    0U,	// VCTZH
    0U,	// VCTZLSBB
    0U,	// VCTZW
    0U,	// VEQV
    0U,	// VEXPTEFP
    1U,	// VEXTRACTD
    1U,	// VEXTRACTUB
    1U,	// VEXTRACTUH
    1U,	// VEXTRACTUW
    0U,	// VEXTSB2D
    0U,	// VEXTSB2Ds
    0U,	// VEXTSB2W
    0U,	// VEXTSB2Ws
    0U,	// VEXTSH2D
    0U,	// VEXTSH2Ds
    0U,	// VEXTSH2W
    0U,	// VEXTSH2Ws
    0U,	// VEXTSW2D
    0U,	// VEXTSW2Ds
    0U,	// VEXTUBLX
    0U,	// VEXTUBRX
    0U,	// VEXTUHLX
    0U,	// VEXTUHRX
    0U,	// VEXTUWLX
    0U,	// VEXTUWRX
    0U,	// VGBBD
    1U,	// VINSERTB
    1U,	// VINSERTD
    1U,	// VINSERTH
    1U,	// VINSERTW
    0U,	// VLOGEFP
    224U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSD
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUD
    0U,	// VMAXUH
    0U,	// VMAXUW
    224U,	// VMHADDSHS
    224U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSD
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUD
    0U,	// VMINUH
    0U,	// VMINUW
    224U,	// VMLADDUHM
    0U,	// VMRGEW
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    0U,	// VMRGOW
    224U,	// VMSUMMBM
    224U,	// VMSUMSHM
    224U,	// VMSUMSHS
    224U,	// VMSUMUBM
    224U,	// VMSUMUHM
    224U,	// VMSUMUHS
    0U,	// VMUL10CUQ
    0U,	// VMUL10ECUQ
    0U,	// VMUL10EUQ
    0U,	// VMUL10UQ
    0U,	// VMULESB
    0U,	// VMULESH
    0U,	// VMULESW
    0U,	// VMULEUB
    0U,	// VMULEUH
    0U,	// VMULEUW
    0U,	// VMULOSB
    0U,	// VMULOSH
    0U,	// VMULOSW
    0U,	// VMULOUB
    0U,	// VMULOUH
    0U,	// VMULOUW
    0U,	// VMULUWM
    0U,	// VNAND
    0U,	// VNCIPHER
    0U,	// VNCIPHERLAST
    0U,	// VNEGD
    0U,	// VNEGW
    224U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    0U,	// VORC
    224U,	// VPERM
    224U,	// VPERMR
    224U,	// VPERMXOR
    0U,	// VPKPX
    0U,	// VPKSDSS
    0U,	// VPKSDUS
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUDUM
    0U,	// VPKUDUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VPMSUMB
    0U,	// VPMSUMD
    0U,	// VPMSUMH
    0U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VPRTYBD
    0U,	// VPRTYBQ
    0U,	// VPRTYBW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLD
    0U,	// VRLDMI
    0U,	// VRLDNM
    0U,	// VRLH
    0U,	// VRLW
    0U,	// VRLWMI
    0U,	// VRLWNM
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    224U,	// VSEL
    422U,	// VSHASIGMAD
    422U,	// VSHASIGMAW
    0U,	// VSL
    0U,	// VSLB
    0U,	// VSLD
    160U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLV
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTBs
    0U,	// VSPLTH
    0U,	// VSPLTHs
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAD
    0U,	// VSRAH
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRD
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRV
    0U,	// VSRW
    0U,	// VSUBCUQ
    0U,	// VSUBCUW
    224U,	// VSUBECUQ
    224U,	// VSUBEUQM
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUDM
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUQM
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    0U,	// VXOR
    12U,	// V_SET0
    12U,	// V_SET0B
    12U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    0U,	// XOR
    0U,	// XOR8
    0U,	// XOR8o
    4U,	// XORI
    4U,	// XORI8
    4U,	// XORIS
    4U,	// XORIS8
    0U,	// XORo
    0U,	// XSABSDP
    0U,	// XSABSQP
    0U,	// XSADDDP
    0U,	// XSADDQP
    0U,	// XSADDQPO
    0U,	// XSADDSP
    0U,	// XSCMPEQDP
    0U,	// XSCMPEXPDP
    0U,	// XSCMPEXPQP
    0U,	// XSCMPGEDP
    0U,	// XSCMPGTDP
    0U,	// XSCMPNEDP
    0U,	// XSCMPODP
    0U,	// XSCMPOQP
    0U,	// XSCMPUDP
    0U,	// XSCMPUQP
    0U,	// XSCPSGNDP
    0U,	// XSCPSGNQP
    0U,	// XSCVDPHP
    0U,	// XSCVDPQP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXDSs
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPSXWSs
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXDSs
    0U,	// XSCVDPUXWS
    0U,	// XSCVDPUXWSs
    0U,	// XSCVHPDP
    0U,	// XSCVQPDP
    0U,	// XSCVQPDPO
    0U,	// XSCVQPSDZ
    0U,	// XSCVQPSWZ
    0U,	// XSCVQPUDZ
    0U,	// XSCVQPUWZ
    0U,	// XSCVSDQP
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUDQP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    0U,	// XSDIVDP
    0U,	// XSDIVQP
    0U,	// XSDIVQPO
    0U,	// XSDIVSP
    0U,	// XSIEXPDP
    0U,	// XSIEXPQP
    1U,	// XSMADDADP
    1U,	// XSMADDASP
    1U,	// XSMADDMDP
    1U,	// XSMADDMSP
    0U,	// XSMADDQP
    0U,	// XSMADDQPO
    0U,	// XSMAXCDP
    0U,	// XSMAXDP
    0U,	// XSMAXJDP
    0U,	// XSMINCDP
    0U,	// XSMINDP
    0U,	// XSMINJDP
    1U,	// XSMSUBADP
    1U,	// XSMSUBASP
    1U,	// XSMSUBMDP
    1U,	// XSMSUBMSP
    0U,	// XSMSUBQP
    0U,	// XSMSUBQPO
    0U,	// XSMULDP
    0U,	// XSMULQP
    0U,	// XSMULQPO
    0U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNABSQP
    0U,	// XSNEGDP
    0U,	// XSNEGQP
    1U,	// XSNMADDADP
    1U,	// XSNMADDASP
    1U,	// XSNMADDMDP
    1U,	// XSNMADDMSP
    0U,	// XSNMADDQP
    0U,	// XSNMADDQPO
    1U,	// XSNMSUBADP
    1U,	// XSNMSUBASP
    1U,	// XSNMSUBMDP
    1U,	// XSNMSUBMSP
    0U,	// XSNMSUBQP
    0U,	// XSNMSUBQPO
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    288U,	// XSRQPI
    288U,	// XSRQPIX
    288U,	// XSRQPXP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTQP
    0U,	// XSSQRTQPO
    0U,	// XSSQRTSP
    0U,	// XSSUBDP
    0U,	// XSSUBQP
    0U,	// XSSUBQPO
    0U,	// XSSUBSP
    0U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    1U,	// XSTSTDCDP
    1U,	// XSTSTDCQP
    1U,	// XSTSTDCSP
    0U,	// XSXEXPDP
    0U,	// XSXEXPQP
    0U,	// XSXSIGDP
    0U,	// XSXSIGQP
    0U,	// XVABSDP
    0U,	// XVABSSP
    0U,	// XVADDDP
    0U,	// XVADDSP
    0U,	// XVCMPEQDP
    0U,	// XVCMPEQDPo
    0U,	// XVCMPEQSP
    0U,	// XVCMPEQSPo
    0U,	// XVCMPGEDP
    0U,	// XVCMPGEDPo
    0U,	// XVCMPGESP
    0U,	// XVCMPGESPo
    0U,	// XVCMPGTDP
    0U,	// XVCMPGTDPo
    0U,	// XVCMPGTSP
    0U,	// XVCMPGTSPo
    0U,	// XVCMPNEDP
    0U,	// XVCMPNEDPo
    0U,	// XVCMPNESP
    0U,	// XVCMPNESPo
    0U,	// XVCPSGNDP
    0U,	// XVCPSGNSP
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVHPSP
    0U,	// XVCVSPDP
    0U,	// XVCVSPHP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    0U,	// XVDIVDP
    0U,	// XVDIVSP
    0U,	// XVIEXPDP
    0U,	// XVIEXPSP
    1U,	// XVMADDADP
    1U,	// XVMADDASP
    1U,	// XVMADDMDP
    1U,	// XVMADDMSP
    0U,	// XVMAXDP
    0U,	// XVMAXSP
    0U,	// XVMINDP
    0U,	// XVMINSP
    1U,	// XVMSUBADP
    1U,	// XVMSUBASP
    1U,	// XVMSUBMDP
    1U,	// XVMSUBMSP
    0U,	// XVMULDP
    0U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    1U,	// XVNMADDADP
    1U,	// XVNMADDASP
    1U,	// XVNMADDMDP
    1U,	// XVNMADDMSP
    1U,	// XVNMSUBADP
    1U,	// XVNMSUBASP
    1U,	// XVNMSUBMDP
    1U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    0U,	// XVSUBDP
    0U,	// XVSUBSP
    0U,	// XVTDIVDP
    0U,	// XVTDIVSP
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    1U,	// XVTSTDCDP
    1U,	// XVTSTDCSP
    0U,	// XVXEXPDP
    0U,	// XVXEXPSP
    0U,	// XVXSIGDP
    0U,	// XVXSIGSP
    0U,	// XXBRD
    0U,	// XXBRH
    0U,	// XXBRQ
    0U,	// XXBRW
    20U,	// XXEXTRACTUW
    1U,	// XXINSERTW
    0U,	// XXLAND
    0U,	// XXLANDC
    0U,	// XXLEQV
    0U,	// XXLNAND
    0U,	// XXLNOR
    0U,	// XXLOR
    0U,	// XXLORC
    0U,	// XXLORf
    0U,	// XXLXOR
    12U,	// XXLXORdpz
    12U,	// XXLXORspz
    12U,	// XXLXORz
    0U,	// XXMRGHW
    0U,	// XXMRGLW
    0U,	// XXPERM
    288U,	// XXPERMDI
    494U,	// XXPERMDIs
    0U,	// XXPERMR
    224U,	// XXSEL
    288U,	// XXSLDWI
    0U,	// XXSPLTIB
    16U,	// XXSPLTW
    16U,	// XXSPLTWs
    22U,	// gBC
    24U,	// gBCA
    0U,	// gBCAat
    0U,	// gBCCTR
    0U,	// gBCCTRL
    22U,	// gBCL
    24U,	// gBCLA
    0U,	// gBCLAat
    0U,	// gBCLR
    0U,	// gBCLRL
    0U,	// gBCLat
    0U,	// gBCat
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 14) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CALL, PATCHABL...
    return;
    break;
  case 1:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O);
    O << ' ';
    printU16ImmOperand(MI, 1, O);
    return;
    break;
  case 3:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O);
    break;
  case 4:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O);
    break;
  case 5:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand(MI, 0, O, "cc");
    break;
  case 6:
    // BCTRL8_LDinto_toc
    printMemRegImm(MI, 0, O);
    return;
    break;
  case 7:
    // BL8_NOP_TLS, BL8_TLS, BL8_TLS_, BL_TLS
    printTLSCall(MI, 0, O);
    break;
  case 8:
    // DCBA, DCBFL, DCBFLP, DCBFx, DCBI, DCBST, DCBTCT, DCBTDS, DCBTSTCT, DCB...
    printMemRegReg(MI, 0, O);
    break;
  case 9:
    // DCBF, DCBT, DCBTST
    printMemRegReg(MI, 1, O);
    O << ", ";
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 10:
    // DSS, MBAR, MTFSB0, MTFSB1, TD, TDI, TW, TWI, gBC, gBCA, gBCCTR, gBCCTR...
    printU5ImmOperand(MI, 0, O);
    break;
  case 11:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTDCR, MTV...
    printOperand(MI, 1, O);
    break;
  case 12:
    // ICBLC, ICBLQ, ICBT, ICBTLS
    printU4ImmOperand(MI, 0, O);
    O << ", ";
    printMemRegReg(MI, 1, O);
    return;
    break;
  case 13:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 14:
    // MTSR
    printU4ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 0, O);
    return;
    break;
  case 15:
    // RFEBB
    printU1ImmOperand(MI, 0, O);
    return;
    break;
  case 16:
    // TABORTDC, TABORTDCI, TABORTWC, TABORTWCI
    printU5ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 17:
    // TBEGIN, TEND, TSR, XSRQPI, XSRQPIX, XSRQPXP
    printU1ImmOperand(MI, 1, O);
    break;
  case 18:
    // gBCAat, gBCLAat, gBCLat, gBCat
    printATBitsAsHint(MI, 1, O);
    O << ' ';
    printU5ImmOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    break;
  }


  // Fragment 1 encoded into 5 bits for 22 unique commands.
  switch ((Bits >> 19) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", ";
    break;
  case 1:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, TCRETURNai8, TCR...
    O << ' ';
    break;
  case 2:
    // B, BA, BCLalways, BDNZ, BDNZ8, BDNZA, BDNZAm, BDNZAp, BDNZL, BDNZLA, B...
    return;
    break;
  case 3:
    // BCC, CTRL_DEP
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 4:
    // BCCA
    O << 'a';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    O << "ctr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    O << "ctrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 7:
    // BCCL
    O << 'l';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 8:
    // BCCLA
    O << "la";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 9:
    // BCCLR
    O << "lr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 10:
    // BCCLRL
    O << "lrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    O << ", 0";
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP
    O << "\n\tnop";
    return;
    break;
  case 13:
    // MFTB8
    O << ", 268";
    return;
    break;
  case 14:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256";
    return;
    break;
  case 15:
    // QVLPCLSXint
    O << ", 0, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 16:
    // TABORTDC, TABORTWC
    printOperand(MI, 3, O);
    return;
    break;
  case 17:
    // TABORTDCI, TABORTWCI
    printU5ImmOperand(MI, 3, O);
    return;
    break;
  case 18:
    // TLBIE
    O << ',';
    printOperand(MI, 0, O);
    return;
    break;
  case 19:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1";
    return;
    break;
  case 20:
    // gBCAat, gBCLAat
    printAbsBranchOperand(MI, 3, O);
    return;
    break;
  case 21:
    // gBCLat, gBCat
    printBranchOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 24) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, LBARX, LBARXL, LBZX, LBZX8, ...
    printMemRegReg(MI, 1, O);
    break;
  case 2:
    // BC, BCL, BCLn, BCn
    printBranchOperand(MI, 1, O);
    return;
    break;
  case 3:
    // CMPRB, CMPRB8
    printU1ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    return;
    break;
  case 4:
    // CRSET, CRUNSET, MTDCR, V_SET0, V_SET0B, V_SET0H, XSRQPI, XSRQPIX, XSRQ...
    printOperand(MI, 0, O);
    break;
  case 5:
    // DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, EVADDIW
    printU5ImmOperand(MI, 2, O);
    break;
  case 6:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, RLDIMI, RL...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 7:
    // EVLDD, EVLDH, EVLDW, EVLHHESPLAT, EVLHHOSSPLAT, EVLHHOUSPLAT, EVLWHE, ...
    printMemRegImm(MI, 1, O);
    return;
    break;
  case 8:
    // EVSUBIFW
    printU5ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 9:
    // LA
    printS16ImmOperand(MI, 2, O);
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 10:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O);
    return;
    break;
  case 11:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O);
    return;
    break;
  case 12:
    // LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O);
    return;
    break;
  case 13:
    // MFBHRBE
    printU10ImmOperand(MI, 1, O);
    return;
    break;
  case 14:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O);
    return;
    break;
  case 15:
    // MFSR
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 16:
    // QVGPCI
    printU12ImmOperand(MI, 1, O);
    return;
    break;
  case 17:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O);
    return;
    break;
  case 18:
    // XXSPLTIB
    printU8ImmOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 29) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", ";
    break;
  case 1:
    // ADDME, ADDME8, ADDME8o, ADDMEo, ADDZE, ADDZE8, ADDZE8o, ADDZEo, BCDCTN...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' ';
    printOperand(MI, 3, O);
    O << ' ';
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 4:
    // LBARXL, LDARXL, LHARXL, LWARXL
    O << ", 1";
    return;
    break;
  case 5:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O);
    O << ", ";
    printU6ImmOperand(MI, 4, O);
    return;
    break;
  case 6:
    // RLWIMI, RLWIMI8, RLWIMI8o, RLWIMIo
    printU5ImmOperand(MI, 3, O);
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    O << ", ";
    printU5ImmOperand(MI, 5, O);
    return;
    break;
  case 7:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTBs, VSPLTH, VSPLTHs, VSPLTW
    printU5ImmOperand(MI, 1, O);
    return;
    break;
  case 8:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0";
    return;
    break;
  case 9:
    // VEXTRACTD, VEXTRACTUB, VEXTRACTUH, VEXTRACTUW, VINSERTB, VINSERTD, VIN...
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 10:
    // XSMADDADP, XSMADDASP, XSMADDMDP, XSMADDMSP, XSMSUBADP, XSMSUBASP, XSMS...
    printOperand(MI, 3, O);
    return;
    break;
  case 11:
    // XSTSTDCDP, XSTSTDCQP, XSTSTDCSP, XVTSTDCDP, XVTSTDCSP
    printU7ImmOperand(MI, 1, O);
    return;
    break;
  case 12:
    // XXINSERTW
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 33) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS, ADDIS8, CMPDI, CMPWI, MULLI...
    printS16ImmOperand(MI, 2, O);
    return;
    break;
  case 2:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O);
    return;
    break;
  case 3:
    // BCDCFNo, BCDCFSQo, BCDCFZo, BCDCTZo, BCDSETSGNo, CP_COPY, CP_COPY8, CP...
    printU1ImmOperand(MI, 2, O);
    break;
  case 4:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O);
    break;
  case 5:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EVRLWI, EVSLWI, EVSRWIS, EVSRWIU...
    printU5ImmOperand(MI, 2, O);
    break;
  case 6:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H, XXLXORdpz, XXLXORspz, XXLXOR...
    printOperand(MI, 0, O);
    return;
    break;
  case 7:
    // EVADDIW, XXPERMDIs
    printOperand(MI, 1, O);
    break;
  case 8:
    // QVESPLATI, QVESPLATIb, QVESPLATIs, XXSPLTW, XXSPLTWs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  case 9:
    // QVFMADD, QVFMADDS, QVFMADDSs, QVFMSUB, QVFMSUBS, QVFMSUBSs, QVFNMADD, ...
    printOperand(MI, 3, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // XXEXTRACTUW
    printU4ImmOperand(MI, 2, O);
    return;
    break;
  case 11:
    // gBC, gBCL
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 12:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // BCDSRo, BCDSo, BCDTRUNCo, CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EX...
    O << ", ";
  } else {
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    return;
  }


  // Fragment 6 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BCDSRo, BCDSo, BCDTRUNCo
    printU1ImmOperand(MI, 3, O);
    return;
    break;
  case 1:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O);
    return;
    break;
  case 2:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O);
    break;
  case 3:
    // FMADD, FMADDS, FMADDSo, FMADDo, FMSUB, FMSUBS, FMSUBSo, FMSUBo, FNMADD...
    printOperand(MI, 3, O);
    return;
    break;
  case 4:
    // QVALIGNI, QVALIGNIb, QVALIGNIs, XSRQPI, XSRQPIX, XSRQPXP, XXPERMDI, XX...
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 5:
    // QVFLOGICAL, QVFLOGICALb, QVFLOGICALs
    printU12ImmOperand(MI, 3, O);
    return;
    break;
  case 6:
    // VSHASIGMAD, VSHASIGMAW
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  case 7:
    // XXPERMDIs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 41) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNM8, RLWNM8o, RLWNMo
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    return;
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 310 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ '*', '*', 'F', 'R', 'A', 'M', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 36 */ '*', '*', 'B', 'A', 'S', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 53 */ 'f', '1', '0', 0,
  /* 57 */ 'q', '1', '0', 0,
  /* 61 */ 'r', '1', '0', 0,
  /* 65 */ 'v', 's', '1', '0', 0,
  /* 70 */ 'v', '1', '0', 0,
  /* 74 */ 'f', '2', '0', 0,
  /* 78 */ 'q', '2', '0', 0,
  /* 82 */ 'r', '2', '0', 0,
  /* 86 */ 'v', 's', '2', '0', 0,
  /* 91 */ 'v', '2', '0', 0,
  /* 95 */ 'f', '3', '0', 0,
  /* 99 */ 'q', '3', '0', 0,
  /* 103 */ 'r', '3', '0', 0,
  /* 107 */ 'v', 's', '3', '0', 0,
  /* 112 */ 'v', '3', '0', 0,
  /* 116 */ 'v', 's', '4', '0', 0,
  /* 121 */ 'v', 's', '5', '0', 0,
  /* 126 */ 'v', 's', '6', '0', 0,
  /* 131 */ 'f', '0', 0,
  /* 134 */ 'q', '0', 0,
  /* 137 */ 'c', 'r', '0', 0,
  /* 141 */ 'v', 's', '0', 0,
  /* 145 */ 'v', '0', 0,
  /* 148 */ 'f', '1', '1', 0,
  /* 152 */ 'q', '1', '1', 0,
  /* 156 */ 'r', '1', '1', 0,
  /* 160 */ 'v', 's', '1', '1', 0,
  /* 165 */ 'v', '1', '1', 0,
  /* 169 */ 'f', '2', '1', 0,
  /* 173 */ 'q', '2', '1', 0,
  /* 177 */ 'r', '2', '1', 0,
  /* 181 */ 'v', 's', '2', '1', 0,
  /* 186 */ 'v', '2', '1', 0,
  /* 190 */ 'f', '3', '1', 0,
  /* 194 */ 'q', '3', '1', 0,
  /* 198 */ 'r', '3', '1', 0,
  /* 202 */ 'v', 's', '3', '1', 0,
  /* 207 */ 'v', '3', '1', 0,
  /* 211 */ 'v', 's', '4', '1', 0,
  /* 216 */ 'v', 's', '5', '1', 0,
  /* 221 */ 'v', 's', '6', '1', 0,
  /* 226 */ 'f', '1', 0,
  /* 229 */ 'q', '1', 0,
  /* 232 */ 'c', 'r', '1', 0,
  /* 236 */ 'v', 's', '1', 0,
  /* 240 */ 'v', '1', 0,
  /* 243 */ 'f', '1', '2', 0,
  /* 247 */ 'q', '1', '2', 0,
  /* 251 */ 'r', '1', '2', 0,
  /* 255 */ 'v', 's', '1', '2', 0,
  /* 260 */ 'v', '1', '2', 0,
  /* 264 */ 'f', '2', '2', 0,
  /* 268 */ 'q', '2', '2', 0,
  /* 272 */ 'r', '2', '2', 0,
  /* 276 */ 'v', 's', '2', '2', 0,
  /* 281 */ 'v', '2', '2', 0,
  /* 285 */ 'v', 's', '3', '2', 0,
  /* 290 */ 'v', 's', '4', '2', 0,
  /* 295 */ 'v', 's', '5', '2', 0,
  /* 300 */ 'v', 's', '6', '2', 0,
  /* 305 */ 'f', '2', 0,
  /* 308 */ 'q', '2', 0,
  /* 311 */ 'c', 'r', '2', 0,
  /* 315 */ 'v', 's', '2', 0,
  /* 319 */ 'v', '2', 0,
  /* 322 */ 'f', '1', '3', 0,
  /* 326 */ 'q', '1', '3', 0,
  /* 330 */ 'r', '1', '3', 0,
  /* 334 */ 'v', 's', '1', '3', 0,
  /* 339 */ 'v', '1', '3', 0,
  /* 343 */ 'f', '2', '3', 0,
  /* 347 */ 'q', '2', '3', 0,
  /* 351 */ 'r', '2', '3', 0,
  /* 355 */ 'v', 's', '2', '3', 0,
  /* 360 */ 'v', '2', '3', 0,
  /* 364 */ 'v', 's', '3', '3', 0,
  /* 369 */ 'v', 's', '4', '3', 0,
  /* 374 */ 'v', 's', '5', '3', 0,
  /* 379 */ 'v', 's', '6', '3', 0,
  /* 384 */ 'f', '3', 0,
  /* 387 */ 'q', '3', 0,
  /* 390 */ 'c', 'r', '3', 0,
  /* 394 */ 'v', 's', '3', 0,
  /* 398 */ 'v', '3', 0,
  /* 401 */ 'f', '1', '4', 0,
  /* 405 */ 'q', '1', '4', 0,
  /* 409 */ 'r', '1', '4', 0,
  /* 413 */ 'v', 's', '1', '4', 0,
  /* 418 */ 'v', '1', '4', 0,
  /* 422 */ 'f', '2', '4', 0,
  /* 426 */ 'q', '2', '4', 0,
  /* 430 */ 'r', '2', '4', 0,
  /* 434 */ 'v', 's', '2', '4', 0,
  /* 439 */ 'v', '2', '4', 0,
  /* 443 */ 'v', 's', '3', '4', 0,
  /* 448 */ 'v', 's', '4', '4', 0,
  /* 453 */ 'v', 's', '5', '4', 0,
  /* 458 */ 'f', '4', 0,
  /* 461 */ 'q', '4', 0,
  /* 464 */ 'c', 'r', '4', 0,
  /* 468 */ 'v', 's', '4', 0,
  /* 472 */ 'v', '4', 0,
  /* 475 */ 'f', '1', '5', 0,
  /* 479 */ 'q', '1', '5', 0,
  /* 483 */ 'r', '1', '5', 0,
  /* 487 */ 'v', 's', '1', '5', 0,
  /* 492 */ 'v', '1', '5', 0,
  /* 496 */ 'f', '2', '5', 0,
  /* 500 */ 'q', '2', '5', 0,
  /* 504 */ 'r', '2', '5', 0,
  /* 508 */ 'v', 's', '2', '5', 0,
  /* 513 */ 'v', '2', '5', 0,
  /* 517 */ 'v', 's', '3', '5', 0,
  /* 522 */ 'v', 's', '4', '5', 0,
  /* 527 */ 'v', 's', '5', '5', 0,
  /* 532 */ 'f', '5', 0,
  /* 535 */ 'q', '5', 0,
  /* 538 */ 'c', 'r', '5', 0,
  /* 542 */ 'v', 's', '5', 0,
  /* 546 */ 'v', '5', 0,
  /* 549 */ 'f', '1', '6', 0,
  /* 553 */ 'q', '1', '6', 0,
  /* 557 */ 'r', '1', '6', 0,
  /* 561 */ 'v', 's', '1', '6', 0,
  /* 566 */ 'v', '1', '6', 0,
  /* 570 */ 'f', '2', '6', 0,
  /* 574 */ 'q', '2', '6', 0,
  /* 578 */ 'r', '2', '6', 0,
  /* 582 */ 'v', 's', '2', '6', 0,
  /* 587 */ 'v', '2', '6', 0,
  /* 591 */ 'v', 's', '3', '6', 0,
  /* 596 */ 'v', 's', '4', '6', 0,
  /* 601 */ 'v', 's', '5', '6', 0,
  /* 606 */ 'f', '6', 0,
  /* 609 */ 'q', '6', 0,
  /* 612 */ 'c', 'r', '6', 0,
  /* 616 */ 'v', 's', '6', 0,
  /* 620 */ 'v', '6', 0,
  /* 623 */ 'f', '1', '7', 0,
  /* 627 */ 'q', '1', '7', 0,
  /* 631 */ 'r', '1', '7', 0,
  /* 635 */ 'v', 's', '1', '7', 0,
  /* 640 */ 'v', '1', '7', 0,
  /* 644 */ 'f', '2', '7', 0,
  /* 648 */ 'q', '2', '7', 0,
  /* 652 */ 'r', '2', '7', 0,
  /* 656 */ 'v', 's', '2', '7', 0,
  /* 661 */ 'v', '2', '7', 0,
  /* 665 */ 'v', 's', '3', '7', 0,
  /* 670 */ 'v', 's', '4', '7', 0,
  /* 675 */ 'v', 's', '5', '7', 0,
  /* 680 */ 'f', '7', 0,
  /* 683 */ 'q', '7', 0,
  /* 686 */ 'c', 'r', '7', 0,
  /* 690 */ 'v', 's', '7', 0,
  /* 694 */ 'v', '7', 0,
  /* 697 */ 'f', '1', '8', 0,
  /* 701 */ 'q', '1', '8', 0,
  /* 705 */ 'r', '1', '8', 0,
  /* 709 */ 'v', 's', '1', '8', 0,
  /* 714 */ 'v', '1', '8', 0,
  /* 718 */ 'f', '2', '8', 0,
  /* 722 */ 'q', '2', '8', 0,
  /* 726 */ 'r', '2', '8', 0,
  /* 730 */ 'v', 's', '2', '8', 0,
  /* 735 */ 'v', '2', '8', 0,
  /* 739 */ 'v', 's', '3', '8', 0,
  /* 744 */ 'v', 's', '4', '8', 0,
  /* 749 */ 'v', 's', '5', '8', 0,
  /* 754 */ 'f', '8', 0,
  /* 757 */ 'q', '8', 0,
  /* 760 */ 'r', '8', 0,
  /* 763 */ 'v', 's', '8', 0,
  /* 767 */ 'v', '8', 0,
  /* 770 */ 'f', '1', '9', 0,
  /* 774 */ 'q', '1', '9', 0,
  /* 778 */ 'r', '1', '9', 0,
  /* 782 */ 'v', 's', '1', '9', 0,
  /* 787 */ 'v', '1', '9', 0,
  /* 791 */ 'f', '2', '9', 0,
  /* 795 */ 'q', '2', '9', 0,
  /* 799 */ 'r', '2', '9', 0,
  /* 803 */ 'v', 's', '2', '9', 0,
  /* 808 */ 'v', '2', '9', 0,
  /* 812 */ 'v', 's', '3', '9', 0,
  /* 817 */ 'v', 's', '4', '9', 0,
  /* 822 */ 'v', 's', '5', '9', 0,
  /* 827 */ 'f', '9', 0,
  /* 830 */ 'q', '9', 0,
  /* 833 */ 'r', '9', 0,
  /* 836 */ 'v', 's', '9', 0,
  /* 840 */ 'v', '9', 0,
  /* 843 */ 'c', 'a', 0,
  /* 846 */ 'v', 'r', 's', 'a', 'v', 'e', 0,
  /* 853 */ 'l', 'r', 0,
  /* 856 */ 'c', 't', 'r', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    36, 843, 856, 18, 853, 0, 846, 55, 36, 137, 232, 311, 390, 464, 
    538, 612, 686, 856, 131, 226, 305, 384, 458, 532, 606, 680, 754, 827, 
    53, 148, 243, 322, 401, 475, 549, 623, 697, 770, 74, 169, 264, 343, 
    422, 496, 570, 644, 718, 791, 95, 190, 18, 853, 134, 229, 308, 387, 
    461, 535, 609, 683, 757, 830, 57, 152, 247, 326, 405, 479, 553, 627, 
    701, 774, 78, 173, 268, 347, 426, 500, 574, 648, 722, 795, 99, 194, 
    138, 233, 312, 391, 465, 539, 613, 687, 760, 833, 61, 156, 251, 330, 
    409, 483, 557, 631, 705, 778, 82, 177, 272, 351, 430, 504, 578, 652, 
    726, 799, 103, 198, 145, 240, 319, 398, 472, 546, 620, 694, 767, 840, 
    70, 165, 260, 339, 418, 492, 566, 640, 714, 787, 91, 186, 281, 360, 
    439, 513, 587, 661, 735, 808, 112, 207, 145, 240, 319, 398, 472, 546, 
    620, 694, 767, 840, 70, 165, 260, 339, 418, 492, 566, 640, 714, 787, 
    91, 186, 281, 360, 439, 513, 587, 661, 735, 808, 112, 207, 141, 236, 
    315, 394, 468, 542, 616, 690, 763, 836, 65, 160, 255, 334, 413, 487, 
    561, 635, 709, 782, 86, 181, 276, 355, 434, 508, 582, 656, 730, 803, 
    107, 202, 285, 364, 443, 517, 591, 665, 739, 812, 116, 211, 290, 369, 
    448, 522, 596, 670, 744, 817, 121, 216, 295, 374, 453, 527, 601, 675, 
    749, 822, 126, 221, 300, 379, 138, 233, 312, 391, 465, 539, 613, 687, 
    760, 833, 61, 156, 251, 330, 409, 483, 557, 631, 705, 778, 82, 177, 
    272, 351, 430, 504, 578, 652, 726, 799, 103, 198, 55, 245, 551, 54, 
    402, 698, 265, 571, 96, 150, 477, 772, 323, 624, 170, 497, 792, 55, 
    403, 699, 244, 550, 75, 423, 719, 324, 625, 149, 476, 771, 344, 645, 
    191, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case PPC::BCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 12, CR0, condbrtarget:$dst)
      AsmString = "blt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 14, CR0, condbrtarget:$dst)
      AsmString = "blt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 15, CR0, condbrtarget:$dst)
      AsmString = "blt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 44, CR0, condbrtarget:$dst)
      AsmString = "bgt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 46, CR0, condbrtarget:$dst)
      AsmString = "bgt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 47, CR0, condbrtarget:$dst)
      AsmString = "bgt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 76, CR0, condbrtarget:$dst)
      AsmString = "beq $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 78, CR0, condbrtarget:$dst)
      AsmString = "beq- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 79, CR0, condbrtarget:$dst)
      AsmString = "beq+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 68, CR0, condbrtarget:$dst)
      AsmString = "bne $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 70, CR0, condbrtarget:$dst)
      AsmString = "bne- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 71, CR0, condbrtarget:$dst)
      AsmString = "bne+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 12, CR0, abscondbrtarget:$dst)
      AsmString = "blta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 14, CR0, abscondbrtarget:$dst)
      AsmString = "blta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 15, CR0, abscondbrtarget:$dst)
      AsmString = "blta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqa $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqa- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqa+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnea $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnea- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnea+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCCTR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 12, crrc:$cc)
      AsmString = "bltctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 14, crrc:$cc)
      AsmString = "bltctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 15, crrc:$cc)
      AsmString = "bltctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 44, crrc:$cc)
      AsmString = "bgtctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 46, crrc:$cc)
      AsmString = "bgtctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 47, crrc:$cc)
      AsmString = "bgtctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 76, crrc:$cc)
      AsmString = "beqctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 78, crrc:$cc)
      AsmString = "beqctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 79, crrc:$cc)
      AsmString = "beqctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 68, crrc:$cc)
      AsmString = "bnectr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 70, crrc:$cc)
      AsmString = "bnectr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 71, crrc:$cc)
      AsmString = "bnectr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return false;
  case PPC::BCCCTRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 12, crrc:$cc)
      AsmString = "bltctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 14, crrc:$cc)
      AsmString = "bltctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 15, crrc:$cc)
      AsmString = "bltctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 44, crrc:$cc)
      AsmString = "bgtctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 46, crrc:$cc)
      AsmString = "bgtctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 47, crrc:$cc)
      AsmString = "bgtctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 76, crrc:$cc)
      AsmString = "beqctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 78, crrc:$cc)
      AsmString = "beqctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 79, crrc:$cc)
      AsmString = "beqctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 68, crrc:$cc)
      AsmString = "bnectrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 70, crrc:$cc)
      AsmString = "bnectrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 71, crrc:$cc)
      AsmString = "bnectrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return false;
  case PPC::BCCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 12, CR0, condbrtarget:$dst)
      AsmString = "bltl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 14, CR0, condbrtarget:$dst)
      AsmString = "bltl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 15, CR0, condbrtarget:$dst)
      AsmString = "bltl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 44, CR0, condbrtarget:$dst)
      AsmString = "bgtl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 46, CR0, condbrtarget:$dst)
      AsmString = "bgtl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 47, CR0, condbrtarget:$dst)
      AsmString = "bgtl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 76, CR0, condbrtarget:$dst)
      AsmString = "beql $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 78, CR0, condbrtarget:$dst)
      AsmString = "beql- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 79, CR0, condbrtarget:$dst)
      AsmString = "beql+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 68, CR0, condbrtarget:$dst)
      AsmString = "bnel $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 70, CR0, condbrtarget:$dst)
      AsmString = "bnel- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 71, CR0, condbrtarget:$dst)
      AsmString = "bnel+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 12, CR0, abscondbrtarget:$dst)
      AsmString = "bltla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 14, CR0, abscondbrtarget:$dst)
      AsmString = "bltla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 15, CR0, abscondbrtarget:$dst)
      AsmString = "bltla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnela $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnela- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnela+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCLR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 12, crrc:$cc)
      AsmString = "bltlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 14, crrc:$cc)
      AsmString = "bltlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 15, crrc:$cc)
      AsmString = "bltlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 44, crrc:$cc)
      AsmString = "bgtlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 46, crrc:$cc)
      AsmString = "bgtlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 47, crrc:$cc)
      AsmString = "bgtlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 76, crrc:$cc)
      AsmString = "beqlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 78, crrc:$cc)
      AsmString = "beqlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 79, crrc:$cc)
      AsmString = "beqlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 68, crrc:$cc)
      AsmString = "bnelr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 70, crrc:$cc)
      AsmString = "bnelr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 71, crrc:$cc)
      AsmString = "bnelr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return false;
  case PPC::BCCLRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 12, crrc:$cc)
      AsmString = "bltlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 14, crrc:$cc)
      AsmString = "bltlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 15, crrc:$cc)
      AsmString = "bltlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 44, crrc:$cc)
      AsmString = "bgtlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 46, crrc:$cc)
      AsmString = "bgtlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 47, crrc:$cc)
      AsmString = "bgtlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 76, crrc:$cc)
      AsmString = "beqlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 78, crrc:$cc)
      AsmString = "beqlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 79, crrc:$cc)
      AsmString = "beqlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 68, crrc:$cc)
      AsmString = "bnelrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 70, crrc:$cc)
      AsmString = "bnelrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 71, crrc:$cc)
      AsmString = "bnelrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return false;
  case PPC::CMPD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpd $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPDI CR0, g8rc:$rA, s16imm64:$imm)
      AsmString = "cmpdi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CMPLD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpld $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm)
      AsmString = "cmpldi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmplw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLWI CR0, gprc:$rA, u16imm:$imm)
      AsmString = "cmplwi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmpw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPWI CR0, gprc:$rA, s16imm:$imm)
      AsmString = "cmpwi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CNTLZW:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZW gprc:$rA, gprc:$rS)
      AsmString = "cntlzw $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CNTLZWo:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZWo gprc:$rA, gprc:$rS)
      AsmString = "cntlzw. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CREQV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crset $\x01";
      break;
    }
    return false;
  case PPC::CRNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CROR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crmove $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CRXOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crclr $\x01";
      break;
    }
    return false;
  case PPC::MBAR:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (MBAR 0)
      AsmString = "mbar";
      break;
    }
    return false;
  case PPC::MFDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MFDCR gprc:$Rx, 128)
      AsmString = "mfbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MFDCR gprc:$Rx, 129)
      AsmString = "mfbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MFDCR gprc:$Rx, 130)
      AsmString = "mfbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MFDCR gprc:$Rx, 131)
      AsmString = "mfbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MFDCR gprc:$Rx, 132)
      AsmString = "mfbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MFDCR gprc:$Rx, 133)
      AsmString = "mfbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MFDCR gprc:$Rx, 134)
      AsmString = "mfbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MFDCR gprc:$Rx, 135)
      AsmString = "mfbr7 $\x01";
      break;
    }
    return false;
  case PPC::MFSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1) {
      // (MFSPR gprc:$Rx, 1)
      AsmString = "mfxer $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (MFSPR gprc:$Rx, 4)
      AsmString = "mfrtcu $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 5) {
      // (MFSPR gprc:$Rx, 5)
      AsmString = "mfrtcl $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 17) {
      // (MFSPR gprc:$Rx, 17)
      AsmString = "mfdscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 18) {
      // (MFSPR gprc:$Rx, 18)
      AsmString = "mfdsisr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 19) {
      // (MFSPR gprc:$Rx, 19)
      AsmString = "mfdar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 990) {
      // (MFSPR gprc:$Rx, 990)
      AsmString = "mfsrr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 991) {
      // (MFSPR gprc:$Rx, 991)
      AsmString = "mfsrr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 28) {
      // (MFSPR gprc:$Rx, 28)
      AsmString = "mfcfar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 29) {
      // (MFSPR gprc:$Rx, 29)
      AsmString = "mfamr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 48) {
      // (MFSPR gprc:$Rx, 48)
      AsmString = "mfpid $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 989) {
      // (MFSPR gprc:$Rx, 989)
      AsmString = "mftblo $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 988) {
      // (MFSPR gprc:$Rx, 988)
      AsmString = "mftbhi $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 536) {
      // (MFSPR gprc:$Rx, 536)
      AsmString = "mfdbatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 538) {
      // (MFSPR gprc:$Rx, 538)
      AsmString = "mfdbatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 540) {
      // (MFSPR gprc:$Rx, 540)
      AsmString = "mfdbatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 542) {
      // (MFSPR gprc:$Rx, 542)
      AsmString = "mfdbatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 537) {
      // (MFSPR gprc:$Rx, 537)
      AsmString = "mfdbatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 539) {
      // (MFSPR gprc:$Rx, 539)
      AsmString = "mfdbatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 541) {
      // (MFSPR gprc:$Rx, 541)
      AsmString = "mfdbatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 543) {
      // (MFSPR gprc:$Rx, 543)
      AsmString = "mfdbatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 528) {
      // (MFSPR gprc:$Rx, 528)
      AsmString = "mfibatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 530) {
      // (MFSPR gprc:$Rx, 530)
      AsmString = "mfibatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 532) {
      // (MFSPR gprc:$Rx, 532)
      AsmString = "mfibatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 534) {
      // (MFSPR gprc:$Rx, 534)
      AsmString = "mfibatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 529) {
      // (MFSPR gprc:$Rx, 529)
      AsmString = "mfibatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 531) {
      // (MFSPR gprc:$Rx, 531)
      AsmString = "mfibatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 533) {
      // (MFSPR gprc:$Rx, 533)
      AsmString = "mfibatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 535) {
      // (MFSPR gprc:$Rx, 535)
      AsmString = "mfibatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1018) {
      // (MFSPR gprc:$Rx, 1018)
      AsmString = "mfdccr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1019) {
      // (MFSPR gprc:$Rx, 1019)
      AsmString = "mficcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 981) {
      // (MFSPR gprc:$Rx, 981)
      AsmString = "mfdear $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 980) {
      // (MFSPR gprc:$Rx, 980)
      AsmString = "mfesr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 512) {
      // (MFSPR gprc:$Rx, 512)
      AsmString = "mfspefscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 986) {
      // (MFSPR gprc:$Rx, 986)
      AsmString = "mftcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 280) {
      // (MFSPR gprc:$RT, 280)
      AsmString = "mfasr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 287) {
      // (MFSPR gprc:$RT, 287)
      AsmString = "mfpvr $\x01";
      break;
    }
    return false;
  case PPC::MFTB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 269) {
      // (MFTB gprc:$Rx, 269)
      AsmString = "mftbu $\x01";
      break;
    }
    return false;
  case PPC::MFVRSAVE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MFVRSAVE gprc:$rS)
      AsmString = "mfvrsave $\x01";
      break;
    }
    return false;
  case PPC::MFVSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MFVSRD g8rc:$rA, f8rc:$src)
      AsmString = "mffprd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTCRF8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 255 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTCRF8 255, g8rc:$rA)
      AsmString = "mtcr $\x02";
      break;
    }
    return false;
  case PPC::MTDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MTDCR gprc:$Rx, 128)
      AsmString = "mtbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MTDCR gprc:$Rx, 129)
      AsmString = "mtbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MTDCR gprc:$Rx, 130)
      AsmString = "mtbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MTDCR gprc:$Rx, 131)
      AsmString = "mtbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MTDCR gprc:$Rx, 132)
      AsmString = "mtbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MTDCR gprc:$Rx, 133)
      AsmString = "mtbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MTDCR gprc:$Rx, 134)
      AsmString = "mtbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MTDCR gprc:$Rx, 135)
      AsmString = "mtbr7 $\x01";
      break;
    }
    return false;
  case PPC::MTFSF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSF i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFI crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFIo:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFIo crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSFo i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTMSR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSR gprc:$RS, 0)
      AsmString = "mtmsr $\x01";
      break;
    }
    return false;
  case PPC::MTMSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSRD gprc:$RS, 0)
      AsmString = "mtmsrd $\x01";
      break;
    }
    return false;
  case PPC::MTSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1, gprc:$Rx)
      AsmString = "mtxer $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 17 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 17, gprc:$Rx)
      AsmString = "mtdscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 18 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 18, gprc:$Rx)
      AsmString = "mtdsisr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 19 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 19, gprc:$Rx)
      AsmString = "mtdar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 990 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 990, gprc:$Rx)
      AsmString = "mtsrr2 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 991 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 991, gprc:$Rx)
      AsmString = "mtsrr3 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 28 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 28, gprc:$Rx)
      AsmString = "mtcfar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 29 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 29, gprc:$Rx)
      AsmString = "mtamr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 48 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 48, gprc:$Rx)
      AsmString = "mtpid $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 284 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 284, gprc:$Rx)
      AsmString = "mttbl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 285 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 285, gprc:$Rx)
      AsmString = "mttbu $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 989 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 989, gprc:$Rx)
      AsmString = "mttblo $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 988 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 988, gprc:$Rx)
      AsmString = "mttbhi $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 536 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 536, gprc:$Rx)
      AsmString = "mtdbatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 538 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 538, gprc:$Rx)
      AsmString = "mtdbatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 540 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 540, gprc:$Rx)
      AsmString = "mtdbatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 542 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 542, gprc:$Rx)
      AsmString = "mtdbatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 537 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 537, gprc:$Rx)
      AsmString = "mtdbatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 539 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 539, gprc:$Rx)
      AsmString = "mtdbatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 541 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 541, gprc:$Rx)
      AsmString = "mtdbatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 543 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 543, gprc:$Rx)
      AsmString = "mtdbatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 528 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 528, gprc:$Rx)
      AsmString = "mtibatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 530 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 530, gprc:$Rx)
      AsmString = "mtibatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 532 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 532, gprc:$Rx)
      AsmString = "mtibatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 534 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 534, gprc:$Rx)
      AsmString = "mtibatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 529 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 529, gprc:$Rx)
      AsmString = "mtibatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 531 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 531, gprc:$Rx)
      AsmString = "mtibatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 533 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 533, gprc:$Rx)
      AsmString = "mtibatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 535 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 535, gprc:$Rx)
      AsmString = "mtibatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1018 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1018, gprc:$Rx)
      AsmString = "mtdccr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1019 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1019, gprc:$Rx)
      AsmString = "mticcr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 981 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 981, gprc:$Rx)
      AsmString = "mtdear $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 980 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 980, gprc:$Rx)
      AsmString = "mtesr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 512 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 512, gprc:$Rx)
      AsmString = "mtspefscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 986 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 986, gprc:$Rx)
      AsmString = "mttcr $\x02";
      break;
    }
    return false;
  case PPC::MTVRSAVE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MTVRSAVE gprc:$rS)
      AsmString = "mtvrsave $\x01";
      break;
    }
    return false;
  case PPC::NOR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not $\x01, $\x02";
      break;
    }
    return false;
  case PPC::NOR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::QVFLOGICALb:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 0)
      AsmString = "qvfclr $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 1)
      AsmString = "qvfand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 4)
      AsmString = "qvfandc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 5)
      AsmString = "qvfctfb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 6)
      AsmString = "qvfxor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 7)
      AsmString = "qvfor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 8)
      AsmString = "qvfnor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 9) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 9)
      AsmString = "qvfequ $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 10)
      AsmString = "qvfnot $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 13)
      AsmString = "qvforc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 14)
      AsmString = "qvfnand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 15)
      AsmString = "qvfset $\x01";
      break;
    }
    return false;
  case PPC::RLDCL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDCLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCLo g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDICL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICL_32:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL_32 gprc:$rA, gprc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi. $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi. $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLWINM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWINMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi. $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi. $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWNM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLWNMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNMo gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::SC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return false;
  case PPC::SUBF8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBF8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return false;
  case PPC::TD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 16, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 4, g8rc:$rA, g8rc:$rB)
      AsmString = "tdeq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 8, g8rc:$rA, g8rc:$rB)
      AsmString = "tdgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 24, g8rc:$rA, g8rc:$rB)
      AsmString = "tdne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 2, g8rc:$rA, g8rc:$rB)
      AsmString = "tdllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 1, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 31, g8rc:$rA, g8rc:$rB)
      AsmString = "tdu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 16, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 4, g8rc:$rA, s16imm:$imm)
      AsmString = "tdeqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 8, g8rc:$rA, s16imm:$imm)
      AsmString = "tdgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 24, g8rc:$rA, s16imm:$imm)
      AsmString = "tdnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 2, g8rc:$rA, s16imm:$imm)
      AsmString = "tdllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 1, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 31, g8rc:$rA, s16imm:$imm)
      AsmString = "tdui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::TLBIE:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TLBIE R0, gprc:$RB)
      AsmString = "tlbie $\x02";
      break;
    }
    return false;
  case PPC::TLBRE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBRE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbrehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBRE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbrelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TLBWE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBWE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbwehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBWE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbwelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 16, gprc:$rA, gprc:$rB)
      AsmString = "twlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 4, gprc:$rA, gprc:$rB)
      AsmString = "tweq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 8, gprc:$rA, gprc:$rB)
      AsmString = "twgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 24, gprc:$rA, gprc:$rB)
      AsmString = "twne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 2, gprc:$rA, gprc:$rB)
      AsmString = "twllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 1, gprc:$rA, gprc:$rB)
      AsmString = "twlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 31, gprc:$rA, gprc:$rB)
      AsmString = "twu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 16, gprc:$rA, s16imm:$imm)
      AsmString = "twlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 4, gprc:$rA, s16imm:$imm)
      AsmString = "tweqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 8, gprc:$rA, s16imm:$imm)
      AsmString = "twgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 24, gprc:$rA, s16imm:$imm)
      AsmString = "twnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 2, gprc:$rA, s16imm:$imm)
      AsmString = "twllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 1, gprc:$rA, s16imm:$imm)
      AsmString = "twlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 31, gprc:$rA, s16imm:$imm)
      AsmString = "twui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::VNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (VNOR vrrc:$vD, vrrc:$vA, vrrc:$vA)
      AsmString = "vnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::VOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (VOR vrrc:$vD, vrrc:$vA, vrrc:$vA)
      AsmString = "vmr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::WAIT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return false;
  case PPC::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).getReg() == PPC::R0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return false;
  case PPC::XVCPSGNDP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovdp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XVCPSGNSP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovsp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0)
      AsmString = "xxmrghd $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3)
      AsmString = "xxmrgld $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDIs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::gBC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzf $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfa $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCAat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCCTR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 12, crbitrc:$bi, 0)
      AsmString = "btctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 4, crbitrc:$bi, 0)
      AsmString = "bfctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 14, crbitrc:$bi, 0)
      AsmString = "btctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 6, crbitrc:$bi, 0)
      AsmString = "bfctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 15, crbitrc:$bi, 0)
      AsmString = "btctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 7, crbitrc:$bi, 0)
      AsmString = "bfctr+ $\x02";
      break;
    }
    return false;
  case PPC::gBCCTRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 12, crbitrc:$bi, 0)
      AsmString = "btctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 4, crbitrc:$bi, 0)
      AsmString = "bfctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 14, crbitrc:$bi, 0)
      AsmString = "btctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 6, crbitrc:$bi, 0)
      AsmString = "bfctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 15, crbitrc:$bi, 0)
      AsmString = "btctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 7, crbitrc:$bi, 0)
      AsmString = "bfctrl+ $\x02";
      break;
    }
    return false;
  case PPC::gBCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzfl $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfla $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCLAat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCLR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 12, crbitrc:$bi, 0)
      AsmString = "btlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 4, crbitrc:$bi, 0)
      AsmString = "bflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 14, crbitrc:$bi, 0)
      AsmString = "btlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 6, crbitrc:$bi, 0)
      AsmString = "bflr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 15, crbitrc:$bi, 0)
      AsmString = "btlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 7, crbitrc:$bi, 0)
      AsmString = "bflr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 8, crbitrc:$bi, 0)
      AsmString = "bdnztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 0, crbitrc:$bi, 0)
      AsmString = "bdnzflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 10, crbitrc:$bi, 0)
      AsmString = "bdztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 2, crbitrc:$bi, 0)
      AsmString = "bdzflr $\x02";
      break;
    }
    return false;
  case PPC::gBCLRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 12, crbitrc:$bi, 0)
      AsmString = "btlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 4, crbitrc:$bi, 0)
      AsmString = "bflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 14, crbitrc:$bi, 0)
      AsmString = "btlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 6, crbitrc:$bi, 0)
      AsmString = "bflrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 15, crbitrc:$bi, 0)
      AsmString = "btlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 7, crbitrc:$bi, 0)
      AsmString = "bflrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 8, crbitrc:$bi, 0)
      AsmString = "bdnztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 0, crbitrc:$bi, 0)
      AsmString = "bdnzflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 10, crbitrc:$bi, 0)
      AsmString = "bdztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 2, crbitrc:$bi, 0)
      AsmString = "bdzflrl $\x02";
      break;
    }
    return false;
  case PPC::gBCLat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t')      OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void PPCInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printBranchOperand(MI, OpIdx, OS);
    break;
  case 1:
    printAbsBranchOperand(MI, OpIdx, OS);
    break;
  case 2:
    printS16ImmOperand(MI, OpIdx, OS);
    break;
  case 3:
    printU16ImmOperand(MI, OpIdx, OS);
    break;
  case 4:
    printU6ImmOperand(MI, OpIdx, OS);
    break;
  case 5:
    printU5ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
